{"ast":null,"code":"/**\n * This modules provides simple percent (URI) encoding.\n *\n * @note Safety check for input types is not done intentionally as these\n * functions are invoked in the hot code path.\n *\n * @private\n * @module postman-url-encoder/encoder/percent-encode\n */\n\n/**\n * @fileoverview\n * A percent-encoding mechanism is used to represent a data octet in a component\n * when that octet's corresponding character is outside the allowed set or is\n * being used as a delimiter of, or within, the component.\n * A percent-encoded octet is encoded as a character triplet, consisting of the\n * percent character \"%\" followed by the two hexadecimal digits representing\n * that octet's numeric value.\n *\n * For example, \"%20\" is the percent-encoding for the binary octet \"00100000\"\n * (ABNF: %x20), which in US-ASCII corresponds to the space character (SP).\n *\n * @see {@link https://en.wikipedia.org/wiki/Percent-encoding}\n * @see {@link https://tools.ietf.org/html/rfc3986#section-2.1}\n */\n\nconst E = '',\n  ZERO = '0',\n  PERCENT = '%';\n\n/**\n * Checks if character with given code is valid hexadecimal digit or not.\n *\n * @private\n * @param {Number} byte Byte\n * @returns {Boolean}\n */\nfunction isPreEncodedCharacter(byte) {\n  return byte >= 0x30 && byte <= 0x39 ||\n  // 0-9\n  byte >= 0x41 && byte <= 0x46 ||\n  // A-F\n  byte >= 0x61 && byte <= 0x66; // a-f\n}\n\n/**\n * Checks if character at given index in the buffer is already percent encoded or not.\n *\n * @private\n * @param {Buffer} buffer Buffer to check the character from\n * @param {Number} i Index of the character to check\n * @returns {Boolean} true if the character is encoded, false otherwise\n */\nfunction isPreEncoded(buffer, i) {\n  // if it is % check next two bytes for percent encode characters\n  // looking for pattern %00 - %FF\n  return buffer[i] === 0x25 &&\n  // %\n  isPreEncodedCharacter(buffer[i + 1]) && isPreEncodedCharacter(buffer[i + 2]);\n}\n\n/**\n * Percent encode a character with given code.\n *\n * @example\n * // returns '%20'\n * encodeCharCode(32)\n *\n * @param {Number} code Character code\n * @returns {String} Percent-encoded character\n */\nfunction encodeCharCode(code) {\n  let hex = code.toString(16).toUpperCase();\n  hex.length === 1 && (hex = ZERO + hex);\n  return PERCENT + hex;\n}\n\n/**\n * Percent-encode the given string with the given {@link EncodeSet}.\n *\n * @example\n * // returns 'foo%40bar'\n * encode('foo@bar', new EncodeSet(['@']))\n *\n * @param {String} value String to percent-encode\n * @param {EncodeSet} encodeSet EncodeSet to use for encoding\n * @returns {String} Percent-encoded string\n */\nfunction encode(value, encodeSet) {\n  let i,\n    ii,\n    charCode,\n    encoded = E,\n    buffer = Buffer.from(value);\n  for (i = 0, ii = buffer.length; i < ii; ++i) {\n    // avoid double encoding\n    if (i < ii - 2 && isPreEncoded(buffer, i)) {\n      encoded += PERCENT + String.fromCharCode(buffer[++i], buffer[++i]);\n      continue;\n    }\n    charCode = buffer[i];\n    encoded += encodeSet.has(charCode) ?\n    // encode if char code present in encodeSet\n    encodeCharCode(charCode) :\n    // or, append string from char code\n    String.fromCharCode(charCode);\n  }\n  return encoded;\n}\nmodule.exports = {\n  encode,\n  encodeCharCode\n};","map":{"version":3,"names":["E","ZERO","PERCENT","isPreEncodedCharacter","byte","isPreEncoded","buffer","i","encodeCharCode","code","hex","toString","toUpperCase","length","encode","value","encodeSet","ii","charCode","encoded","Buffer","from","String","fromCharCode","has","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-url-encoder/encoder/percent-encode.js"],"sourcesContent":["/**\n * This modules provides simple percent (URI) encoding.\n *\n * @note Safety check for input types is not done intentionally as these\n * functions are invoked in the hot code path.\n *\n * @private\n * @module postman-url-encoder/encoder/percent-encode\n */\n\n/**\n * @fileoverview\n * A percent-encoding mechanism is used to represent a data octet in a component\n * when that octet's corresponding character is outside the allowed set or is\n * being used as a delimiter of, or within, the component.\n * A percent-encoded octet is encoded as a character triplet, consisting of the\n * percent character \"%\" followed by the two hexadecimal digits representing\n * that octet's numeric value.\n *\n * For example, \"%20\" is the percent-encoding for the binary octet \"00100000\"\n * (ABNF: %x20), which in US-ASCII corresponds to the space character (SP).\n *\n * @see {@link https://en.wikipedia.org/wiki/Percent-encoding}\n * @see {@link https://tools.ietf.org/html/rfc3986#section-2.1}\n */\n\nconst E = '',\n    ZERO = '0',\n    PERCENT = '%';\n\n/**\n * Checks if character with given code is valid hexadecimal digit or not.\n *\n * @private\n * @param {Number} byte Byte\n * @returns {Boolean}\n */\nfunction isPreEncodedCharacter (byte) {\n    return (byte >= 0x30 && byte <= 0x39) || // 0-9\n        (byte >= 0x41 && byte <= 0x46) || // A-F\n        (byte >= 0x61 && byte <= 0x66); // a-f\n}\n\n/**\n * Checks if character at given index in the buffer is already percent encoded or not.\n *\n * @private\n * @param {Buffer} buffer Buffer to check the character from\n * @param {Number} i Index of the character to check\n * @returns {Boolean} true if the character is encoded, false otherwise\n */\nfunction isPreEncoded (buffer, i) {\n    // if it is % check next two bytes for percent encode characters\n    // looking for pattern %00 - %FF\n    return buffer[i] === 0x25 && // %\n        isPreEncodedCharacter(buffer[i + 1]) &&\n        isPreEncodedCharacter(buffer[i + 2]);\n}\n\n/**\n * Percent encode a character with given code.\n *\n * @example\n * // returns '%20'\n * encodeCharCode(32)\n *\n * @param {Number} code Character code\n * @returns {String} Percent-encoded character\n */\nfunction encodeCharCode (code) {\n    let hex = code.toString(16).toUpperCase();\n\n    (hex.length === 1) && (hex = ZERO + hex);\n\n    return PERCENT + hex;\n}\n\n/**\n * Percent-encode the given string with the given {@link EncodeSet}.\n *\n * @example\n * // returns 'foo%40bar'\n * encode('foo@bar', new EncodeSet(['@']))\n *\n * @param {String} value String to percent-encode\n * @param {EncodeSet} encodeSet EncodeSet to use for encoding\n * @returns {String} Percent-encoded string\n */\nfunction encode (value, encodeSet) {\n    let i,\n        ii,\n        charCode,\n        encoded = E,\n        buffer = Buffer.from(value);\n\n    for (i = 0, ii = buffer.length; i < ii; ++i) {\n        // avoid double encoding\n        if (i < ii - 2 && isPreEncoded(buffer, i)) {\n            encoded += PERCENT + String.fromCharCode(buffer[++i], buffer[++i]);\n            continue;\n        }\n\n        charCode = buffer[i];\n\n        encoded += encodeSet.has(charCode) ?\n            // encode if char code present in encodeSet\n            encodeCharCode(charCode) :\n            // or, append string from char code\n            String.fromCharCode(charCode);\n    }\n\n    return encoded;\n}\n\nmodule.exports = {\n    encode,\n    encodeCharCode\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,CAAC,GAAG,EAAE;EACRC,IAAI,GAAG,GAAG;EACVC,OAAO,GAAG,GAAG;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqB,CAAEC,IAAI,EAAE;EAClC,OAAQA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI;EAAK;EACpCA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAK;EAAI;EACjCA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAK,CAAC,CAAC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,CAAEC,MAAM,EAAEC,CAAC,EAAE;EAC9B;EACA;EACA,OAAOD,MAAM,CAACC,CAAC,CAAC,KAAK,IAAI;EAAI;EACzBJ,qBAAqB,CAACG,MAAM,CAACC,CAAC,GAAG,CAAC,CAAC,CAAC,IACpCJ,qBAAqB,CAACG,MAAM,CAACC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAAEC,IAAI,EAAE;EAC3B,IAAIC,GAAG,GAAGD,IAAI,CAACE,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,EAAE;EAExCF,GAAG,CAACG,MAAM,KAAK,CAAC,KAAMH,GAAG,GAAGT,IAAI,GAAGS,GAAG,CAAC;EAExC,OAAOR,OAAO,GAAGQ,GAAG;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,MAAM,CAAEC,KAAK,EAAEC,SAAS,EAAE;EAC/B,IAAIT,CAAC;IACDU,EAAE;IACFC,QAAQ;IACRC,OAAO,GAAGnB,CAAC;IACXM,MAAM,GAAGc,MAAM,CAACC,IAAI,CAACN,KAAK,CAAC;EAE/B,KAAKR,CAAC,GAAG,CAAC,EAAEU,EAAE,GAAGX,MAAM,CAACO,MAAM,EAAEN,CAAC,GAAGU,EAAE,EAAE,EAAEV,CAAC,EAAE;IACzC;IACA,IAAIA,CAAC,GAAGU,EAAE,GAAG,CAAC,IAAIZ,YAAY,CAACC,MAAM,EAAEC,CAAC,CAAC,EAAE;MACvCY,OAAO,IAAIjB,OAAO,GAAGoB,MAAM,CAACC,YAAY,CAACjB,MAAM,CAAC,EAAEC,CAAC,CAAC,EAAED,MAAM,CAAC,EAAEC,CAAC,CAAC,CAAC;MAClE;IACJ;IAEAW,QAAQ,GAAGZ,MAAM,CAACC,CAAC,CAAC;IAEpBY,OAAO,IAAIH,SAAS,CAACQ,GAAG,CAACN,QAAQ,CAAC;IAC9B;IACAV,cAAc,CAACU,QAAQ,CAAC;IACxB;IACAI,MAAM,CAACC,YAAY,CAACL,QAAQ,CAAC;EACrC;EAEA,OAAOC,OAAO;AAClB;AAEAM,MAAM,CAACC,OAAO,GAAG;EACbZ,MAAM;EACNN;AACJ,CAAC"},"metadata":{},"sourceType":"script"}