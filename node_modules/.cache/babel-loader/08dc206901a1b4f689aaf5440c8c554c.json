{"ast":null,"code":"/**\n * This is a cross-platform event emitter with bridge interface.\n * It uses Flatted as dependency where code is modified slightly to allow loading as a string\n */\n\n/**\n * Hold reference to this for security purpose\n *\n * @private\n */\nconst toString = String.prototype.toString;\n\n/**\n * Generate code to be executed inside a VM for bootstrap.\n *\n * @param {String|Buffer} bootCode\n * @return {String}\n */\n/* eslint-disable max-len */\nmodule.exports = function (bootCode) {\n  return `;\n(function (emit) {\n    /*! (c) 2020 Andrea Giammarchi, (ISC) */\n    var Flatted=function(n){\"use strict\";var t=JSON.parse,r=JSON.stringify,e=Object.keys,a=String,u=\"string\",f={},i=\"object\",c=function(n,t){return t},l=function(n){return n instanceof a?a(n):n},o=function(n,t){return typeof t===u?new a(t):t},s=function(n,t,r){var e=a(t.push(r)-1);return n.set(r,e),e};return n.parse=function(n,r){var u=t(n,o).map(l),s=u[0],p=r||c,v=typeof s===i&&s?function n(t,r,u,c){for(var l=[],o=e(u),s=o.length,p=0;p<s;p++){var v=o[p],y=u[v];if(y instanceof a){var g=t[y];typeof g!==i||r.has(g)?u[v]=c.call(u,v,g):(r.add(g),u[v]=f,l.push({k:v,a:[t,r,g,c]}))}else u[v]!==f&&(u[v]=c.call(u,v,y))}for(var h=l.length,d=0;d<h;d++){var w=l[d],O=w.k,S=w.a;u[O]=c.call(u,O,n.apply(null,S))}return u}(u,new Set,s,p):s;return p.call({\"\":v},\"\",v)},n.stringify=function(n,t,e){for(var a=t&&typeof t===i?function(n,r){return\"\"===n||-1<t.indexOf(n)?r:void 0}:t||c,f=new Map,l=[],o=[],p=+s(f,l,a.call({\"\":n},\"\",n)),v=!p;p<l.length;)v=!0,o[p]=r(l[p++],y,e);return\"[\"+o.join(\",\")+\"]\";function y(n,t){if(v)return v=!v,t;var r=a.call(this,n,t);switch(typeof r){case i:if(null===r)return r;case u:return f.get(r)||s(f,l,r)}return r}},n}({});\n\n    /*! (C) Postdot Technologies, Inc (Apache-2.0) */\n    var arrayProtoSlice = Array.prototype.slice;\n\n    bridge = { // ensure global using no var\n        _events: {},\n        emit: function (name) {\n            var self = this,\n                args = arrayProtoSlice.call(arguments, 1);\n            this._events[name] && this._events[name].forEach(function (listener) {\n                listener.apply(self, args);\n            });\n        },\n\n        dispatch: function () {\n            emit(Flatted.stringify(arrayProtoSlice.call(arguments)));\n        },\n\n        on: function (name, listener) {\n            if (typeof listener !== 'function') { return; }\n            !this._events[name] && (this._events[name] = []);\n            this._events[name].push(listener);\n        },\n\n        off: function (name, listener) {\n            var e = this._events[name],\n                i = e && e.length || 0;\n\n            if (!e) { return; }\n            if (arguments.length === 1) {\n                return delete this._events[name];\n            }\n\n            if (typeof listener === 'function' && (i >= 1)) {\n                while (i >= 0) {\n                    (e[i] === listener) && e.splice(i, 1);\n                    i -= 1;\n                }\n            }\n            if (!e.length) { delete this._events[name]; }\n        }\n    };\n\n    // create the dispatch function inside a closure to ensure that actual function references are never modified\n    __uvm_dispatch = (function (bridge, bridgeEmit) { // ensure global by not using var statement\n        return function (args) {\n            bridgeEmit.apply(bridge, Flatted.parse(args));\n        };\n    }(bridge, bridge.emit));\n\n}(__uvm_emit));\n\n// boot code starts hereafter\n${typeof bootCode === 'string' ? toString.call(bootCode) : ''};`;\n};","map":{"version":3,"names":["toString","String","prototype","module","exports","bootCode","call"],"sources":["/Users/Qusai.Qishta/node_modules/uvm/lib/bridge-client.js"],"sourcesContent":["/**\n * This is a cross-platform event emitter with bridge interface.\n * It uses Flatted as dependency where code is modified slightly to allow loading as a string\n */\n\n/**\n * Hold reference to this for security purpose\n *\n * @private\n */\nconst toString = String.prototype.toString;\n\n/**\n * Generate code to be executed inside a VM for bootstrap.\n *\n * @param {String|Buffer} bootCode\n * @return {String}\n */\n/* eslint-disable max-len */\nmodule.exports = function (bootCode) {\n    return `;\n(function (emit) {\n    /*! (c) 2020 Andrea Giammarchi, (ISC) */\n    var Flatted=function(n){\"use strict\";var t=JSON.parse,r=JSON.stringify,e=Object.keys,a=String,u=\"string\",f={},i=\"object\",c=function(n,t){return t},l=function(n){return n instanceof a?a(n):n},o=function(n,t){return typeof t===u?new a(t):t},s=function(n,t,r){var e=a(t.push(r)-1);return n.set(r,e),e};return n.parse=function(n,r){var u=t(n,o).map(l),s=u[0],p=r||c,v=typeof s===i&&s?function n(t,r,u,c){for(var l=[],o=e(u),s=o.length,p=0;p<s;p++){var v=o[p],y=u[v];if(y instanceof a){var g=t[y];typeof g!==i||r.has(g)?u[v]=c.call(u,v,g):(r.add(g),u[v]=f,l.push({k:v,a:[t,r,g,c]}))}else u[v]!==f&&(u[v]=c.call(u,v,y))}for(var h=l.length,d=0;d<h;d++){var w=l[d],O=w.k,S=w.a;u[O]=c.call(u,O,n.apply(null,S))}return u}(u,new Set,s,p):s;return p.call({\"\":v},\"\",v)},n.stringify=function(n,t,e){for(var a=t&&typeof t===i?function(n,r){return\"\"===n||-1<t.indexOf(n)?r:void 0}:t||c,f=new Map,l=[],o=[],p=+s(f,l,a.call({\"\":n},\"\",n)),v=!p;p<l.length;)v=!0,o[p]=r(l[p++],y,e);return\"[\"+o.join(\",\")+\"]\";function y(n,t){if(v)return v=!v,t;var r=a.call(this,n,t);switch(typeof r){case i:if(null===r)return r;case u:return f.get(r)||s(f,l,r)}return r}},n}({});\n\n    /*! (C) Postdot Technologies, Inc (Apache-2.0) */\n    var arrayProtoSlice = Array.prototype.slice;\n\n    bridge = { // ensure global using no var\n        _events: {},\n        emit: function (name) {\n            var self = this,\n                args = arrayProtoSlice.call(arguments, 1);\n            this._events[name] && this._events[name].forEach(function (listener) {\n                listener.apply(self, args);\n            });\n        },\n\n        dispatch: function () {\n            emit(Flatted.stringify(arrayProtoSlice.call(arguments)));\n        },\n\n        on: function (name, listener) {\n            if (typeof listener !== 'function') { return; }\n            !this._events[name] && (this._events[name] = []);\n            this._events[name].push(listener);\n        },\n\n        off: function (name, listener) {\n            var e = this._events[name],\n                i = e && e.length || 0;\n\n            if (!e) { return; }\n            if (arguments.length === 1) {\n                return delete this._events[name];\n            }\n\n            if (typeof listener === 'function' && (i >= 1)) {\n                while (i >= 0) {\n                    (e[i] === listener) && e.splice(i, 1);\n                    i -= 1;\n                }\n            }\n            if (!e.length) { delete this._events[name]; }\n        }\n    };\n\n    // create the dispatch function inside a closure to ensure that actual function references are never modified\n    __uvm_dispatch = (function (bridge, bridgeEmit) { // ensure global by not using var statement\n        return function (args) {\n            bridgeEmit.apply(bridge, Flatted.parse(args));\n        };\n    }(bridge, bridge.emit));\n\n}(__uvm_emit));\n\n// boot code starts hereafter\n${(typeof bootCode === 'string') ? toString.call(bootCode) : ''};`;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAGC,MAAM,CAACC,SAAS,CAACF,QAAQ;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,MAAM,CAACC,OAAO,GAAG,UAAUC,QAAQ,EAAE;EACjC,OAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAG,OAAOA,QAAQ,KAAK,QAAQ,GAAIL,QAAQ,CAACM,IAAI,CAACD,QAAQ,CAAC,GAAG,EAAG,GAAE;AAClE,CAAC"},"metadata":{},"sourceType":"script"}