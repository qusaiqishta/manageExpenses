{"ast":null,"code":"var _ = require('lodash'),\n  sdk = require('postman-collection'),\n  colors = require('colors/safe'),\n  Table = require('cli-table3'),\n  format = require('util').format,\n  util = require('../../util'),\n  cliUtils = require('./cli-utils'),\n  print = require('../../print'),\n  pad = cliUtils.padLeft,\n  LF = '\\n',\n  SPC = ' ',\n  DOT = '.',\n  E = '',\n  CACHED_TIMING_PHASE = '(cache)',\n  TIMING_TABLE_HEADERS = {\n    prepare: 'prepare',\n    wait: 'wait',\n    dns: 'dns-lookup',\n    tcp: 'tcp-handshake',\n    secureHandshake: 'ssl-handshake',\n    firstByte: 'transfer-start',\n    download: 'download',\n    process: 'process',\n    total: 'total'\n  },\n  BODY_CLIP_SIZE = 2048,\n  PostmanCLIReporter,\n  timestamp,\n  extractSNR;\n\n// sets theme for colors for console logging\ncolors.setTheme({\n  log: 'grey',\n  info: 'cyan',\n  warn: 'yellow',\n  debug: 'blue',\n  error: 'red'\n});\nextractSNR = function (executions) {\n  var snr;\n\n  // eslint-disable-next-line lodash/collection-method-value\n  _.isArray(executions) && _.forEachRight(executions, function (execution) {\n    var nextReq = _.get(execution, 'result.return.nextRequest');\n    if (nextReq) {\n      snr = nextReq;\n      return false;\n    }\n  });\n  return snr;\n};\n\n/**\n * CLI reporter\n *\n * @param {EventEmitter} emitter - An EventEmitter instance with event handler attachers to trigger reporting.\n * @param {Object} reporterOptions - CLI reporter options object.\n * @param {Boolean=} reporterOptions.silent - Boolean flag to turn off CLI reporting altogether, if set to true.\n * @param {Boolean=} reporterOptions.noAssertions - Boolean flag to turn off assertion reporting, if set to true.\n * @param {Boolean=} reporterOptions.noSuccessAssertions - Boolean flag, if true, turn off report successful assertions.\n * @param {Boolean=} reporterOptions.noSummary - Boolean flag to turn off summary reporting altogether, if set to true.\n * @param {Boolean=} reporterOptions.noFailures - Boolean flag to turn off failure reporting altogether, if set to true.\n * @param {Boolean=} reporterOptions.noConsole - Boolean flag to turn off console logging, if set to true.\n * @param {Boolean=} reporterOptions.noBanner - Boolean flag to turn off newman banner, if set to true.\n * @param {Object} options - A set of generic collection run options.\n * @returns {*}\n */\nPostmanCLIReporter = function (emitter, reporterOptions, options) {\n  var currentGroup = options.collection,\n    inspect = cliUtils.inspector(options),\n    wrap = cliUtils.wrapper(),\n    symbols = cliUtils.symbols(options.disableUnicode);\n\n  // respect silent option to not report anything\n  if (reporterOptions.silent || options.silent) {\n    return; // we simply do not register anything!\n  }\n\n  // disable colors based on `noTTY`.\n  cliUtils.noTTY(options.color) && colors.disable();\n\n  // we register the `done` listener first so that in case user does not want to show results of collection run, we\n  // simply do not register the other events\n  emitter.on('done', function () {\n    // for some reason, if there is no run summary, it is unexpected and hence don't validate this\n    var run = this.summary.run;\n\n    // show the summary table (provided option does not say it is not to be shown)\n    if (!reporterOptions.noSummary) {\n      print(LF + PostmanCLIReporter.parseStatistics(run.stats, run.timings, run.transfers, options) + LF);\n    }\n\n    // show the failures table (provided option does not say it is not to be shown)\n    if (!reporterOptions.noFailures && run.failures && run.failures.length) {\n      print(LF + PostmanCLIReporter.parseFailures(run.failures) + LF);\n    }\n  });\n  emitter.on('start', function () {\n    var collectionIdentifier = currentGroup && (currentGroup.name || currentGroup.id);\n    if (!reporterOptions.noBanner) {\n      // print the newman banner\n      print('%s\\n\\n', colors.reset('newman'));\n    }\n\n    // print the collection name and newman info line\n    collectionIdentifier && print.lf('%s', colors.reset(collectionIdentifier));\n  });\n  emitter.on('beforeIteration', function (err, o) {\n    if (err || o.cursor.cycles <= 1) {\n      return; // do not print iteration banner if it is a single iteration run\n    }\n\n    // print the iteration info line\n    print.lf(LF + colors.gray.underline('Iteration %d/%d'), o.cursor.iteration + 1, o.cursor.cycles);\n  });\n  emitter.on('test', function (err, o) {\n    if (err) {\n      return;\n    }\n    var snr = extractSNR(o.executions);\n    if (snr) {\n      print.lf(LF + colors.gray('Attempting to set next request to', snr));\n    }\n  });\n  emitter.on('beforeItem', function (err, o) {\n    if (err) {\n      return;\n    }\n    var itemGroup = o.item.parent(),\n      root = !itemGroup || itemGroup === options.collection;\n\n    // in case this item belongs to a separate folder, print that folder name\n    if (itemGroup && currentGroup !== itemGroup) {\n      !root && print('\\n%s %s', symbols.folder, colors.reset(util.getFullName(itemGroup)));\n\n      // set the flag that keeps track of the currently running group\n      currentGroup = itemGroup;\n    }\n\n    // we print the item name. the symbol prefix denotes if the item is in root or under folder.\n    // @todo - when we do indentation, we would not need symbolic representation\n    o.item && print.lf('\\n%s %s', root ? symbols.root : symbols.sub, colors.reset(o.item.name || E));\n  });\n\n  // print out the request name to be executed and start a spinner\n  emitter.on('beforeRequest', function (err, o) {\n    if (err || !o.request) {\n      return;\n    }\n    if (reporterOptions.showTimestamps) {\n      var currentTime = new Date();\n      timestamp = '[' + currentTime.toLocaleString() + ']';\n      print('  %s  %s %s ', colors.gray(timestamp), colors.gray(o.request.method), colors.gray(o.request.url.toString()));\n    } else {\n      print('  %s %s ', colors.gray(o.request.method), colors.gray(o.request.url.toString()));\n    }\n    !options.disableUnicode && print().wait(colors.gray);\n  });\n\n  // output the response code, reason and time\n  emitter.on('request', function (err, o) {\n    if (err) {\n      print.lf(colors.red('[errored]'));\n      print.lf(colors.red('     %s'), err.message);\n      return;\n    }\n    if (!(o.request && o.response)) {\n      print.lf(colors.red('[errored]'));\n      print.lf(colors.red('     %s'), 'Internal error! Could not read response data.');\n      return;\n    }\n\n    // quickly print out basic non verbose response meta and exit\n    if (!options.verbose) {\n      print.lf(colors.gray('[%d %s, %s, %s]'), o.response.code, o.response.reason(), util.filesize(o.response.size().total), util.prettyms(o.response.responseTime));\n      return;\n    }\n\n    // this point onwards the output is verbose. a tonne of variables are created here for\n    // keeping the output clean and readable\n\n    let req = o.request,\n      res = o.response,\n      // set values here with abundance of caution to avoid erroring out\n      reqSize = util.filesize(req.size().total),\n      resSize = util.filesize(res.size().total),\n      code = res.code,\n      reason = res.reason(),\n      mime = res.contentInfo() || {},\n      timings = _.last(_.get(o, 'history.execution.data')),\n      reqHeadersLen = _.get(req, 'headers.members.length'),\n      resHeadersLen = _.get(res, 'headers.members.length'),\n      resTime = util.prettyms(res.responseTime || 0),\n      reqText = options.verbose && req.body ? req.body.toString() : E,\n      reqTextLen = req.size().body || Buffer.byteLength(reqText),\n      resText = options.verbose ? res.text() : E,\n      resTextLen = res.size().body || Buffer.byteLength(resText),\n      reqBodyMode = _.get(req, 'body.mode', ''),\n      resSummary = [`${mime.contentType}`, `${mime.mimeType}`, `${mime.mimeFormat}`, `${mime.charset}`].join(` ${colors.gray(symbols.star)} `);\n    print.lf(SPC); // also flushes out the circling progress icon\n\n    // for clean readability of code. this section compiles the cli string for one line of\n    // req-res combined summary. this looks somewhat like below:\n    // >> 200 OK ★ 979ms time ★ 270B↑ 793B↓ size ★ 7↑ 7↓ headers ★ 0 cookies\n    print.lf(SPC + SPC + [`${code} ${reason}`, `${resTime} ${colors.gray('time')}`, `${reqSize}${colors.gray(symbols.up)} ${resSize}${colors.gray(symbols.down)} ${colors.gray('size')}`, `${reqHeadersLen}${colors.gray(symbols.up)} ` + `${resHeadersLen}${colors.gray(symbols.down)} ${colors.gray('headers')}`, `${_.get(res, 'cookies.members.length')} ${colors.gray('cookies')}`].join(` ${colors.gray(symbols.star)} `));\n\n    // print request body\n    if (reqTextLen) {\n      // truncate very large request (is 2048 large enough?)\n      if (reqTextLen > BODY_CLIP_SIZE) {\n        reqText = reqText.substr(0, BODY_CLIP_SIZE) + colors.brightWhite(`\\n(showing ${util.filesize(BODY_CLIP_SIZE)}/${util.filesize(reqTextLen)})`);\n      }\n      reqText = wrap(reqText, `  ${colors.white(symbols.console.middle)} `);\n      // eslint-disable-next-line max-len\n      print.buffer(`  ${colors.white(symbols.console.top)} ${colors.white(symbols.up)} ${reqBodyMode} ${colors.gray(symbols.star)} ${util.filesize(reqTextLen)}\\n`, colors.white(`  ${symbols.console.bottom}`))\n      // tweak the message to ensure that its surrounding is not brightly coloured.\n      // also ensure to remove any blank lines generated due to util.inspect\n      .nobuffer(colors.gray(reqText.replace(/\\n\\s*\\n/g, LF) + LF));\n      print.lf(SPC); // visual tweak: flushes out the buffer of wrapping body above\n    }\n\n    // print response body\n    if (resTextLen) {\n      // truncate very large response (is 2048 large enough?)\n      if (resTextLen > BODY_CLIP_SIZE) {\n        resText = resText.substr(0, BODY_CLIP_SIZE) + colors.brightWhite(`\\n(showing ${util.filesize(BODY_CLIP_SIZE)}/${util.filesize(resTextLen)})`);\n      }\n      resText = wrap(resText, `  ${colors.white(symbols.console.middle)} `);\n      // eslint-disable-next-line max-len\n      print.buffer(`  ${colors.white(symbols.console.top)} ${colors.white(symbols.down)} ${resSummary} ${colors.gray(symbols.star)} ${util.filesize(resTextLen)}\\n`, colors.white(`  ${symbols.console.bottom}`))\n      // tweak the message to ensure that its surrounding is not brightly coloured.\n      // also ensure to remove any blank lines generated due to util.inspect\n      .nobuffer(colors.gray(resText.replace(/\\n\\s*\\n/g, LF) + LF));\n    }\n    // print the line of response body meta one liner if there is no response body\n    // if there is one, we would already print it across the body braces above.\n    else {\n      // we need to do some newline related shenanigans here so that the output looks clean\n      // in the absence of the request body block\n      print.lf(`  ${symbols.down} ${resSummary}`);\n    }\n\n    // print timing info of the request\n    timings = timings && timings.timings; // if there are redirects, get timings for the last request sent\n    if (timings) {\n      // adds nice units to all time data in the object\n      let timingPhases = util.beautifyTime(sdk.Response.timingPhases(timings)),\n        timingTable = new Table({\n          chars: _.defaults({\n            mid: '',\n            middle: ''\n          }, cliUtils.cliTableTemplate_Blank),\n          colAligns: _.fill(Array(_.size(timingPhases)), 'left'),\n          style: {\n            'padding-left': 2\n          }\n        });\n      timingPhases = _.transform(TIMING_TABLE_HEADERS, (result, header, key) => {\n        if (_.has(timingPhases, key)) {\n          result.headers.push(colors.white(header));\n          result.values.push(colors.log(timingPhases[key] || CACHED_TIMING_PHASE));\n        }\n      }, {\n        headers: [],\n        values: []\n      });\n      timingTable.push(timingPhases.headers); // add name of phases in the table\n      timingTable.push(timingPhases.values); // add time of phases in the table\n\n      print(LF + timingTable + LF + LF);\n    }\n  });\n\n  // Print script errors in real time\n  emitter.on('script', function (err, o) {\n    err && print.lf(colors.red.bold('%s⠄ %s in %s-script'), pad(this.summary.run.failures.length, 3, SPC), err.name, o.event && o.event.listen || 'unknown');\n  });\n  !reporterOptions.noAssertions && emitter.on('assertion', function (err, o) {\n    var passed = !err;\n\n    // handle skipped test display\n    if (o.skipped && !reporterOptions.noSuccessAssertions) {\n      print.lf('%s %s', colors.cyan('  - '), colors.cyan('[skipped] ' + o.assertion));\n      return;\n    }\n    if (passed && reporterOptions.noSuccessAssertions) {\n      return;\n    }\n\n    // print each test assertions\n    if (reporterOptions.showTimestamps) {\n      timestamp = '[' + new Date().toLocaleTimeString() + ']';\n      print.lf('  %s%s %s', colors.gray(timestamp), passed ? colors.green(`  ${symbols.ok} `) : colors.red.bold(pad(this.summary.run.failures.length, 2, SPC) + symbols.dot), passed ? colors.gray(o.assertion) : colors.red.bold(o.assertion));\n    } else {\n      print.lf('%s %s', passed ? colors.green(`  ${symbols.ok} `) : colors.red.bold(pad(this.summary.run.failures.length, 3, SPC) + symbols.dot), passed ? colors.gray(o.assertion) : colors.red.bold(o.assertion));\n    }\n  });\n\n  // show user console logs in a neatly formatted way (provided user has not disabled the same)\n  !reporterOptions.noConsole && emitter.on('console', function (err, o) {\n    if (err) {\n      return;\n    }\n    var color = colors[o.level] || colors.gray,\n      message;\n\n    // we first merge all messages to a string. while merging we run the values to util.inspect to colour code the\n    // messages based on data type\n    message = wrap(_.reduce(o.messages, function (log, message) {\n      // wrap the whole message to the window size\n      return log += (log ? colors.white(', ') : '') + inspect(message);\n    }, E), `  ${color(symbols.console.middle)} `); // add an indentation line at the beginning\n\n    // print the timestamp if the falg is present\n    if (reporterOptions.showTimestamps) {\n      print(LF + '  %s', colors.gray('[' + new Date().toLocaleTimeString() + ']' + LF));\n    }\n    print.buffer(color(`  ${symbols.console.top}\\n`), color(`  ${symbols.console.bottom}\\n`))\n    // tweak the message to ensure that its surrounding is not brightly coloured.\n    // also ensure to remove any blank lines generated due to util.inspect\n    .nobuffer(colors.gray(message.replace(/\\n\\s*\\n/g, LF) + LF));\n  });\n};\n_.assignIn(PostmanCLIReporter, {\n  // @todo: change function signature to accept run object and options, thereby reducing parameters\n  /**\n   * A CLI reporter method to parse collection run statistics into a CLI table.\n   *\n   * @param {Object} stats - The cumulative collection run status object.\n   * @param {Object} stats.iterations - A set of values for total, pending, and failed iterations.\n   * @param {Number} stats.iterations.total - Total iterations in the current collection run.\n   * @param {Number} stats.iterations.pending - Pending iterations in the current collection run.\n   * @param {Number} stats.iterations.failed - Failed iterations in the current collection run.\n   * @param {Object} stats.requests - A set of values for total, pending, and failed requests.\n   * @param {Number} stats.requests.total - Total requests in the current collection run.\n   * @param {Number} stats.requests.pending - Pending requests in the current collection run.\n   * @param {Number} stats.requests.failed - Failed requests in the current collection run.\n   * @param {Object} stats.testScripts - A set of values for total, pending, and failed testScripts.\n   * @param {Number} stats.testScripts.total - Total testScripts in the current collection run.\n   * @param {Number} stats.testScripts.pending - Pending testScripts in the current collection run.\n   * @param {Number} stats.testScripts.failed - Failed testScripts in the current collection run.\n   * @param {Object} stats.prerequestScripts - A set of values for total, pending, and failed prerequestScripts.\n   * @param {Number} stats.prerequestScripts.total - Total prerequestScripts in the current collection run.\n   * @param {Number} stats.prerequestScripts.pending - Pending prerequestScripts in the current collection run.\n   * @param {Number} stats.prerequestScripts.failed - Failed prerequestScripts in the current collection run.\n   * @param {Object} stats.assertions - A set of values for total, pending, and failed assertions.\n   * @param {Number} stats.assertions.total - Total assertions in the current collection run.\n   * @param {Number} stats.assertions.pending - Pending assertions in the current collection run.\n   * @param {Number} stats.assertions.failed - Failed assertions in the current collection run.\n   * @param {Object} timings - A set of values for the timings of the current collection run.\n   * @param {Number} timings.completed - The end timestamp for the current collection run.\n   * @param {Number} timings.started - The start timestamp for the current collection run\n   * @param {String} timings.responseAverage - The average response time across all requests\n   * @param {String} timings.responseMin - The minimum response time across all requests\n   * @param {String} timings.responseMax - The maximum response time across all requests\n   * @param {String} timings.responseSd - Standard deviation of response time across all requests\n   * @param {String} timings.dnsAverage - The average DNS lookup time of the run\n   * @param {String} timings.dnsMin - The minimum DNS lookup time of the run\n   * @param {String} timings.dnsMax - The maximum DNS lookup time of the run\n   * @param {String} timings.dnsSd - Standard deviation of DNS lookup time of the run\n   * @param {String} timings.firstByteAverage - The average first byte time of the run\n   * @param {String} timings.firstByteMin - The minimum first byte time of the run\n   * @param {String} timings.firstByteMax - The maximum first byte time of the run\n   * @param {String} timings.firstByteSd - Standard deviation of first byte time of the run\n   * @param {Object} transfers - A set of details on the network usage for the current collection run.\n   * @param {String} transfers.responseTotal - The net extent of the data transfer achieved during the collection run.\n   * @param {Object} options - The set of generic collection run options.\n   * @returns {Table} - The constructed collection run statistics table.\n   */\n  parseStatistics(stats, timings, transfers, options) {\n    var summaryTable;\n\n    // create the summary table\n    summaryTable = new Table({\n      chars: options.disableUnicode && cliUtils.cliTableTemplateFallback,\n      style: {\n        head: []\n      },\n      head: [E, 'executed', '  failed'],\n      colAligns: ['right', 'right', 'right'],\n      colWidths: [25]\n    });\n\n    // add specific rows to show in summary\n    stats && _.forEach([{\n      source: 'iterations',\n      label: 'iterations'\n    }, {\n      source: 'requests',\n      label: 'requests'\n    }, {\n      source: 'testScripts',\n      label: 'test-scripts'\n    }, {\n      source: 'prerequestScripts',\n      label: 'prerequest-scripts'\n    }, {\n      source: 'assertions',\n      label: 'assertions'\n    }], function (row) {\n      var metric = stats[row.source],\n        label = row.label;\n\n      // colour the label based on the failure or pending count of the metric\n      label = metric.failed ? colors.red(label) : metric.pending ? label : colors.green(label);\n\n      // push the statistics\n      summaryTable.push([label, metric.total, metric.failed ? colors.red(metric.failed) : metric.failed\n      // @todo - add information of pending scripts\n      // (metric.failed ? colors.red(metric.failed) : metric.failed) +\n      //     (metric.pending ? format(' (%d pending)', metric.pending) : E)\n      ]);\n    });\n\n    // add the total execution time to summary\n    timings && summaryTable.push([{\n      colSpan: 3,\n      content: format('total run duration: %s', util.prettyms(timings.completed - timings.started)),\n      hAlign: 'left' // since main style was set to right\n    }]);\n\n    // add row to show total data received\n    transfers && summaryTable.push([{\n      colSpan: 3,\n      content: format('total data received: %s (approx)', util.filesize(transfers.responseTotal)),\n      hAlign: 'left'\n    }]);\n\n    // add rows containing average time of different request phases\n    timings && _.forEach({\n      response: 'average response time:',\n      dns: 'average DNS lookup time:',\n      firstByte: 'average first byte time:'\n    }, (value, key) => {\n      timings[`${key}Average`] && summaryTable.push([{\n        colSpan: 3,\n        content: format(`${value} %s [min: %s, max: %s, s.d.: %s]`, util.prettyms(timings[`${key}Average`]), util.prettyms(timings[`${key}Min`]), util.prettyms(timings[`${key}Max`]), util.prettyms(timings[`${key}Sd`])),\n        hAlign: 'left'\n      }]);\n    });\n    return summaryTable;\n  },\n  /**\n   * A CLI reporter method to parse collection run failure statistics into a CLI table.\n   *\n   * @param  {Array} failures - An array of failure objects.\n   * @returns {Table} - The constructed CLI failure Table object.\n   */\n  parseFailures(failures) {\n    var failureTable = new Table({\n      head: [{\n        hAlign: 'right',\n        content: colors.red.underline('#')\n      }, colors.red.underline('failure'), colors.red.underline('detail')],\n      chars: cliUtils.cliTableTemplate_Blank,\n      wordWrap: true,\n      colAligns: ['right'],\n      colWidths: cliUtils.noTTY() ? [] : function (size, indexOrder) {\n        var colWidths = [];\n        if (size.exists && size.width && size.width > 20) {\n          colWidths[0] = indexOrder + 3;\n          colWidths[1] = parseInt((size.width - colWidths[0]) * 0.2, 10);\n          colWidths[2] = parseInt(size.width - (colWidths[0] + colWidths[1] + 5), 10);\n        }\n        return colWidths;\n      }(cliUtils.dimension(), Number(failures.length.toString().length))\n    });\n    _.forEach(failures, function (failure, index) {\n      var name = failure.error && failure.error.name || E,\n        message = failure.error && failure.error.test || E;\n\n      // augment name with iteration information\n      failure.cursor && failure.cursor.cycles > 1 && (name += LF + colors.gray('iteration: ' + (failure.cursor.iteration + 1)));\n\n      // include the assertion error message in the failure details\n      failure.error && (message += LF + colors.gray(failure.error.message || E));\n\n      // augment the message with stack information\n      failure.at && (message += LF + colors.gray('at ' + failure.at));\n\n      // augment message with item information\n      failure.source && (message += format(colors.gray('\\ninside \"%s\"'), util.getFullName(failure.source)));\n      failureTable.push([pad(Number(index + 1), Number(failures.length.toString().length)).toString() + DOT, name, message]);\n    });\n    return failureTable;\n  }\n});\n\n// Mark the CLI reporter as dominant, so that no two dominant reporters are together\nPostmanCLIReporter.prototype.dominant = true;\nmodule.exports = PostmanCLIReporter;","map":{"version":3,"names":["_","require","sdk","colors","Table","format","util","cliUtils","print","pad","padLeft","LF","SPC","DOT","E","CACHED_TIMING_PHASE","TIMING_TABLE_HEADERS","prepare","wait","dns","tcp","secureHandshake","firstByte","download","process","total","BODY_CLIP_SIZE","PostmanCLIReporter","timestamp","extractSNR","setTheme","log","info","warn","debug","error","executions","snr","isArray","forEachRight","execution","nextReq","get","emitter","reporterOptions","options","currentGroup","collection","inspect","inspector","wrap","wrapper","symbols","disableUnicode","silent","noTTY","color","disable","on","run","summary","noSummary","parseStatistics","stats","timings","transfers","noFailures","failures","length","parseFailures","collectionIdentifier","name","id","noBanner","reset","lf","err","o","cursor","cycles","gray","underline","iteration","itemGroup","item","parent","root","folder","getFullName","sub","request","showTimestamps","currentTime","Date","toLocaleString","method","url","toString","red","message","response","verbose","code","reason","filesize","size","prettyms","responseTime","req","res","reqSize","resSize","mime","contentInfo","last","reqHeadersLen","resHeadersLen","resTime","reqText","body","reqTextLen","Buffer","byteLength","resText","text","resTextLen","reqBodyMode","resSummary","contentType","mimeType","mimeFormat","charset","join","star","up","down","substr","brightWhite","white","console","middle","buffer","top","bottom","nobuffer","replace","timingPhases","beautifyTime","Response","timingTable","chars","defaults","mid","cliTableTemplate_Blank","colAligns","fill","Array","style","transform","result","header","key","has","headers","push","values","bold","event","listen","noAssertions","passed","skipped","noSuccessAssertions","cyan","assertion","toLocaleTimeString","green","ok","dot","noConsole","level","reduce","messages","assignIn","summaryTable","cliTableTemplateFallback","head","colWidths","forEach","source","label","row","metric","failed","pending","colSpan","content","completed","started","hAlign","responseTotal","value","failureTable","wordWrap","indexOrder","exists","width","parseInt","dimension","Number","failure","index","test","at","prototype","dominant","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/newman/lib/reporters/cli/index.js"],"sourcesContent":["var _ = require('lodash'),\n    sdk = require('postman-collection'),\n    colors = require('colors/safe'),\n    Table = require('cli-table3'),\n    format = require('util').format,\n\n    util = require('../../util'),\n    cliUtils = require('./cli-utils'),\n    print = require('../../print'),\n    pad = cliUtils.padLeft,\n\n    LF = '\\n',\n    SPC = ' ',\n    DOT = '.',\n    E = '',\n\n    CACHED_TIMING_PHASE = '(cache)',\n    TIMING_TABLE_HEADERS = {\n        prepare: 'prepare',\n        wait: 'wait',\n        dns: 'dns-lookup',\n        tcp: 'tcp-handshake',\n        secureHandshake: 'ssl-handshake',\n        firstByte: 'transfer-start',\n        download: 'download',\n        process: 'process',\n        total: 'total'\n    },\n    BODY_CLIP_SIZE = 2048,\n\n    PostmanCLIReporter,\n    timestamp,\n    extractSNR;\n\n// sets theme for colors for console logging\ncolors.setTheme({\n    log: 'grey',\n    info: 'cyan',\n    warn: 'yellow',\n    debug: 'blue',\n    error: 'red'\n});\n\nextractSNR = function (executions) {\n    var snr;\n\n    // eslint-disable-next-line lodash/collection-method-value\n    _.isArray(executions) && _.forEachRight(executions, function (execution) {\n        var nextReq = _.get(execution, 'result.return.nextRequest');\n\n        if (nextReq) {\n            snr = nextReq;\n\n            return false;\n        }\n    });\n\n    return snr;\n};\n\n/**\n * CLI reporter\n *\n * @param {EventEmitter} emitter - An EventEmitter instance with event handler attachers to trigger reporting.\n * @param {Object} reporterOptions - CLI reporter options object.\n * @param {Boolean=} reporterOptions.silent - Boolean flag to turn off CLI reporting altogether, if set to true.\n * @param {Boolean=} reporterOptions.noAssertions - Boolean flag to turn off assertion reporting, if set to true.\n * @param {Boolean=} reporterOptions.noSuccessAssertions - Boolean flag, if true, turn off report successful assertions.\n * @param {Boolean=} reporterOptions.noSummary - Boolean flag to turn off summary reporting altogether, if set to true.\n * @param {Boolean=} reporterOptions.noFailures - Boolean flag to turn off failure reporting altogether, if set to true.\n * @param {Boolean=} reporterOptions.noConsole - Boolean flag to turn off console logging, if set to true.\n * @param {Boolean=} reporterOptions.noBanner - Boolean flag to turn off newman banner, if set to true.\n * @param {Object} options - A set of generic collection run options.\n * @returns {*}\n */\nPostmanCLIReporter = function (emitter, reporterOptions, options) {\n    var currentGroup = options.collection,\n        inspect = cliUtils.inspector(options),\n        wrap = cliUtils.wrapper(),\n        symbols = cliUtils.symbols(options.disableUnicode);\n\n    // respect silent option to not report anything\n    if (reporterOptions.silent || options.silent) {\n        return; // we simply do not register anything!\n    }\n\n    // disable colors based on `noTTY`.\n    cliUtils.noTTY(options.color) && colors.disable();\n\n    // we register the `done` listener first so that in case user does not want to show results of collection run, we\n    // simply do not register the other events\n    emitter.on('done', function () {\n        // for some reason, if there is no run summary, it is unexpected and hence don't validate this\n        var run = this.summary.run;\n\n        // show the summary table (provided option does not say it is not to be shown)\n        if (!reporterOptions.noSummary) {\n            print(LF + PostmanCLIReporter.parseStatistics(run.stats, run.timings, run.transfers, options) + LF);\n        }\n\n        // show the failures table (provided option does not say it is not to be shown)\n        if (!reporterOptions.noFailures && run.failures && run.failures.length) {\n            print(LF + PostmanCLIReporter.parseFailures(run.failures) + LF);\n        }\n    });\n\n    emitter.on('start', function () {\n        var collectionIdentifier = currentGroup && (currentGroup.name || currentGroup.id);\n\n        if (!reporterOptions.noBanner) {\n            // print the newman banner\n            print('%s\\n\\n', colors.reset('newman'));\n        }\n\n        // print the collection name and newman info line\n        collectionIdentifier && print.lf('%s', colors.reset(collectionIdentifier));\n    });\n\n    emitter.on('beforeIteration', function (err, o) {\n        if (err || o.cursor.cycles <= 1) {\n            return; // do not print iteration banner if it is a single iteration run\n        }\n\n        // print the iteration info line\n        print.lf(LF + colors.gray.underline('Iteration %d/%d'), o.cursor.iteration + 1, o.cursor.cycles);\n    });\n\n    emitter.on('test', function (err, o) {\n        if (err) {\n            return;\n        }\n        var snr = extractSNR(o.executions);\n\n        if (snr) {\n            print.lf(LF + colors.gray('Attempting to set next request to', snr));\n        }\n    });\n\n    emitter.on('beforeItem', function (err, o) {\n        if (err) { return; }\n\n        var itemGroup = o.item.parent(),\n            root = !itemGroup || (itemGroup === options.collection);\n\n        // in case this item belongs to a separate folder, print that folder name\n        if (itemGroup && (currentGroup !== itemGroup)) {\n            !root && print('\\n%s %s', symbols.folder, colors.reset(util.getFullName(itemGroup)));\n\n            // set the flag that keeps track of the currently running group\n            currentGroup = itemGroup;\n        }\n\n        // we print the item name. the symbol prefix denotes if the item is in root or under folder.\n        // @todo - when we do indentation, we would not need symbolic representation\n        o.item && print.lf('\\n%s %s', (root ?\n            symbols.root : symbols.sub), colors.reset(o.item.name || E));\n    });\n\n    // print out the request name to be executed and start a spinner\n    emitter.on('beforeRequest', function (err, o) {\n        if (err || !o.request) { return; }\n\n        if (reporterOptions.showTimestamps) {\n            var currentTime = new Date();\n\n            timestamp = '[' + currentTime.toLocaleString() + ']';\n            print('  %s  %s %s ',\n                colors.gray(timestamp),\n                colors.gray(o.request.method),\n                colors.gray(o.request.url.toString()));\n        }\n        else {\n            print('  %s %s ',\n                colors.gray(o.request.method),\n                colors.gray(o.request.url.toString()));\n        }\n\n        !options.disableUnicode && print().wait(colors.gray);\n    });\n\n    // output the response code, reason and time\n    emitter.on('request', function (err, o) {\n        if (err) {\n            print.lf(colors.red('[errored]'));\n            print.lf(colors.red('     %s'), err.message);\n\n            return;\n        }\n\n        if (!(o.request && o.response)) {\n            print.lf(colors.red('[errored]'));\n            print.lf(colors.red('     %s'), 'Internal error! Could not read response data.');\n\n            return;\n        }\n\n        // quickly print out basic non verbose response meta and exit\n        if (!options.verbose) {\n            print.lf(colors.gray('[%d %s, %s, %s]'), o.response.code, o.response.reason(),\n                util.filesize(o.response.size().total), util.prettyms(o.response.responseTime));\n\n            return;\n        }\n\n        // this point onwards the output is verbose. a tonne of variables are created here for\n        // keeping the output clean and readable\n\n        let req = o.request,\n            res = o.response,\n\n            // set values here with abundance of caution to avoid erroring out\n            reqSize = util.filesize(req.size().total),\n            resSize = util.filesize(res.size().total),\n            code = res.code,\n            reason = res.reason(),\n            mime = res.contentInfo() || {},\n            timings = _.last(_.get(o, 'history.execution.data')),\n\n            reqHeadersLen = _.get(req, 'headers.members.length'),\n            resHeadersLen = _.get(res, 'headers.members.length'),\n\n            resTime = util.prettyms(res.responseTime || 0),\n\n            reqText = (options.verbose && req.body) ? req.body.toString() : E,\n            reqTextLen = req.size().body || Buffer.byteLength(reqText),\n\n            resText = options.verbose ? res.text() : E,\n            resTextLen = res.size().body || Buffer.byteLength(resText),\n\n            reqBodyMode = _.get(req, 'body.mode', ''),\n            resSummary = [\n                `${mime.contentType}`,\n                `${mime.mimeType}`,\n                `${mime.mimeFormat}`,\n                `${mime.charset}`\n            ].join(` ${colors.gray(symbols.star)} `);\n\n\n        print.lf(SPC); // also flushes out the circling progress icon\n\n        // for clean readability of code. this section compiles the cli string for one line of\n        // req-res combined summary. this looks somewhat like below:\n        // >> 200 OK ★ 979ms time ★ 270B↑ 793B↓ size ★ 7↑ 7↓ headers ★ 0 cookies\n        print.lf(SPC + SPC + [\n            `${code} ${reason}`,\n            `${resTime} ${colors.gray('time')}`,\n            `${reqSize}${colors.gray(symbols.up)} ${resSize}${colors.gray(symbols.down)} ${colors.gray('size')}`,\n            `${reqHeadersLen}${colors.gray(symbols.up)} ` +\n                `${resHeadersLen}${colors.gray(symbols.down)} ${colors.gray('headers')}`,\n            `${_.get(res, 'cookies.members.length')} ${colors.gray('cookies')}`\n        ].join(` ${colors.gray(symbols.star)} `));\n\n        // print request body\n        if (reqTextLen) {\n            // truncate very large request (is 2048 large enough?)\n            if (reqTextLen > BODY_CLIP_SIZE) {\n                reqText = reqText.substr(0, BODY_CLIP_SIZE) +\n                    colors.brightWhite(`\\n(showing ${util.filesize(BODY_CLIP_SIZE)}/${util.filesize(reqTextLen)})`);\n            }\n\n            reqText = wrap(reqText, `  ${colors.white(symbols.console.middle)} `);\n            // eslint-disable-next-line max-len\n            print.buffer(`  ${colors.white(symbols.console.top)} ${colors.white(symbols.up)} ${reqBodyMode} ${colors.gray(symbols.star)} ${util.filesize(reqTextLen)}\\n`,\n                colors.white(`  ${symbols.console.bottom}`))\n                // tweak the message to ensure that its surrounding is not brightly coloured.\n                // also ensure to remove any blank lines generated due to util.inspect\n                .nobuffer(colors.gray(reqText.replace(/\\n\\s*\\n/g, LF) + LF));\n\n            print.lf(SPC); // visual tweak: flushes out the buffer of wrapping body above\n        }\n\n        // print response body\n        if (resTextLen) {\n            // truncate very large response (is 2048 large enough?)\n            if (resTextLen > BODY_CLIP_SIZE) {\n                resText = resText.substr(0, BODY_CLIP_SIZE) +\n                    colors.brightWhite(`\\n(showing ${util.filesize(BODY_CLIP_SIZE)}/${util.filesize(resTextLen)})`);\n            }\n\n            resText = wrap(resText, `  ${colors.white(symbols.console.middle)} `);\n            // eslint-disable-next-line max-len\n            print.buffer(`  ${colors.white(symbols.console.top)} ${colors.white(symbols.down)} ${resSummary} ${colors.gray(symbols.star)} ${util.filesize(resTextLen)}\\n`,\n                colors.white(`  ${symbols.console.bottom}`))\n                // tweak the message to ensure that its surrounding is not brightly coloured.\n                // also ensure to remove any blank lines generated due to util.inspect\n                .nobuffer(colors.gray(resText.replace(/\\n\\s*\\n/g, LF) + LF));\n        }\n        // print the line of response body meta one liner if there is no response body\n        // if there is one, we would already print it across the body braces above.\n        else {\n            // we need to do some newline related shenanigans here so that the output looks clean\n            // in the absence of the request body block\n            print.lf(`  ${symbols.down} ${resSummary}`);\n        }\n\n        // print timing info of the request\n        timings = timings && timings.timings; // if there are redirects, get timings for the last request sent\n        if (timings) {\n            // adds nice units to all time data in the object\n            let timingPhases = util.beautifyTime(sdk.Response.timingPhases(timings)),\n                timingTable = new Table({\n                    chars: _.defaults({ mid: '', middle: '' }, cliUtils.cliTableTemplate_Blank),\n                    colAligns: _.fill(Array(_.size(timingPhases)), 'left'),\n                    style: { 'padding-left': 2 }\n                });\n\n            timingPhases = _.transform(TIMING_TABLE_HEADERS, (result, header, key) => {\n                if (_.has(timingPhases, key)) {\n                    result.headers.push(colors.white(header));\n                    result.values.push(colors.log(timingPhases[key] || CACHED_TIMING_PHASE));\n                }\n            }, { headers: [], values: [] });\n\n\n            timingTable.push(timingPhases.headers); // add name of phases in the table\n            timingTable.push(timingPhases.values); // add time of phases in the table\n\n            print(LF + timingTable + LF + LF);\n        }\n    });\n\n    // Print script errors in real time\n    emitter.on('script', function (err, o) {\n        err && print.lf(colors.red.bold('%s⠄ %s in %s-script'), pad(this.summary.run.failures.length, 3, SPC), err.name,\n            o.event && o.event.listen || 'unknown');\n    });\n\n    !reporterOptions.noAssertions && emitter.on('assertion', function (err, o) {\n        var passed = !err;\n\n        // handle skipped test display\n        if (o.skipped && !reporterOptions.noSuccessAssertions) {\n            print.lf('%s %s', colors.cyan('  - '), colors.cyan('[skipped] ' + o.assertion));\n\n            return;\n        }\n\n        if (passed && reporterOptions.noSuccessAssertions) {\n            return;\n        }\n\n        // print each test assertions\n        if (reporterOptions.showTimestamps) {\n            timestamp = '[' + new Date().toLocaleTimeString() + ']';\n            print.lf('  %s%s %s', colors.gray(timestamp), passed ? colors.green(`  ${symbols.ok} `) :\n                colors.red.bold(pad(this.summary.run.failures.length, 2, SPC) + symbols.dot), passed ?\n                colors.gray(o.assertion) : colors.red.bold(o.assertion));\n        }\n        else {\n            print.lf('%s %s', passed ? colors.green(`  ${symbols.ok} `) :\n                colors.red.bold(pad(this.summary.run.failures.length, 3, SPC) + symbols.dot), passed ?\n                colors.gray(o.assertion) : colors.red.bold(o.assertion));\n        }\n    });\n\n    // show user console logs in a neatly formatted way (provided user has not disabled the same)\n    !reporterOptions.noConsole && emitter.on('console', function (err, o) {\n        if (err) { return; }\n\n        var color = colors[o.level] || colors.gray,\n            message;\n\n        // we first merge all messages to a string. while merging we run the values to util.inspect to colour code the\n        // messages based on data type\n        message = wrap(_.reduce(o.messages, function (log, message) { // wrap the whole message to the window size\n            return (log += (log ? colors.white(', ') : '') + inspect(message));\n        }, E), `  ${color(symbols.console.middle)} `); // add an indentation line at the beginning\n\n        // print the timestamp if the falg is present\n        if (reporterOptions.showTimestamps) {\n            print(LF + '  %s', colors.gray('[' + new Date().toLocaleTimeString() + ']' + LF));\n        }\n\n        print.buffer(color(`  ${symbols.console.top}\\n`), color(`  ${symbols.console.bottom}\\n`))\n            // tweak the message to ensure that its surrounding is not brightly coloured.\n            // also ensure to remove any blank lines generated due to util.inspect\n            .nobuffer(colors.gray(message.replace(/\\n\\s*\\n/g, LF) + LF));\n    });\n};\n\n_.assignIn(PostmanCLIReporter, {\n\n    // @todo: change function signature to accept run object and options, thereby reducing parameters\n    /**\n     * A CLI reporter method to parse collection run statistics into a CLI table.\n     *\n     * @param {Object} stats - The cumulative collection run status object.\n     * @param {Object} stats.iterations - A set of values for total, pending, and failed iterations.\n     * @param {Number} stats.iterations.total - Total iterations in the current collection run.\n     * @param {Number} stats.iterations.pending - Pending iterations in the current collection run.\n     * @param {Number} stats.iterations.failed - Failed iterations in the current collection run.\n     * @param {Object} stats.requests - A set of values for total, pending, and failed requests.\n     * @param {Number} stats.requests.total - Total requests in the current collection run.\n     * @param {Number} stats.requests.pending - Pending requests in the current collection run.\n     * @param {Number} stats.requests.failed - Failed requests in the current collection run.\n     * @param {Object} stats.testScripts - A set of values for total, pending, and failed testScripts.\n     * @param {Number} stats.testScripts.total - Total testScripts in the current collection run.\n     * @param {Number} stats.testScripts.pending - Pending testScripts in the current collection run.\n     * @param {Number} stats.testScripts.failed - Failed testScripts in the current collection run.\n     * @param {Object} stats.prerequestScripts - A set of values for total, pending, and failed prerequestScripts.\n     * @param {Number} stats.prerequestScripts.total - Total prerequestScripts in the current collection run.\n     * @param {Number} stats.prerequestScripts.pending - Pending prerequestScripts in the current collection run.\n     * @param {Number} stats.prerequestScripts.failed - Failed prerequestScripts in the current collection run.\n     * @param {Object} stats.assertions - A set of values for total, pending, and failed assertions.\n     * @param {Number} stats.assertions.total - Total assertions in the current collection run.\n     * @param {Number} stats.assertions.pending - Pending assertions in the current collection run.\n     * @param {Number} stats.assertions.failed - Failed assertions in the current collection run.\n     * @param {Object} timings - A set of values for the timings of the current collection run.\n     * @param {Number} timings.completed - The end timestamp for the current collection run.\n     * @param {Number} timings.started - The start timestamp for the current collection run\n     * @param {String} timings.responseAverage - The average response time across all requests\n     * @param {String} timings.responseMin - The minimum response time across all requests\n     * @param {String} timings.responseMax - The maximum response time across all requests\n     * @param {String} timings.responseSd - Standard deviation of response time across all requests\n     * @param {String} timings.dnsAverage - The average DNS lookup time of the run\n     * @param {String} timings.dnsMin - The minimum DNS lookup time of the run\n     * @param {String} timings.dnsMax - The maximum DNS lookup time of the run\n     * @param {String} timings.dnsSd - Standard deviation of DNS lookup time of the run\n     * @param {String} timings.firstByteAverage - The average first byte time of the run\n     * @param {String} timings.firstByteMin - The minimum first byte time of the run\n     * @param {String} timings.firstByteMax - The maximum first byte time of the run\n     * @param {String} timings.firstByteSd - Standard deviation of first byte time of the run\n     * @param {Object} transfers - A set of details on the network usage for the current collection run.\n     * @param {String} transfers.responseTotal - The net extent of the data transfer achieved during the collection run.\n     * @param {Object} options - The set of generic collection run options.\n     * @returns {Table} - The constructed collection run statistics table.\n     */\n    parseStatistics (stats, timings, transfers, options) {\n        var summaryTable;\n\n        // create the summary table\n        summaryTable = new Table({\n            chars: options.disableUnicode && cliUtils.cliTableTemplateFallback,\n            style: { head: [] },\n            head: [E, 'executed', '  failed'],\n            colAligns: ['right', 'right', 'right'],\n            colWidths: [25]\n        });\n\n        // add specific rows to show in summary\n        stats && _.forEach([{\n            source: 'iterations',\n            label: 'iterations'\n        }, {\n            source: 'requests',\n            label: 'requests'\n        }, {\n            source: 'testScripts',\n            label: 'test-scripts'\n        }, {\n            source: 'prerequestScripts',\n            label: 'prerequest-scripts'\n        }, {\n            source: 'assertions',\n            label: 'assertions'\n        }], function (row) {\n            var metric = stats[row.source],\n                label = row.label;\n\n            // colour the label based on the failure or pending count of the metric\n            label = metric.failed ? colors.red(label) : (metric.pending ? label : colors.green(label));\n\n            // push the statistics\n            summaryTable.push([\n                label,\n                metric.total,\n                (metric.failed ? colors.red(metric.failed) : metric.failed)\n                // @todo - add information of pending scripts\n                // (metric.failed ? colors.red(metric.failed) : metric.failed) +\n                //     (metric.pending ? format(' (%d pending)', metric.pending) : E)\n            ]);\n        });\n\n        // add the total execution time to summary\n        timings && summaryTable.push([{\n            colSpan: 3,\n            content: format('total run duration: %s', util.prettyms(timings.completed - timings.started)),\n            hAlign: 'left' // since main style was set to right\n        }]);\n\n        // add row to show total data received\n        transfers && summaryTable.push([{\n            colSpan: 3,\n            content: format('total data received: %s (approx)', util.filesize(transfers.responseTotal)),\n            hAlign: 'left'\n        }]);\n\n        // add rows containing average time of different request phases\n        timings && _.forEach({\n            response: 'average response time:',\n            dns: 'average DNS lookup time:',\n            firstByte: 'average first byte time:'\n        }, (value, key) => {\n            timings[`${key}Average`] && summaryTable.push([{\n                colSpan: 3,\n                content: format(`${value} %s [min: %s, max: %s, s.d.: %s]`,\n                    util.prettyms(timings[`${key}Average`]),\n                    util.prettyms(timings[`${key}Min`]),\n                    util.prettyms(timings[`${key}Max`]),\n                    util.prettyms(timings[`${key}Sd`])),\n                hAlign: 'left'\n            }]);\n        });\n\n        return summaryTable;\n    },\n\n    /**\n     * A CLI reporter method to parse collection run failure statistics into a CLI table.\n     *\n     * @param  {Array} failures - An array of failure objects.\n     * @returns {Table} - The constructed CLI failure Table object.\n     */\n    parseFailures (failures) {\n        var failureTable = new Table({\n            head: [{\n                hAlign: 'right',\n                content: colors.red.underline('#')\n            }, colors.red.underline('failure'),\n            colors.red.underline('detail')],\n            chars: cliUtils.cliTableTemplate_Blank,\n            wordWrap: true,\n            colAligns: ['right'],\n            colWidths: cliUtils.noTTY() ? [] : (function (size, indexOrder) {\n                var colWidths = [];\n\n                if (size.exists && size.width && (size.width > 20)) {\n                    colWidths[0] = indexOrder + 3;\n                    colWidths[1] = parseInt((size.width - colWidths[0]) * 0.2, 10);\n                    colWidths[2] = parseInt(size.width - (colWidths[0] + colWidths[1] + 5), 10);\n                }\n\n                return colWidths;\n            }(cliUtils.dimension(), Number(failures.length.toString().length)))\n        });\n\n        _.forEach(failures, function (failure, index) {\n            var name = failure.error && failure.error.name || E,\n                message = failure.error && failure.error.test || E;\n\n            // augment name with iteration information\n            failure.cursor && (failure.cursor.cycles > 1) &&\n                (name += LF + colors.gray('iteration: ' + (failure.cursor.iteration + 1)));\n\n            // include the assertion error message in the failure details\n            failure.error && (message += LF + colors.gray(failure.error.message || E));\n\n            // augment the message with stack information\n            failure.at && (message += LF + colors.gray('at ' + failure.at));\n\n            // augment message with item information\n            failure.source &&\n                (message += format(colors.gray('\\ninside \"%s\"'), util.getFullName(failure.source)));\n\n            failureTable.push([pad(Number(index + 1), Number(failures.length.toString().length)).toString() +\n                DOT, name, message]);\n        });\n\n        return failureTable;\n    }\n});\n\n// Mark the CLI reporter as dominant, so that no two dominant reporters are together\nPostmanCLIReporter.prototype.dominant = true;\n\nmodule.exports = PostmanCLIReporter;\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;EACrBC,GAAG,GAAGD,OAAO,CAAC,oBAAoB,CAAC;EACnCE,MAAM,GAAGF,OAAO,CAAC,aAAa,CAAC;EAC/BG,KAAK,GAAGH,OAAO,CAAC,YAAY,CAAC;EAC7BI,MAAM,GAAGJ,OAAO,CAAC,MAAM,CAAC,CAACI,MAAM;EAE/BC,IAAI,GAAGL,OAAO,CAAC,YAAY,CAAC;EAC5BM,QAAQ,GAAGN,OAAO,CAAC,aAAa,CAAC;EACjCO,KAAK,GAAGP,OAAO,CAAC,aAAa,CAAC;EAC9BQ,GAAG,GAAGF,QAAQ,CAACG,OAAO;EAEtBC,EAAE,GAAG,IAAI;EACTC,GAAG,GAAG,GAAG;EACTC,GAAG,GAAG,GAAG;EACTC,CAAC,GAAG,EAAE;EAENC,mBAAmB,GAAG,SAAS;EAC/BC,oBAAoB,GAAG;IACnBC,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE,MAAM;IACZC,GAAG,EAAE,YAAY;IACjBC,GAAG,EAAE,eAAe;IACpBC,eAAe,EAAE,eAAe;IAChCC,SAAS,EAAE,gBAAgB;IAC3BC,QAAQ,EAAE,UAAU;IACpBC,OAAO,EAAE,SAAS;IAClBC,KAAK,EAAE;EACX,CAAC;EACDC,cAAc,GAAG,IAAI;EAErBC,kBAAkB;EAClBC,SAAS;EACTC,UAAU;;AAEd;AACA1B,MAAM,CAAC2B,QAAQ,CAAC;EACZC,GAAG,EAAE,MAAM;EACXC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,MAAM;EACbC,KAAK,EAAE;AACX,CAAC,CAAC;AAEFN,UAAU,GAAG,UAAUO,UAAU,EAAE;EAC/B,IAAIC,GAAG;;EAEP;EACArC,CAAC,CAACsC,OAAO,CAACF,UAAU,CAAC,IAAIpC,CAAC,CAACuC,YAAY,CAACH,UAAU,EAAE,UAAUI,SAAS,EAAE;IACrE,IAAIC,OAAO,GAAGzC,CAAC,CAAC0C,GAAG,CAACF,SAAS,EAAE,2BAA2B,CAAC;IAE3D,IAAIC,OAAO,EAAE;MACTJ,GAAG,GAAGI,OAAO;MAEb,OAAO,KAAK;IAChB;EACJ,CAAC,CAAC;EAEF,OAAOJ,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,kBAAkB,GAAG,UAAUgB,OAAO,EAAEC,eAAe,EAAEC,OAAO,EAAE;EAC9D,IAAIC,YAAY,GAAGD,OAAO,CAACE,UAAU;IACjCC,OAAO,GAAGzC,QAAQ,CAAC0C,SAAS,CAACJ,OAAO,CAAC;IACrCK,IAAI,GAAG3C,QAAQ,CAAC4C,OAAO,EAAE;IACzBC,OAAO,GAAG7C,QAAQ,CAAC6C,OAAO,CAACP,OAAO,CAACQ,cAAc,CAAC;;EAEtD;EACA,IAAIT,eAAe,CAACU,MAAM,IAAIT,OAAO,CAACS,MAAM,EAAE;IAC1C,OAAO,CAAC;EACZ;;EAEA;EACA/C,QAAQ,CAACgD,KAAK,CAACV,OAAO,CAACW,KAAK,CAAC,IAAIrD,MAAM,CAACsD,OAAO,EAAE;;EAEjD;EACA;EACAd,OAAO,CAACe,EAAE,CAAC,MAAM,EAAE,YAAY;IAC3B;IACA,IAAIC,GAAG,GAAG,IAAI,CAACC,OAAO,CAACD,GAAG;;IAE1B;IACA,IAAI,CAACf,eAAe,CAACiB,SAAS,EAAE;MAC5BrD,KAAK,CAACG,EAAE,GAAGgB,kBAAkB,CAACmC,eAAe,CAACH,GAAG,CAACI,KAAK,EAAEJ,GAAG,CAACK,OAAO,EAAEL,GAAG,CAACM,SAAS,EAAEpB,OAAO,CAAC,GAAGlC,EAAE,CAAC;IACvG;;IAEA;IACA,IAAI,CAACiC,eAAe,CAACsB,UAAU,IAAIP,GAAG,CAACQ,QAAQ,IAAIR,GAAG,CAACQ,QAAQ,CAACC,MAAM,EAAE;MACpE5D,KAAK,CAACG,EAAE,GAAGgB,kBAAkB,CAAC0C,aAAa,CAACV,GAAG,CAACQ,QAAQ,CAAC,GAAGxD,EAAE,CAAC;IACnE;EACJ,CAAC,CAAC;EAEFgC,OAAO,CAACe,EAAE,CAAC,OAAO,EAAE,YAAY;IAC5B,IAAIY,oBAAoB,GAAGxB,YAAY,KAAKA,YAAY,CAACyB,IAAI,IAAIzB,YAAY,CAAC0B,EAAE,CAAC;IAEjF,IAAI,CAAC5B,eAAe,CAAC6B,QAAQ,EAAE;MAC3B;MACAjE,KAAK,CAAC,QAAQ,EAAEL,MAAM,CAACuE,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC3C;;IAEA;IACAJ,oBAAoB,IAAI9D,KAAK,CAACmE,EAAE,CAAC,IAAI,EAAExE,MAAM,CAACuE,KAAK,CAACJ,oBAAoB,CAAC,CAAC;EAC9E,CAAC,CAAC;EAEF3B,OAAO,CAACe,EAAE,CAAC,iBAAiB,EAAE,UAAUkB,GAAG,EAAEC,CAAC,EAAE;IAC5C,IAAID,GAAG,IAAIC,CAAC,CAACC,MAAM,CAACC,MAAM,IAAI,CAAC,EAAE;MAC7B,OAAO,CAAC;IACZ;;IAEA;IACAvE,KAAK,CAACmE,EAAE,CAAChE,EAAE,GAAGR,MAAM,CAAC6E,IAAI,CAACC,SAAS,CAAC,iBAAiB,CAAC,EAAEJ,CAAC,CAACC,MAAM,CAACI,SAAS,GAAG,CAAC,EAAEL,CAAC,CAACC,MAAM,CAACC,MAAM,CAAC;EACpG,CAAC,CAAC;EAEFpC,OAAO,CAACe,EAAE,CAAC,MAAM,EAAE,UAAUkB,GAAG,EAAEC,CAAC,EAAE;IACjC,IAAID,GAAG,EAAE;MACL;IACJ;IACA,IAAIvC,GAAG,GAAGR,UAAU,CAACgD,CAAC,CAACzC,UAAU,CAAC;IAElC,IAAIC,GAAG,EAAE;MACL7B,KAAK,CAACmE,EAAE,CAAChE,EAAE,GAAGR,MAAM,CAAC6E,IAAI,CAAC,mCAAmC,EAAE3C,GAAG,CAAC,CAAC;IACxE;EACJ,CAAC,CAAC;EAEFM,OAAO,CAACe,EAAE,CAAC,YAAY,EAAE,UAAUkB,GAAG,EAAEC,CAAC,EAAE;IACvC,IAAID,GAAG,EAAE;MAAE;IAAQ;IAEnB,IAAIO,SAAS,GAAGN,CAAC,CAACO,IAAI,CAACC,MAAM,EAAE;MAC3BC,IAAI,GAAG,CAACH,SAAS,IAAKA,SAAS,KAAKtC,OAAO,CAACE,UAAW;;IAE3D;IACA,IAAIoC,SAAS,IAAKrC,YAAY,KAAKqC,SAAU,EAAE;MAC3C,CAACG,IAAI,IAAI9E,KAAK,CAAC,SAAS,EAAE4C,OAAO,CAACmC,MAAM,EAAEpF,MAAM,CAACuE,KAAK,CAACpE,IAAI,CAACkF,WAAW,CAACL,SAAS,CAAC,CAAC,CAAC;;MAEpF;MACArC,YAAY,GAAGqC,SAAS;IAC5B;;IAEA;IACA;IACAN,CAAC,CAACO,IAAI,IAAI5E,KAAK,CAACmE,EAAE,CAAC,SAAS,EAAGW,IAAI,GAC/BlC,OAAO,CAACkC,IAAI,GAAGlC,OAAO,CAACqC,GAAG,EAAGtF,MAAM,CAACuE,KAAK,CAACG,CAAC,CAACO,IAAI,CAACb,IAAI,IAAIzD,CAAC,CAAC,CAAC;EACpE,CAAC,CAAC;;EAEF;EACA6B,OAAO,CAACe,EAAE,CAAC,eAAe,EAAE,UAAUkB,GAAG,EAAEC,CAAC,EAAE;IAC1C,IAAID,GAAG,IAAI,CAACC,CAAC,CAACa,OAAO,EAAE;MAAE;IAAQ;IAEjC,IAAI9C,eAAe,CAAC+C,cAAc,EAAE;MAChC,IAAIC,WAAW,GAAG,IAAIC,IAAI,EAAE;MAE5BjE,SAAS,GAAG,GAAG,GAAGgE,WAAW,CAACE,cAAc,EAAE,GAAG,GAAG;MACpDtF,KAAK,CAAC,cAAc,EAChBL,MAAM,CAAC6E,IAAI,CAACpD,SAAS,CAAC,EACtBzB,MAAM,CAAC6E,IAAI,CAACH,CAAC,CAACa,OAAO,CAACK,MAAM,CAAC,EAC7B5F,MAAM,CAAC6E,IAAI,CAACH,CAAC,CAACa,OAAO,CAACM,GAAG,CAACC,QAAQ,EAAE,CAAC,CAAC;IAC9C,CAAC,MACI;MACDzF,KAAK,CAAC,UAAU,EACZL,MAAM,CAAC6E,IAAI,CAACH,CAAC,CAACa,OAAO,CAACK,MAAM,CAAC,EAC7B5F,MAAM,CAAC6E,IAAI,CAACH,CAAC,CAACa,OAAO,CAACM,GAAG,CAACC,QAAQ,EAAE,CAAC,CAAC;IAC9C;IAEA,CAACpD,OAAO,CAACQ,cAAc,IAAI7C,KAAK,EAAE,CAACU,IAAI,CAACf,MAAM,CAAC6E,IAAI,CAAC;EACxD,CAAC,CAAC;;EAEF;EACArC,OAAO,CAACe,EAAE,CAAC,SAAS,EAAE,UAAUkB,GAAG,EAAEC,CAAC,EAAE;IACpC,IAAID,GAAG,EAAE;MACLpE,KAAK,CAACmE,EAAE,CAACxE,MAAM,CAAC+F,GAAG,CAAC,WAAW,CAAC,CAAC;MACjC1F,KAAK,CAACmE,EAAE,CAACxE,MAAM,CAAC+F,GAAG,CAAC,SAAS,CAAC,EAAEtB,GAAG,CAACuB,OAAO,CAAC;MAE5C;IACJ;IAEA,IAAI,EAAEtB,CAAC,CAACa,OAAO,IAAIb,CAAC,CAACuB,QAAQ,CAAC,EAAE;MAC5B5F,KAAK,CAACmE,EAAE,CAACxE,MAAM,CAAC+F,GAAG,CAAC,WAAW,CAAC,CAAC;MACjC1F,KAAK,CAACmE,EAAE,CAACxE,MAAM,CAAC+F,GAAG,CAAC,SAAS,CAAC,EAAE,+CAA+C,CAAC;MAEhF;IACJ;;IAEA;IACA,IAAI,CAACrD,OAAO,CAACwD,OAAO,EAAE;MAClB7F,KAAK,CAACmE,EAAE,CAACxE,MAAM,CAAC6E,IAAI,CAAC,iBAAiB,CAAC,EAAEH,CAAC,CAACuB,QAAQ,CAACE,IAAI,EAAEzB,CAAC,CAACuB,QAAQ,CAACG,MAAM,EAAE,EACzEjG,IAAI,CAACkG,QAAQ,CAAC3B,CAAC,CAACuB,QAAQ,CAACK,IAAI,EAAE,CAAChF,KAAK,CAAC,EAAEnB,IAAI,CAACoG,QAAQ,CAAC7B,CAAC,CAACuB,QAAQ,CAACO,YAAY,CAAC,CAAC;MAEnF;IACJ;;IAEA;IACA;;IAEA,IAAIC,GAAG,GAAG/B,CAAC,CAACa,OAAO;MACfmB,GAAG,GAAGhC,CAAC,CAACuB,QAAQ;MAEhB;MACAU,OAAO,GAAGxG,IAAI,CAACkG,QAAQ,CAACI,GAAG,CAACH,IAAI,EAAE,CAAChF,KAAK,CAAC;MACzCsF,OAAO,GAAGzG,IAAI,CAACkG,QAAQ,CAACK,GAAG,CAACJ,IAAI,EAAE,CAAChF,KAAK,CAAC;MACzC6E,IAAI,GAAGO,GAAG,CAACP,IAAI;MACfC,MAAM,GAAGM,GAAG,CAACN,MAAM,EAAE;MACrBS,IAAI,GAAGH,GAAG,CAACI,WAAW,EAAE,IAAI,CAAC,CAAC;MAC9BjD,OAAO,GAAGhE,CAAC,CAACkH,IAAI,CAAClH,CAAC,CAAC0C,GAAG,CAACmC,CAAC,EAAE,wBAAwB,CAAC,CAAC;MAEpDsC,aAAa,GAAGnH,CAAC,CAAC0C,GAAG,CAACkE,GAAG,EAAE,wBAAwB,CAAC;MACpDQ,aAAa,GAAGpH,CAAC,CAAC0C,GAAG,CAACmE,GAAG,EAAE,wBAAwB,CAAC;MAEpDQ,OAAO,GAAG/G,IAAI,CAACoG,QAAQ,CAACG,GAAG,CAACF,YAAY,IAAI,CAAC,CAAC;MAE9CW,OAAO,GAAIzE,OAAO,CAACwD,OAAO,IAAIO,GAAG,CAACW,IAAI,GAAIX,GAAG,CAACW,IAAI,CAACtB,QAAQ,EAAE,GAAGnF,CAAC;MACjE0G,UAAU,GAAGZ,GAAG,CAACH,IAAI,EAAE,CAACc,IAAI,IAAIE,MAAM,CAACC,UAAU,CAACJ,OAAO,CAAC;MAE1DK,OAAO,GAAG9E,OAAO,CAACwD,OAAO,GAAGQ,GAAG,CAACe,IAAI,EAAE,GAAG9G,CAAC;MAC1C+G,UAAU,GAAGhB,GAAG,CAACJ,IAAI,EAAE,CAACc,IAAI,IAAIE,MAAM,CAACC,UAAU,CAACC,OAAO,CAAC;MAE1DG,WAAW,GAAG9H,CAAC,CAAC0C,GAAG,CAACkE,GAAG,EAAE,WAAW,EAAE,EAAE,CAAC;MACzCmB,UAAU,GAAG,CACR,GAAEf,IAAI,CAACgB,WAAY,EAAC,EACpB,GAAEhB,IAAI,CAACiB,QAAS,EAAC,EACjB,GAAEjB,IAAI,CAACkB,UAAW,EAAC,EACnB,GAAElB,IAAI,CAACmB,OAAQ,EAAC,CACpB,CAACC,IAAI,CAAE,IAAGjI,MAAM,CAAC6E,IAAI,CAAC5B,OAAO,CAACiF,IAAI,CAAE,GAAE,CAAC;IAG5C7H,KAAK,CAACmE,EAAE,CAAC/D,GAAG,CAAC,CAAC,CAAC;;IAEf;IACA;IACA;IACAJ,KAAK,CAACmE,EAAE,CAAC/D,GAAG,GAAGA,GAAG,GAAG,CAChB,GAAE0F,IAAK,IAAGC,MAAO,EAAC,EAClB,GAAEc,OAAQ,IAAGlH,MAAM,CAAC6E,IAAI,CAAC,MAAM,CAAE,EAAC,EAClC,GAAE8B,OAAQ,GAAE3G,MAAM,CAAC6E,IAAI,CAAC5B,OAAO,CAACkF,EAAE,CAAE,IAAGvB,OAAQ,GAAE5G,MAAM,CAAC6E,IAAI,CAAC5B,OAAO,CAACmF,IAAI,CAAE,IAAGpI,MAAM,CAAC6E,IAAI,CAAC,MAAM,CAAE,EAAC,EACnG,GAAEmC,aAAc,GAAEhH,MAAM,CAAC6E,IAAI,CAAC5B,OAAO,CAACkF,EAAE,CAAE,GAAE,GACxC,GAAElB,aAAc,GAAEjH,MAAM,CAAC6E,IAAI,CAAC5B,OAAO,CAACmF,IAAI,CAAE,IAAGpI,MAAM,CAAC6E,IAAI,CAAC,SAAS,CAAE,EAAC,EAC3E,GAAEhF,CAAC,CAAC0C,GAAG,CAACmE,GAAG,EAAE,wBAAwB,CAAE,IAAG1G,MAAM,CAAC6E,IAAI,CAAC,SAAS,CAAE,EAAC,CACtE,CAACoD,IAAI,CAAE,IAAGjI,MAAM,CAAC6E,IAAI,CAAC5B,OAAO,CAACiF,IAAI,CAAE,GAAE,CAAC,CAAC;;IAEzC;IACA,IAAIb,UAAU,EAAE;MACZ;MACA,IAAIA,UAAU,GAAG9F,cAAc,EAAE;QAC7B4F,OAAO,GAAGA,OAAO,CAACkB,MAAM,CAAC,CAAC,EAAE9G,cAAc,CAAC,GACvCvB,MAAM,CAACsI,WAAW,CAAE,cAAanI,IAAI,CAACkG,QAAQ,CAAC9E,cAAc,CAAE,IAAGpB,IAAI,CAACkG,QAAQ,CAACgB,UAAU,CAAE,GAAE,CAAC;MACvG;MAEAF,OAAO,GAAGpE,IAAI,CAACoE,OAAO,EAAG,KAAInH,MAAM,CAACuI,KAAK,CAACtF,OAAO,CAACuF,OAAO,CAACC,MAAM,CAAE,GAAE,CAAC;MACrE;MACApI,KAAK,CAACqI,MAAM,CAAE,KAAI1I,MAAM,CAACuI,KAAK,CAACtF,OAAO,CAACuF,OAAO,CAACG,GAAG,CAAE,IAAG3I,MAAM,CAACuI,KAAK,CAACtF,OAAO,CAACkF,EAAE,CAAE,IAAGR,WAAY,IAAG3H,MAAM,CAAC6E,IAAI,CAAC5B,OAAO,CAACiF,IAAI,CAAE,IAAG/H,IAAI,CAACkG,QAAQ,CAACgB,UAAU,CAAE,IAAG,EACxJrH,MAAM,CAACuI,KAAK,CAAE,KAAItF,OAAO,CAACuF,OAAO,CAACI,MAAO,EAAC,CAAC;MAC3C;MACA;MAAA,CACCC,QAAQ,CAAC7I,MAAM,CAAC6E,IAAI,CAACsC,OAAO,CAAC2B,OAAO,CAAC,UAAU,EAAEtI,EAAE,CAAC,GAAGA,EAAE,CAAC,CAAC;MAEhEH,KAAK,CAACmE,EAAE,CAAC/D,GAAG,CAAC,CAAC,CAAC;IACnB;;IAEA;IACA,IAAIiH,UAAU,EAAE;MACZ;MACA,IAAIA,UAAU,GAAGnG,cAAc,EAAE;QAC7BiG,OAAO,GAAGA,OAAO,CAACa,MAAM,CAAC,CAAC,EAAE9G,cAAc,CAAC,GACvCvB,MAAM,CAACsI,WAAW,CAAE,cAAanI,IAAI,CAACkG,QAAQ,CAAC9E,cAAc,CAAE,IAAGpB,IAAI,CAACkG,QAAQ,CAACqB,UAAU,CAAE,GAAE,CAAC;MACvG;MAEAF,OAAO,GAAGzE,IAAI,CAACyE,OAAO,EAAG,KAAIxH,MAAM,CAACuI,KAAK,CAACtF,OAAO,CAACuF,OAAO,CAACC,MAAM,CAAE,GAAE,CAAC;MACrE;MACApI,KAAK,CAACqI,MAAM,CAAE,KAAI1I,MAAM,CAACuI,KAAK,CAACtF,OAAO,CAACuF,OAAO,CAACG,GAAG,CAAE,IAAG3I,MAAM,CAACuI,KAAK,CAACtF,OAAO,CAACmF,IAAI,CAAE,IAAGR,UAAW,IAAG5H,MAAM,CAAC6E,IAAI,CAAC5B,OAAO,CAACiF,IAAI,CAAE,IAAG/H,IAAI,CAACkG,QAAQ,CAACqB,UAAU,CAAE,IAAG,EACzJ1H,MAAM,CAACuI,KAAK,CAAE,KAAItF,OAAO,CAACuF,OAAO,CAACI,MAAO,EAAC,CAAC;MAC3C;MACA;MAAA,CACCC,QAAQ,CAAC7I,MAAM,CAAC6E,IAAI,CAAC2C,OAAO,CAACsB,OAAO,CAAC,UAAU,EAAEtI,EAAE,CAAC,GAAGA,EAAE,CAAC,CAAC;IACpE;IACA;IACA;IAAA,KACK;MACD;MACA;MACAH,KAAK,CAACmE,EAAE,CAAE,KAAIvB,OAAO,CAACmF,IAAK,IAAGR,UAAW,EAAC,CAAC;IAC/C;;IAEA;IACA/D,OAAO,GAAGA,OAAO,IAAIA,OAAO,CAACA,OAAO,CAAC,CAAC;IACtC,IAAIA,OAAO,EAAE;MACT;MACA,IAAIkF,YAAY,GAAG5I,IAAI,CAAC6I,YAAY,CAACjJ,GAAG,CAACkJ,QAAQ,CAACF,YAAY,CAAClF,OAAO,CAAC,CAAC;QACpEqF,WAAW,GAAG,IAAIjJ,KAAK,CAAC;UACpBkJ,KAAK,EAAEtJ,CAAC,CAACuJ,QAAQ,CAAC;YAAEC,GAAG,EAAE,EAAE;YAAEZ,MAAM,EAAE;UAAG,CAAC,EAAErI,QAAQ,CAACkJ,sBAAsB,CAAC;UAC3EC,SAAS,EAAE1J,CAAC,CAAC2J,IAAI,CAACC,KAAK,CAAC5J,CAAC,CAACyG,IAAI,CAACyC,YAAY,CAAC,CAAC,EAAE,MAAM,CAAC;UACtDW,KAAK,EAAE;YAAE,cAAc,EAAE;UAAE;QAC/B,CAAC,CAAC;MAENX,YAAY,GAAGlJ,CAAC,CAAC8J,SAAS,CAAC9I,oBAAoB,EAAE,CAAC+I,MAAM,EAAEC,MAAM,EAAEC,GAAG,KAAK;QACtE,IAAIjK,CAAC,CAACkK,GAAG,CAAChB,YAAY,EAAEe,GAAG,CAAC,EAAE;UAC1BF,MAAM,CAACI,OAAO,CAACC,IAAI,CAACjK,MAAM,CAACuI,KAAK,CAACsB,MAAM,CAAC,CAAC;UACzCD,MAAM,CAACM,MAAM,CAACD,IAAI,CAACjK,MAAM,CAAC4B,GAAG,CAACmH,YAAY,CAACe,GAAG,CAAC,IAAIlJ,mBAAmB,CAAC,CAAC;QAC5E;MACJ,CAAC,EAAE;QAAEoJ,OAAO,EAAE,EAAE;QAAEE,MAAM,EAAE;MAAG,CAAC,CAAC;MAG/BhB,WAAW,CAACe,IAAI,CAAClB,YAAY,CAACiB,OAAO,CAAC,CAAC,CAAC;MACxCd,WAAW,CAACe,IAAI,CAAClB,YAAY,CAACmB,MAAM,CAAC,CAAC,CAAC;;MAEvC7J,KAAK,CAACG,EAAE,GAAG0I,WAAW,GAAG1I,EAAE,GAAGA,EAAE,CAAC;IACrC;EACJ,CAAC,CAAC;;EAEF;EACAgC,OAAO,CAACe,EAAE,CAAC,QAAQ,EAAE,UAAUkB,GAAG,EAAEC,CAAC,EAAE;IACnCD,GAAG,IAAIpE,KAAK,CAACmE,EAAE,CAACxE,MAAM,CAAC+F,GAAG,CAACoE,IAAI,CAAC,qBAAqB,CAAC,EAAE7J,GAAG,CAAC,IAAI,CAACmD,OAAO,CAACD,GAAG,CAACQ,QAAQ,CAACC,MAAM,EAAE,CAAC,EAAExD,GAAG,CAAC,EAAEgE,GAAG,CAACL,IAAI,EAC3GM,CAAC,CAAC0F,KAAK,IAAI1F,CAAC,CAAC0F,KAAK,CAACC,MAAM,IAAI,SAAS,CAAC;EAC/C,CAAC,CAAC;EAEF,CAAC5H,eAAe,CAAC6H,YAAY,IAAI9H,OAAO,CAACe,EAAE,CAAC,WAAW,EAAE,UAAUkB,GAAG,EAAEC,CAAC,EAAE;IACvE,IAAI6F,MAAM,GAAG,CAAC9F,GAAG;;IAEjB;IACA,IAAIC,CAAC,CAAC8F,OAAO,IAAI,CAAC/H,eAAe,CAACgI,mBAAmB,EAAE;MACnDpK,KAAK,CAACmE,EAAE,CAAC,OAAO,EAAExE,MAAM,CAAC0K,IAAI,CAAC,MAAM,CAAC,EAAE1K,MAAM,CAAC0K,IAAI,CAAC,YAAY,GAAGhG,CAAC,CAACiG,SAAS,CAAC,CAAC;MAE/E;IACJ;IAEA,IAAIJ,MAAM,IAAI9H,eAAe,CAACgI,mBAAmB,EAAE;MAC/C;IACJ;;IAEA;IACA,IAAIhI,eAAe,CAAC+C,cAAc,EAAE;MAChC/D,SAAS,GAAG,GAAG,GAAG,IAAIiE,IAAI,EAAE,CAACkF,kBAAkB,EAAE,GAAG,GAAG;MACvDvK,KAAK,CAACmE,EAAE,CAAC,WAAW,EAAExE,MAAM,CAAC6E,IAAI,CAACpD,SAAS,CAAC,EAAE8I,MAAM,GAAGvK,MAAM,CAAC6K,KAAK,CAAE,KAAI5H,OAAO,CAAC6H,EAAG,GAAE,CAAC,GACnF9K,MAAM,CAAC+F,GAAG,CAACoE,IAAI,CAAC7J,GAAG,CAAC,IAAI,CAACmD,OAAO,CAACD,GAAG,CAACQ,QAAQ,CAACC,MAAM,EAAE,CAAC,EAAExD,GAAG,CAAC,GAAGwC,OAAO,CAAC8H,GAAG,CAAC,EAAER,MAAM,GACpFvK,MAAM,CAAC6E,IAAI,CAACH,CAAC,CAACiG,SAAS,CAAC,GAAG3K,MAAM,CAAC+F,GAAG,CAACoE,IAAI,CAACzF,CAAC,CAACiG,SAAS,CAAC,CAAC;IAChE,CAAC,MACI;MACDtK,KAAK,CAACmE,EAAE,CAAC,OAAO,EAAE+F,MAAM,GAAGvK,MAAM,CAAC6K,KAAK,CAAE,KAAI5H,OAAO,CAAC6H,EAAG,GAAE,CAAC,GACvD9K,MAAM,CAAC+F,GAAG,CAACoE,IAAI,CAAC7J,GAAG,CAAC,IAAI,CAACmD,OAAO,CAACD,GAAG,CAACQ,QAAQ,CAACC,MAAM,EAAE,CAAC,EAAExD,GAAG,CAAC,GAAGwC,OAAO,CAAC8H,GAAG,CAAC,EAAER,MAAM,GACpFvK,MAAM,CAAC6E,IAAI,CAACH,CAAC,CAACiG,SAAS,CAAC,GAAG3K,MAAM,CAAC+F,GAAG,CAACoE,IAAI,CAACzF,CAAC,CAACiG,SAAS,CAAC,CAAC;IAChE;EACJ,CAAC,CAAC;;EAEF;EACA,CAAClI,eAAe,CAACuI,SAAS,IAAIxI,OAAO,CAACe,EAAE,CAAC,SAAS,EAAE,UAAUkB,GAAG,EAAEC,CAAC,EAAE;IAClE,IAAID,GAAG,EAAE;MAAE;IAAQ;IAEnB,IAAIpB,KAAK,GAAGrD,MAAM,CAAC0E,CAAC,CAACuG,KAAK,CAAC,IAAIjL,MAAM,CAAC6E,IAAI;MACtCmB,OAAO;;IAEX;IACA;IACAA,OAAO,GAAGjD,IAAI,CAAClD,CAAC,CAACqL,MAAM,CAACxG,CAAC,CAACyG,QAAQ,EAAE,UAAUvJ,GAAG,EAAEoE,OAAO,EAAE;MAAE;MAC1D,OAAQpE,GAAG,IAAI,CAACA,GAAG,GAAG5B,MAAM,CAACuI,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI1F,OAAO,CAACmD,OAAO,CAAC;IACrE,CAAC,EAAErF,CAAC,CAAC,EAAG,KAAI0C,KAAK,CAACJ,OAAO,CAACuF,OAAO,CAACC,MAAM,CAAE,GAAE,CAAC,CAAC,CAAC;;IAE/C;IACA,IAAIhG,eAAe,CAAC+C,cAAc,EAAE;MAChCnF,KAAK,CAACG,EAAE,GAAG,MAAM,EAAER,MAAM,CAAC6E,IAAI,CAAC,GAAG,GAAG,IAAIa,IAAI,EAAE,CAACkF,kBAAkB,EAAE,GAAG,GAAG,GAAGpK,EAAE,CAAC,CAAC;IACrF;IAEAH,KAAK,CAACqI,MAAM,CAACrF,KAAK,CAAE,KAAIJ,OAAO,CAACuF,OAAO,CAACG,GAAI,IAAG,CAAC,EAAEtF,KAAK,CAAE,KAAIJ,OAAO,CAACuF,OAAO,CAACI,MAAO,IAAG,CAAC;IACpF;IACA;IAAA,CACCC,QAAQ,CAAC7I,MAAM,CAAC6E,IAAI,CAACmB,OAAO,CAAC8C,OAAO,CAAC,UAAU,EAAEtI,EAAE,CAAC,GAAGA,EAAE,CAAC,CAAC;EACpE,CAAC,CAAC;AACN,CAAC;AAEDX,CAAC,CAACuL,QAAQ,CAAC5J,kBAAkB,EAAE;EAE3B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACImC,eAAe,CAAEC,KAAK,EAAEC,OAAO,EAAEC,SAAS,EAAEpB,OAAO,EAAE;IACjD,IAAI2I,YAAY;;IAEhB;IACAA,YAAY,GAAG,IAAIpL,KAAK,CAAC;MACrBkJ,KAAK,EAAEzG,OAAO,CAACQ,cAAc,IAAI9C,QAAQ,CAACkL,wBAAwB;MAClE5B,KAAK,EAAE;QAAE6B,IAAI,EAAE;MAAG,CAAC;MACnBA,IAAI,EAAE,CAAC5K,CAAC,EAAE,UAAU,EAAE,UAAU,CAAC;MACjC4I,SAAS,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;MACtCiC,SAAS,EAAE,CAAC,EAAE;IAClB,CAAC,CAAC;;IAEF;IACA5H,KAAK,IAAI/D,CAAC,CAAC4L,OAAO,CAAC,CAAC;MAChBC,MAAM,EAAE,YAAY;MACpBC,KAAK,EAAE;IACX,CAAC,EAAE;MACCD,MAAM,EAAE,UAAU;MAClBC,KAAK,EAAE;IACX,CAAC,EAAE;MACCD,MAAM,EAAE,aAAa;MACrBC,KAAK,EAAE;IACX,CAAC,EAAE;MACCD,MAAM,EAAE,mBAAmB;MAC3BC,KAAK,EAAE;IACX,CAAC,EAAE;MACCD,MAAM,EAAE,YAAY;MACpBC,KAAK,EAAE;IACX,CAAC,CAAC,EAAE,UAAUC,GAAG,EAAE;MACf,IAAIC,MAAM,GAAGjI,KAAK,CAACgI,GAAG,CAACF,MAAM,CAAC;QAC1BC,KAAK,GAAGC,GAAG,CAACD,KAAK;;MAErB;MACAA,KAAK,GAAGE,MAAM,CAACC,MAAM,GAAG9L,MAAM,CAAC+F,GAAG,CAAC4F,KAAK,CAAC,GAAIE,MAAM,CAACE,OAAO,GAAGJ,KAAK,GAAG3L,MAAM,CAAC6K,KAAK,CAACc,KAAK,CAAE;;MAE1F;MACAN,YAAY,CAACpB,IAAI,CAAC,CACd0B,KAAK,EACLE,MAAM,CAACvK,KAAK,EACXuK,MAAM,CAACC,MAAM,GAAG9L,MAAM,CAAC+F,GAAG,CAAC8F,MAAM,CAACC,MAAM,CAAC,GAAGD,MAAM,CAACC;MACpD;MACA;MACA;MAAA,CACH,CAAC;IACN,CAAC,CAAC;;IAEF;IACAjI,OAAO,IAAIwH,YAAY,CAACpB,IAAI,CAAC,CAAC;MAC1B+B,OAAO,EAAE,CAAC;MACVC,OAAO,EAAE/L,MAAM,CAAC,wBAAwB,EAAEC,IAAI,CAACoG,QAAQ,CAAC1C,OAAO,CAACqI,SAAS,GAAGrI,OAAO,CAACsI,OAAO,CAAC,CAAC;MAC7FC,MAAM,EAAE,MAAM,CAAC;IACnB,CAAC,CAAC,CAAC;;IAEH;IACAtI,SAAS,IAAIuH,YAAY,CAACpB,IAAI,CAAC,CAAC;MAC5B+B,OAAO,EAAE,CAAC;MACVC,OAAO,EAAE/L,MAAM,CAAC,kCAAkC,EAAEC,IAAI,CAACkG,QAAQ,CAACvC,SAAS,CAACuI,aAAa,CAAC,CAAC;MAC3FD,MAAM,EAAE;IACZ,CAAC,CAAC,CAAC;;IAEH;IACAvI,OAAO,IAAIhE,CAAC,CAAC4L,OAAO,CAAC;MACjBxF,QAAQ,EAAE,wBAAwB;MAClCjF,GAAG,EAAE,0BAA0B;MAC/BG,SAAS,EAAE;IACf,CAAC,EAAE,CAACmL,KAAK,EAAExC,GAAG,KAAK;MACfjG,OAAO,CAAE,GAAEiG,GAAI,SAAQ,CAAC,IAAIuB,YAAY,CAACpB,IAAI,CAAC,CAAC;QAC3C+B,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE/L,MAAM,CAAE,GAAEoM,KAAM,kCAAiC,EACtDnM,IAAI,CAACoG,QAAQ,CAAC1C,OAAO,CAAE,GAAEiG,GAAI,SAAQ,CAAC,CAAC,EACvC3J,IAAI,CAACoG,QAAQ,CAAC1C,OAAO,CAAE,GAAEiG,GAAI,KAAI,CAAC,CAAC,EACnC3J,IAAI,CAACoG,QAAQ,CAAC1C,OAAO,CAAE,GAAEiG,GAAI,KAAI,CAAC,CAAC,EACnC3J,IAAI,CAACoG,QAAQ,CAAC1C,OAAO,CAAE,GAAEiG,GAAI,IAAG,CAAC,CAAC,CAAC;QACvCsC,MAAM,EAAE;MACZ,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,OAAOf,YAAY;EACvB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACInH,aAAa,CAAEF,QAAQ,EAAE;IACrB,IAAIuI,YAAY,GAAG,IAAItM,KAAK,CAAC;MACzBsL,IAAI,EAAE,CAAC;QACHa,MAAM,EAAE,OAAO;QACfH,OAAO,EAAEjM,MAAM,CAAC+F,GAAG,CAACjB,SAAS,CAAC,GAAG;MACrC,CAAC,EAAE9E,MAAM,CAAC+F,GAAG,CAACjB,SAAS,CAAC,SAAS,CAAC,EAClC9E,MAAM,CAAC+F,GAAG,CAACjB,SAAS,CAAC,QAAQ,CAAC,CAAC;MAC/BqE,KAAK,EAAE/I,QAAQ,CAACkJ,sBAAsB;MACtCkD,QAAQ,EAAE,IAAI;MACdjD,SAAS,EAAE,CAAC,OAAO,CAAC;MACpBiC,SAAS,EAAEpL,QAAQ,CAACgD,KAAK,EAAE,GAAG,EAAE,GAAI,UAAUkD,IAAI,EAAEmG,UAAU,EAAE;QAC5D,IAAIjB,SAAS,GAAG,EAAE;QAElB,IAAIlF,IAAI,CAACoG,MAAM,IAAIpG,IAAI,CAACqG,KAAK,IAAKrG,IAAI,CAACqG,KAAK,GAAG,EAAG,EAAE;UAChDnB,SAAS,CAAC,CAAC,CAAC,GAAGiB,UAAU,GAAG,CAAC;UAC7BjB,SAAS,CAAC,CAAC,CAAC,GAAGoB,QAAQ,CAAC,CAACtG,IAAI,CAACqG,KAAK,GAAGnB,SAAS,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC;UAC9DA,SAAS,CAAC,CAAC,CAAC,GAAGoB,QAAQ,CAACtG,IAAI,CAACqG,KAAK,IAAInB,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;QAC/E;QAEA,OAAOA,SAAS;MACpB,CAAC,CAACpL,QAAQ,CAACyM,SAAS,EAAE,EAAEC,MAAM,CAAC9I,QAAQ,CAACC,MAAM,CAAC6B,QAAQ,EAAE,CAAC7B,MAAM,CAAC;IACrE,CAAC,CAAC;IAEFpE,CAAC,CAAC4L,OAAO,CAACzH,QAAQ,EAAE,UAAU+I,OAAO,EAAEC,KAAK,EAAE;MAC1C,IAAI5I,IAAI,GAAG2I,OAAO,CAAC/K,KAAK,IAAI+K,OAAO,CAAC/K,KAAK,CAACoC,IAAI,IAAIzD,CAAC;QAC/CqF,OAAO,GAAG+G,OAAO,CAAC/K,KAAK,IAAI+K,OAAO,CAAC/K,KAAK,CAACiL,IAAI,IAAItM,CAAC;;MAEtD;MACAoM,OAAO,CAACpI,MAAM,IAAKoI,OAAO,CAACpI,MAAM,CAACC,MAAM,GAAG,CAAE,KACxCR,IAAI,IAAI5D,EAAE,GAAGR,MAAM,CAAC6E,IAAI,CAAC,aAAa,IAAIkI,OAAO,CAACpI,MAAM,CAACI,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;;MAE9E;MACAgI,OAAO,CAAC/K,KAAK,KAAKgE,OAAO,IAAIxF,EAAE,GAAGR,MAAM,CAAC6E,IAAI,CAACkI,OAAO,CAAC/K,KAAK,CAACgE,OAAO,IAAIrF,CAAC,CAAC,CAAC;;MAE1E;MACAoM,OAAO,CAACG,EAAE,KAAKlH,OAAO,IAAIxF,EAAE,GAAGR,MAAM,CAAC6E,IAAI,CAAC,KAAK,GAAGkI,OAAO,CAACG,EAAE,CAAC,CAAC;;MAE/D;MACAH,OAAO,CAACrB,MAAM,KACT1F,OAAO,IAAI9F,MAAM,CAACF,MAAM,CAAC6E,IAAI,CAAC,eAAe,CAAC,EAAE1E,IAAI,CAACkF,WAAW,CAAC0H,OAAO,CAACrB,MAAM,CAAC,CAAC,CAAC;MAEvFa,YAAY,CAACtC,IAAI,CAAC,CAAC3J,GAAG,CAACwM,MAAM,CAACE,KAAK,GAAG,CAAC,CAAC,EAAEF,MAAM,CAAC9I,QAAQ,CAACC,MAAM,CAAC6B,QAAQ,EAAE,CAAC7B,MAAM,CAAC,CAAC,CAAC6B,QAAQ,EAAE,GAC3FpF,GAAG,EAAE0D,IAAI,EAAE4B,OAAO,CAAC,CAAC;IAC5B,CAAC,CAAC;IAEF,OAAOuG,YAAY;EACvB;AACJ,CAAC,CAAC;;AAEF;AACA/K,kBAAkB,CAAC2L,SAAS,CAACC,QAAQ,GAAG,IAAI;AAE5CC,MAAM,CAACC,OAAO,GAAG9L,kBAAkB"},"metadata":{},"sourceType":"script"}