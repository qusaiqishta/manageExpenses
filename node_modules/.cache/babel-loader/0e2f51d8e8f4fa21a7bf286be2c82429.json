{"ast":null,"code":"var _ = require('../util').lodash,\n  E = '',\n  DEFAULT_MIMETYPE = 'text/plain',\n  Description;\n\n/**\n * @typedef Description.definition\n * @property {String} content\n * @property {String} type\n */\n/**\n * This is one of the properties that are (if provided) processed by all other properties. Any property can have an\n * instance of `Description` property assigned to it with the key name `description` and it should be treated as\n * something that \"describes\" the property within which it belongs. Usually this property is used to generate\n * documentation and other contextual information for a property in a Collection.\n *\n * @constructor\n *\n * @param {Description.definition|String} [definition] The content of the description can be passed as a string when it\n * is in `text/plain` format or otherwise be sent as part of an object adhering to the {@link Description.definition}\n * structure having `content` and `type`.\n *\n * @example <caption>Add a description to an instance of Collection</caption>\n *  var SDK = require('postman-collection'),\n *     Collection = SDK.Collection,\n *     Description = SDK.Description,\n *     mycollection;\n *\n * // create a blank collection\n * myCollection = new Collection();\n * myCollection.description = new Description({\n *     content: '&lt;h1&gt;Hello World&lt;/h1&gt;&lt;p&gt;I am a Collection&lt;/p&gt;',\n *     type: 'text/html'\n * });\n *\n * // alternatively, you could also use the `.describe` method of any property to set or update the description of the\n * // property.\n * myCollection.describe('Hey! This is a cool collection.');\n */\nDescription = function PostmanPropertyDescription(definition) {\n  // if the definition is a string, it implies that this is a get of URL\n  _.isString(definition) && (definition = {\n    content: definition,\n    type: DEFAULT_MIMETYPE\n  });\n\n  // populate the description\n  definition && this.update(definition);\n};\n_.assign(Description.prototype, /** @lends Description.prototype */{\n  /**\n   * Updates the content of this description property.\n   *\n   * @param {String|Description.definition} content -\n   * @param {String=} [type] -\n   * @todo parse version of description\n   */\n  update(content, type) {\n    _.isObject(content) && (type = content.type, content = content.content);\n    _.assign(this, /** @lends Description.prototype */{\n      /**\n       * The raw content of the description\n       *\n       * @type {String}\n       */\n      content: content,\n      /**\n       * The mime-type of the description.\n       *\n       * @type {String}\n       */\n      type: type || DEFAULT_MIMETYPE\n    });\n  },\n  /**\n   * Returns stringified Description.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this.content || E;\n  },\n  /**\n   * Creates a JSON representation of the Description (as a plain Javascript object).\n   *\n   * @returns {{content: *, type: *, version: (String|*)}}\n   */\n  toJSON() {\n    return {\n      content: this.content,\n      type: this.type\n    };\n  }\n});\n_.assign(Description, /** @lends Description */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'Description',\n  /**\n   * Checks whether a property is an instance of Description object.\n   *\n   * @param {*} obj -\n   * @returns {Boolean}\n   */\n  isDescription: function (obj) {\n    return Boolean(obj) && (obj instanceof Description || _.inSuperChain(obj.constructor, '_postman_propertyName', Description._postman_propertyName));\n  }\n});\nmodule.exports = {\n  Description\n};","map":{"version":3,"names":["_","require","lodash","E","DEFAULT_MIMETYPE","Description","PostmanPropertyDescription","definition","isString","content","type","update","assign","prototype","isObject","toString","toJSON","_postman_propertyName","isDescription","obj","Boolean","inSuperChain","constructor","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/description.js"],"sourcesContent":["var _ = require('../util').lodash,\n\n    E = '',\n    DEFAULT_MIMETYPE = 'text/plain',\n\n    Description;\n\n/**\n * @typedef Description.definition\n * @property {String} content\n * @property {String} type\n */\n/**\n * This is one of the properties that are (if provided) processed by all other properties. Any property can have an\n * instance of `Description` property assigned to it with the key name `description` and it should be treated as\n * something that \"describes\" the property within which it belongs. Usually this property is used to generate\n * documentation and other contextual information for a property in a Collection.\n *\n * @constructor\n *\n * @param {Description.definition|String} [definition] The content of the description can be passed as a string when it\n * is in `text/plain` format or otherwise be sent as part of an object adhering to the {@link Description.definition}\n * structure having `content` and `type`.\n *\n * @example <caption>Add a description to an instance of Collection</caption>\n *  var SDK = require('postman-collection'),\n *     Collection = SDK.Collection,\n *     Description = SDK.Description,\n *     mycollection;\n *\n * // create a blank collection\n * myCollection = new Collection();\n * myCollection.description = new Description({\n *     content: '&lt;h1&gt;Hello World&lt;/h1&gt;&lt;p&gt;I am a Collection&lt;/p&gt;',\n *     type: 'text/html'\n * });\n *\n * // alternatively, you could also use the `.describe` method of any property to set or update the description of the\n * // property.\n * myCollection.describe('Hey! This is a cool collection.');\n */\nDescription = function PostmanPropertyDescription (definition) {\n    // if the definition is a string, it implies that this is a get of URL\n    _.isString(definition) && (definition = {\n        content: definition,\n        type: DEFAULT_MIMETYPE\n    });\n\n    // populate the description\n    definition && this.update(definition);\n};\n\n_.assign(Description.prototype, /** @lends Description.prototype */ {\n    /**\n     * Updates the content of this description property.\n     *\n     * @param {String|Description.definition} content -\n     * @param {String=} [type] -\n     * @todo parse version of description\n     */\n    update (content, type) {\n        _.isObject(content) && ((type = content.type), (content = content.content));\n        _.assign(this, /** @lends Description.prototype */ {\n            /**\n             * The raw content of the description\n             *\n             * @type {String}\n             */\n            content: content,\n\n            /**\n             * The mime-type of the description.\n             *\n             * @type {String}\n             */\n            type: type || DEFAULT_MIMETYPE\n        });\n    },\n\n    /**\n     * Returns stringified Description.\n     *\n     * @returns {String}\n     */\n    toString () {\n        return this.content || E;\n    },\n\n    /**\n     * Creates a JSON representation of the Description (as a plain Javascript object).\n     *\n     * @returns {{content: *, type: *, version: (String|*)}}\n     */\n    toJSON () {\n        return {\n            content: this.content,\n            type: this.type\n        };\n    }\n});\n\n_.assign(Description, /** @lends Description */ {\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'Description',\n\n    /**\n     * Checks whether a property is an instance of Description object.\n     *\n     * @param {*} obj -\n     * @returns {Boolean}\n     */\n    isDescription: function (obj) {\n        return Boolean(obj) && ((obj instanceof Description) ||\n            _.inSuperChain(obj.constructor, '_postman_propertyName', Description._postman_propertyName));\n    }\n});\n\nmodule.exports = {\n    Description\n};\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM;EAE7BC,CAAC,GAAG,EAAE;EACNC,gBAAgB,GAAG,YAAY;EAE/BC,WAAW;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,WAAW,GAAG,SAASC,0BAA0B,CAAEC,UAAU,EAAE;EAC3D;EACAP,CAAC,CAACQ,QAAQ,CAACD,UAAU,CAAC,KAAKA,UAAU,GAAG;IACpCE,OAAO,EAAEF,UAAU;IACnBG,IAAI,EAAEN;EACV,CAAC,CAAC;;EAEF;EACAG,UAAU,IAAI,IAAI,CAACI,MAAM,CAACJ,UAAU,CAAC;AACzC,CAAC;AAEDP,CAAC,CAACY,MAAM,CAACP,WAAW,CAACQ,SAAS,EAAE,mCAAoC;EAChE;AACJ;AACA;AACA;AACA;AACA;AACA;EACIF,MAAM,CAAEF,OAAO,EAAEC,IAAI,EAAE;IACnBV,CAAC,CAACc,QAAQ,CAACL,OAAO,CAAC,KAAMC,IAAI,GAAGD,OAAO,CAACC,IAAI,EAAID,OAAO,GAAGA,OAAO,CAACA,OAAQ,CAAC;IAC3ET,CAAC,CAACY,MAAM,CAAC,IAAI,EAAE,mCAAoC;MAC/C;AACZ;AACA;AACA;AACA;MACYH,OAAO,EAAEA,OAAO;MAEhB;AACZ;AACA;AACA;AACA;MACYC,IAAI,EAAEA,IAAI,IAAIN;IAClB,CAAC,CAAC;EACN,CAAC;EAED;AACJ;AACA;AACA;AACA;EACIW,QAAQ,GAAI;IACR,OAAO,IAAI,CAACN,OAAO,IAAIN,CAAC;EAC5B,CAAC;EAED;AACJ;AACA;AACA;AACA;EACIa,MAAM,GAAI;IACN,OAAO;MACHP,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,IAAI,EAAE,IAAI,CAACA;IACf,CAAC;EACL;AACJ,CAAC,CAAC;AAEFV,CAAC,CAACY,MAAM,CAACP,WAAW,EAAE,yBAA0B;EAC5C;AACJ;AACA;AACA;AACA;AACA;AACA;EACIY,qBAAqB,EAAE,aAAa;EAEpC;AACJ;AACA;AACA;AACA;AACA;EACIC,aAAa,EAAE,UAAUC,GAAG,EAAE;IAC1B,OAAOC,OAAO,CAACD,GAAG,CAAC,KAAMA,GAAG,YAAYd,WAAW,IAC/CL,CAAC,CAACqB,YAAY,CAACF,GAAG,CAACG,WAAW,EAAE,uBAAuB,EAAEjB,WAAW,CAACY,qBAAqB,CAAC,CAAC;EACpG;AACJ,CAAC,CAAC;AAEFM,MAAM,CAACC,OAAO,GAAG;EACbnB;AACJ,CAAC"},"metadata":{},"sourceType":"script"}