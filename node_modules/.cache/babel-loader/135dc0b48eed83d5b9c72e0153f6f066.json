{"ast":null,"code":"var _ = require('../util').lodash,\n  PropertyList = require('./property-list').PropertyList,\n  Property = require('./property').Property,\n  Variable = require('./variable').Variable,\n  VariableList;\n_.inherit(\n/**\n * @constructor\n * @extends {PropertyList}\n *\n * @param {Property} parent -\n * @param {Object|Array} populate -\n */\nVariableList = function PostmanVariableList(parent, populate) {\n  // this constructor is intended to inherit and as such the super constructor is required to be executed\n  VariableList.super_.call(this, Variable, parent, populate);\n}, PropertyList);\n_.assign(VariableList.prototype, /** @lends VariableList.prototype */{\n  /**\n   * Replaces the variable tokens inside a string with its actual values.\n   *\n   * @param {String} str -\n   * @param {Object} [overrides] - additional objects to lookup for variable values\n   * @returns {String}\n   */\n  replace(str, overrides) {\n    return Property.replaceSubstitutions(str, this, overrides);\n  },\n  /**\n   * Recursively replace strings in an object with instances of variables. Note that it clones the original object. If\n   * the `mutate` param is set to true, then it replaces the same object instead of creating a new one.\n   *\n   * @param {Array|Object} obj -\n   * @param {?Array<Object>=} [overrides] - additional objects to lookup for variable values\n   * @param {Boolean=} [mutate=false] -\n   * @returns {Array|Object}\n   */\n  substitute(obj, overrides, mutate) {\n    var resolutionQueue = [],\n      // we use this to store the queue of variable hierarchy\n\n      // this is an intermediate object to stimulate a property (makes the do-while loop easier)\n      variableSource = {\n        variables: this,\n        __parent: this.__parent\n      };\n    do {\n      // iterate and accumulate as long as you find `.variables` in parent tree\n      variableSource.variables && resolutionQueue.push(variableSource.variables);\n      variableSource = variableSource.__parent;\n    } while (variableSource);\n    variableSource = null; // cautious cleanup\n\n    return Property.replaceSubstitutionsIn(obj, _.union(resolutionQueue, overrides), mutate);\n  },\n  /**\n   * Using this function, one can sync the values of this variable list from a reference object.\n   *\n   * @param {Object} obj -\n   * @param {Boolean=} track -\n   * @param {Boolean} [prune=true] -\n   *\n   * @returns {Object}\n   */\n  syncFromObject(obj, track, prune) {\n    var list = this,\n      ops = track && {\n        created: [],\n        updated: [],\n        deleted: []\n      },\n      indexer = list._postman_listIndexKey,\n      tmp;\n    if (!_.isObject(obj)) {\n      return ops;\n    }\n\n    // ensure that all properties in the object is updated in this list\n    _.forOwn(obj, function (value, key) {\n      // we need to create new variable if exists or update existing\n      if (list.has(key)) {\n        list.one(key).set(value);\n        ops && ops.updated.push(key);\n      } else {\n        tmp = {\n          value\n        };\n        tmp[indexer] = key;\n        list.add(tmp);\n        tmp = null;\n        ops && ops.created.push(key);\n      }\n    });\n\n    // now remove any variable that is not in source object\n    // @note - using direct `this.reference` list of keys here so that we can mutate the list while iterating\n    // on it\n    if (prune !== false) {\n      _.forEach(list.reference, function (value, key) {\n        if (_.has(obj, key)) {\n          return;\n        } // de not delete if source obj has this variable\n        list.remove(key); // use PropertyList functions to remove so that the .members array is cleared too\n        ops && ops.deleted.push(key);\n      });\n    }\n    return ops;\n  },\n  /**\n   * Transfer all variables from this list to an object\n   *\n   * @param {Object=} [obj] -\n   * @returns {Object}\n   */\n  syncToObject(obj) {\n    var list = this;\n\n    // in case user did not provide an object to mutate, create a new one\n    !_.isObject(obj) && (obj = {});\n\n    // delete extra variables from object that are not present in list\n    _.forEach(obj, function (value, key) {\n      !_.has(list.reference, key) && delete obj[key];\n    });\n\n    // we first sync all variables in this list to the object\n    list.each(function (variable) {\n      obj[variable.key] = variable.valueOf();\n    });\n    return obj;\n  },\n  /**\n   * Fetches a variable and normalize its reference if disabled.\n   * This updates the disabled variable `reference` in VariableList with its\n   * last enabled duplicate(if found) in the `members` list.\n   *\n   * @private\n   * @param {String} variableName - The name of the variable to get\n   * @returns {Variable} - In case of duplicates, returns last enabled\n   */\n  oneNormalizedVariable(variableName) {\n    var indexKey = this._postman_listIndexKey,\n      // `key` for Variable\n      variable = this.reference[variableName],\n      i;\n    if (variable && !variable.disabled) {\n      return variable;\n    }\n\n    // traverse the members list in reverse direction in order to find the last enabled\n    for (i = this.members.length - 1; i >= 0; i--) {\n      variable = this.members[i];\n      if (variable[indexKey] === variableName && !variable.disabled) {\n        // update the input variable reference if comparison is not disabled\n        this.reference[variableName] = variable;\n        break; // return updated reference variable\n      }\n    }\n\n    return this.reference[variableName];\n  }\n});\n_.assign(VariableList, /** @lends VariableList */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   *\n   * @note that this is directly accessed only in case of VariableList from _.findValue lodash util mixin\n   */\n  _postman_propertyName: 'VariableList',\n  /**\n   * Checks whether an object is a VariableList\n   *\n   * @param {*} obj -\n   * @returns {Boolean}\n   */\n  isVariableList: function (obj) {\n    return Boolean(obj) && (obj instanceof VariableList || _.inSuperChain(obj.constructor, '_postman_propertyName', VariableList._postman_propertyName));\n  }\n});\nmodule.exports = {\n  VariableList\n};","map":{"version":3,"names":["_","require","lodash","PropertyList","Property","Variable","VariableList","inherit","PostmanVariableList","parent","populate","super_","call","assign","prototype","replace","str","overrides","replaceSubstitutions","substitute","obj","mutate","resolutionQueue","variableSource","variables","__parent","push","replaceSubstitutionsIn","union","syncFromObject","track","prune","list","ops","created","updated","deleted","indexer","_postman_listIndexKey","tmp","isObject","forOwn","value","key","has","one","set","add","forEach","reference","remove","syncToObject","each","variable","valueOf","oneNormalizedVariable","variableName","indexKey","i","disabled","members","length","_postman_propertyName","isVariableList","Boolean","inSuperChain","constructor","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/variable-list.js"],"sourcesContent":["var _ = require('../util').lodash,\n    PropertyList = require('./property-list').PropertyList,\n    Property = require('./property').Property,\n    Variable = require('./variable').Variable,\n\n    VariableList;\n\n_.inherit((\n\n    /**\n     * @constructor\n     * @extends {PropertyList}\n     *\n     * @param {Property} parent -\n     * @param {Object|Array} populate -\n     */\n    VariableList = function PostmanVariableList (parent, populate) {\n        // this constructor is intended to inherit and as such the super constructor is required to be executed\n        VariableList.super_.call(this, Variable, parent, populate);\n    }), PropertyList);\n\n_.assign(VariableList.prototype, /** @lends VariableList.prototype */ {\n    /**\n     * Replaces the variable tokens inside a string with its actual values.\n     *\n     * @param {String} str -\n     * @param {Object} [overrides] - additional objects to lookup for variable values\n     * @returns {String}\n     */\n    replace (str, overrides) {\n        return Property.replaceSubstitutions(str, this, overrides);\n    },\n\n    /**\n     * Recursively replace strings in an object with instances of variables. Note that it clones the original object. If\n     * the `mutate` param is set to true, then it replaces the same object instead of creating a new one.\n     *\n     * @param {Array|Object} obj -\n     * @param {?Array<Object>=} [overrides] - additional objects to lookup for variable values\n     * @param {Boolean=} [mutate=false] -\n     * @returns {Array|Object}\n     */\n    substitute (obj, overrides, mutate) {\n        var resolutionQueue = [], // we use this to store the queue of variable hierarchy\n\n            // this is an intermediate object to stimulate a property (makes the do-while loop easier)\n            variableSource = {\n                variables: this,\n                __parent: this.__parent\n            };\n\n        do { // iterate and accumulate as long as you find `.variables` in parent tree\n            variableSource.variables && resolutionQueue.push(variableSource.variables);\n            variableSource = variableSource.__parent;\n        } while (variableSource);\n\n        variableSource = null; // cautious cleanup\n\n        return Property.replaceSubstitutionsIn(obj, _.union(resolutionQueue, overrides), mutate);\n    },\n\n    /**\n     * Using this function, one can sync the values of this variable list from a reference object.\n     *\n     * @param {Object} obj -\n     * @param {Boolean=} track -\n     * @param {Boolean} [prune=true] -\n     *\n     * @returns {Object}\n     */\n    syncFromObject (obj, track, prune) {\n        var list = this,\n            ops = track && {\n                created: [],\n                updated: [],\n                deleted: []\n            },\n            indexer = list._postman_listIndexKey,\n            tmp;\n\n        if (!_.isObject(obj)) { return ops; }\n\n        // ensure that all properties in the object is updated in this list\n        _.forOwn(obj, function (value, key) {\n            // we need to create new variable if exists or update existing\n            if (list.has(key)) {\n                list.one(key).set(value);\n                ops && ops.updated.push(key);\n            }\n            else {\n                tmp = { value };\n                tmp[indexer] = key;\n                list.add(tmp);\n                tmp = null;\n                ops && ops.created.push(key);\n            }\n        });\n\n        // now remove any variable that is not in source object\n        // @note - using direct `this.reference` list of keys here so that we can mutate the list while iterating\n        // on it\n        if (prune !== false) {\n            _.forEach(list.reference, function (value, key) {\n                if (_.has(obj, key)) { return; } // de not delete if source obj has this variable\n                list.remove(key); // use PropertyList functions to remove so that the .members array is cleared too\n                ops && ops.deleted.push(key);\n            });\n        }\n\n        return ops;\n    },\n\n    /**\n     * Transfer all variables from this list to an object\n     *\n     * @param {Object=} [obj] -\n     * @returns {Object}\n     */\n    syncToObject (obj) {\n        var list = this;\n\n        // in case user did not provide an object to mutate, create a new one\n        !_.isObject(obj) && (obj = {});\n\n        // delete extra variables from object that are not present in list\n        _.forEach(obj, function (value, key) {\n            !_.has(list.reference, key) && (delete obj[key]);\n        });\n\n        // we first sync all variables in this list to the object\n        list.each(function (variable) {\n            obj[variable.key] = variable.valueOf();\n        });\n\n        return obj;\n    },\n\n    /**\n     * Fetches a variable and normalize its reference if disabled.\n     * This updates the disabled variable `reference` in VariableList with its\n     * last enabled duplicate(if found) in the `members` list.\n     *\n     * @private\n     * @param {String} variableName - The name of the variable to get\n     * @returns {Variable} - In case of duplicates, returns last enabled\n     */\n    oneNormalizedVariable (variableName) {\n        var indexKey = this._postman_listIndexKey, // `key` for Variable\n            variable = this.reference[variableName],\n            i;\n\n        if (variable && !variable.disabled) {\n            return variable;\n        }\n\n        // traverse the members list in reverse direction in order to find the last enabled\n        for (i = this.members.length - 1; i >= 0; i--) {\n            variable = this.members[i];\n            if (variable[indexKey] === variableName && !variable.disabled) {\n                // update the input variable reference if comparison is not disabled\n                this.reference[variableName] = variable;\n                break; // return updated reference variable\n            }\n        }\n\n        return this.reference[variableName];\n    }\n});\n\n_.assign(VariableList, /** @lends VariableList */ {\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     *\n     * @note that this is directly accessed only in case of VariableList from _.findValue lodash util mixin\n     */\n    _postman_propertyName: 'VariableList',\n\n    /**\n     * Checks whether an object is a VariableList\n     *\n     * @param {*} obj -\n     * @returns {Boolean}\n     */\n    isVariableList: function (obj) {\n        return Boolean(obj) && ((obj instanceof VariableList) ||\n            _.inSuperChain(obj.constructor, '_postman_propertyName', VariableList._postman_propertyName));\n    }\n});\n\nmodule.exports = {\n    VariableList\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}