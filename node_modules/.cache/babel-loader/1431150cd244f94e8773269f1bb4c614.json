{"ast":null,"code":"var util = require('../util'),\n  _ = util.lodash,\n  E = '',\n  SPC = ' ',\n  CRLF = '\\r\\n',\n  HEADER_KV_SEPARATOR = ':',\n  Property = require('./property').Property,\n  PropertyList = require('./property-list').PropertyList,\n  Header;\n\n/**\n * @typedef Header.definition\n * @property {String} key The Header name (e.g: 'Content-Type')\n * @property {String} value The value of the header.\n *\n * @example <caption>Create a header</caption>\n * var Header = require('postman-collection').Header,\n *     header = new Header({\n *         key: 'Content-Type',\n *         value: 'application/xml'\n *     });\n *\n * console.log(header.toString()) // prints the string representation of the Header.\n */\n_.inherit(\n/**\n * Represents an HTTP header, for requests or for responses.\n *\n * @constructor\n * @extends {Property}\n *\n * @param {Header.definition|String} options - Pass the header definition as an object or the value of the header.\n * If the value is passed as a string, it should either be in `name:value` format or the second \"name\" parameter\n * should be used to pass the name as string\n * @param {String} [name] - optional override the header name or use when the first parameter is the header value as\n * string.\n *\n * @example <caption>Parse a string of headers into an array of Header objects</caption>\n * var Header = require('postman-collection').Header,\n *     headerString = 'Content-Type: application/json\\nUser-Agent: MyClientLibrary/2.0\\n';\n *\n * var rawHeaders = Header.parse(headerString);\n * console.log(rawHeaders); // [{ 'Content-Type': 'application/json', 'User-Agent': 'MyClientLibrary/2.0' }]\n *\n * var headers = rawHeaders.map(function (h) {\n *     return new Header(h);\n * });\n *\n * function assert(condition, message) {\n *       if (!condition) {\n *           message = message || \"Assertion failed\";\n *           if (typeof Error !== \"undefined\") {\n *               throw new Error(message);\n *           }\n *           throw message; //fallback\n *       }\n *       else {\n *           console.log(\"Assertion passed\");\n *       }\n *   }\n *\n * assert(headerString.trim() === Header.unparse(headers).trim());\n */\nHeader = function PostmanHeader(options, name) {\n  if (_.isString(options)) {\n    options = _.isString(name) ? {\n      key: name,\n      value: options\n    } : Header.parseSingle(options);\n  }\n\n  // this constructor is intended to inherit and as such the super constructor is required to be executed\n  Header.super_.apply(this, arguments);\n  this.update(options);\n}, Property);\n_.assign(Header.prototype, /** @lends Header.prototype */{\n  /**\n   * Converts the header to a single header string.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this.key + ': ' + this.value;\n  },\n  /**\n   * Return the value of this header.\n   *\n   * @returns {String}\n   */\n  valueOf() {\n    return this.value;\n  },\n  /**\n   * Assigns the given properties to the Header\n   *\n   * @param {Object} options -\n   * @todo check for allowed characters in header key-value or store encoded.\n   */\n  update(options) {\n    /**\n     * The header Key\n     *\n     * @type {String}\n     * @todo avoid headers with falsy key.\n     */\n    this.key = _.get(options, 'key') || E;\n\n    /**\n     * The header value\n     *\n     * @type {String}\n     */\n    this.value = _.get(options, 'value', E);\n\n    /**\n     * Indicates whether the header was added by internal SDK operations, such as authorizing a request.\n     *\n     * @type {*|boolean}\n     */\n    _.has(options, 'system') && (this.system = options.system);\n\n    /**\n     * Indicates whether the header should be .\n     *\n     * @type {*|boolean}\n     * @todo figure out whether this should be in property.js\n     */\n    _.has(options, 'disabled') && (this.disabled = options.disabled);\n  }\n});\n_.assign(Header, /** @lends Header */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'Header',\n  /**\n   * Specify the key to be used while indexing this object\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyIndexKey: 'key',\n  /**\n   * Specifies whether the index lookup of this property, when in a list is case insensitive or not\n   *\n   * @private\n   * @readOnly\n   * @type {boolean}\n   */\n  _postman_propertyIndexCaseInsensitive: true,\n  /**\n   * Since each header may have multiple possible values, this is set to true.\n   *\n   * @private\n   * @readOnly\n   * @type {Boolean}\n   */\n  _postman_propertyAllowsMultipleValues: true,\n  /**\n   * Parses a multi line header string into an array of {@link Header.definition}.\n   *\n   * @param {String} headerString -\n   * @returns {Array}\n   */\n  parse: function (headerString) {\n    var headers = [],\n      regexes = {\n        header: /^(\\S+):(.*)$/gm,\n        fold: /\\r\\n([ \\t])/g,\n        trim: /^\\s*(.*\\S)?\\s*$/ // eslint-disable-line security/detect-unsafe-regex\n      },\n      match = regexes.header.exec(headerString);\n    headerString = headerString.toString().replace(regexes.fold, '$1');\n    while (match) {\n      headers.push({\n        key: match[1],\n        value: match[2].replace(regexes.trim, '$1')\n      });\n      match = regexes.header.exec(headerString);\n    }\n    return headers;\n  },\n  /**\n   * Parses a single Header.\n   *\n   * @param {String} header -\n   * @returns {{key: String, value: String}}\n   */\n  parseSingle: function (header) {\n    if (!_.isString(header)) {\n      return {\n        key: E,\n        value: E\n      };\n    }\n    var index = header.indexOf(HEADER_KV_SEPARATOR),\n      key,\n      value;\n    index < 0 && (index = header.length);\n    key = header.substr(0, index);\n    value = header.substr(index + 1);\n    return {\n      key: _.trim(key),\n      value: _.trim(value)\n    };\n  },\n  /**\n   * Stringifies an Array or {@link PropertyList} of Headers into a single string.\n   *\n   * @note Disabled headers are excluded.\n   *\n   * @param {Array|PropertyList<Header>} headers -\n   * @param {String=} [separator='\\r\\n'] - Specify a string for separating each header\n   * @returns {String}\n   */\n  unparse: function (headers) {\n    let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CRLF;\n    if (!_.isArray(headers) && !PropertyList.isPropertyList(headers)) {\n      return E;\n    }\n    return headers.reduce(function (acc, header) {\n      if (header && !header.disabled) {\n        acc += Header.unparseSingle(header) + separator;\n      }\n      return acc;\n    }, E);\n  },\n  /**\n   * Unparses a single Header.\n   *\n   * @param {String} header -\n   * @returns {String}\n   */\n  unparseSingle: function (header) {\n    if (!_.isObject(header)) {\n      return E;\n    }\n    return header.key + HEADER_KV_SEPARATOR + SPC + header.value;\n  },\n  /**\n   * Check whether an object is an instance of PostmanHeader.\n   *\n   * @param {*} obj -\n   * @returns {Boolean}\n   */\n  isHeader: function (obj) {\n    return Boolean(obj) && (obj instanceof Header || _.inSuperChain(obj.constructor, '_postman_propertyName', Header._postman_propertyName));\n  },\n  /* eslint-disable jsdoc/check-param-names */\n  /**\n   * Create a new header instance\n   *\n   * @param {Header.definition|String} [value] - Pass the header definition as an object or the value of the header.\n   * If the value is passed as a string, it should either be in `name:value` format or the second \"name\" parameter\n   * should be used to pass the name as string\n   * @param {String} [name] - optional override the header name or use when the first parameter is the header value as\n   * string.\n   * @returns {Header}\n   */\n  create: function () {\n    var args = Array.prototype.slice.call(arguments);\n    args.unshift(Header);\n    return new (Header.bind.apply(Header, args))(); // eslint-disable-line prefer-spread\n  }\n  /* eslint-enable jsdoc/check-param-names */\n});\n\nmodule.exports = {\n  Header\n};","map":{"version":3,"names":["util","require","_","lodash","E","SPC","CRLF","HEADER_KV_SEPARATOR","Property","PropertyList","Header","inherit","PostmanHeader","options","name","isString","key","value","parseSingle","super_","apply","arguments","update","assign","prototype","toString","valueOf","get","has","system","disabled","_postman_propertyName","_postman_propertyIndexKey","_postman_propertyIndexCaseInsensitive","_postman_propertyAllowsMultipleValues","parse","headerString","headers","regexes","header","fold","trim","match","exec","replace","push","index","indexOf","length","substr","unparse","separator","isArray","isPropertyList","reduce","acc","unparseSingle","isObject","isHeader","obj","Boolean","inSuperChain","constructor","create","args","Array","slice","call","unshift","bind","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/header.js"],"sourcesContent":["var util = require('../util'),\n    _ = util.lodash,\n\n    E = '',\n    SPC = ' ',\n    CRLF = '\\r\\n',\n    HEADER_KV_SEPARATOR = ':',\n\n    Property = require('./property').Property,\n    PropertyList = require('./property-list').PropertyList,\n    Header;\n\n/**\n * @typedef Header.definition\n * @property {String} key The Header name (e.g: 'Content-Type')\n * @property {String} value The value of the header.\n *\n * @example <caption>Create a header</caption>\n * var Header = require('postman-collection').Header,\n *     header = new Header({\n *         key: 'Content-Type',\n *         value: 'application/xml'\n *     });\n *\n * console.log(header.toString()) // prints the string representation of the Header.\n */\n_.inherit((\n\n    /**\n     * Represents an HTTP header, for requests or for responses.\n     *\n     * @constructor\n     * @extends {Property}\n     *\n     * @param {Header.definition|String} options - Pass the header definition as an object or the value of the header.\n     * If the value is passed as a string, it should either be in `name:value` format or the second \"name\" parameter\n     * should be used to pass the name as string\n     * @param {String} [name] - optional override the header name or use when the first parameter is the header value as\n     * string.\n     *\n     * @example <caption>Parse a string of headers into an array of Header objects</caption>\n     * var Header = require('postman-collection').Header,\n     *     headerString = 'Content-Type: application/json\\nUser-Agent: MyClientLibrary/2.0\\n';\n     *\n     * var rawHeaders = Header.parse(headerString);\n     * console.log(rawHeaders); // [{ 'Content-Type': 'application/json', 'User-Agent': 'MyClientLibrary/2.0' }]\n     *\n     * var headers = rawHeaders.map(function (h) {\n     *     return new Header(h);\n     * });\n     *\n     * function assert(condition, message) {\n     *       if (!condition) {\n     *           message = message || \"Assertion failed\";\n     *           if (typeof Error !== \"undefined\") {\n     *               throw new Error(message);\n     *           }\n     *           throw message; //fallback\n     *       }\n     *       else {\n     *           console.log(\"Assertion passed\");\n     *       }\n     *   }\n     *\n     * assert(headerString.trim() === Header.unparse(headers).trim());\n     */\n    Header = function PostmanHeader (options, name) {\n        if (_.isString(options)) {\n            options = _.isString(name) ? { key: name, value: options } : Header.parseSingle(options);\n        }\n\n        // this constructor is intended to inherit and as such the super constructor is required to be executed\n        Header.super_.apply(this, arguments);\n\n        this.update(options);\n    }), Property);\n\n_.assign(Header.prototype, /** @lends Header.prototype */ {\n    /**\n     * Converts the header to a single header string.\n     *\n     * @returns {String}\n     */\n    toString () {\n        return this.key + ': ' + this.value;\n    },\n\n    /**\n     * Return the value of this header.\n     *\n     * @returns {String}\n     */\n    valueOf () {\n        return this.value;\n    },\n\n    /**\n     * Assigns the given properties to the Header\n     *\n     * @param {Object} options -\n     * @todo check for allowed characters in header key-value or store encoded.\n     */\n    update (options) {\n        /**\n         * The header Key\n         *\n         * @type {String}\n         * @todo avoid headers with falsy key.\n         */\n        this.key = _.get(options, 'key') || E;\n\n        /**\n         * The header value\n         *\n         * @type {String}\n         */\n        this.value = _.get(options, 'value', E);\n\n        /**\n         * Indicates whether the header was added by internal SDK operations, such as authorizing a request.\n         *\n         * @type {*|boolean}\n         */\n        _.has(options, 'system') && (this.system = options.system);\n\n        /**\n         * Indicates whether the header should be .\n         *\n         * @type {*|boolean}\n         * @todo figure out whether this should be in property.js\n         */\n        _.has(options, 'disabled') && (this.disabled = options.disabled);\n    }\n});\n\n_.assign(Header, /** @lends Header */ {\n\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'Header',\n\n    /**\n     * Specify the key to be used while indexing this object\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyIndexKey: 'key',\n\n    /**\n     * Specifies whether the index lookup of this property, when in a list is case insensitive or not\n     *\n     * @private\n     * @readOnly\n     * @type {boolean}\n     */\n    _postman_propertyIndexCaseInsensitive: true,\n\n    /**\n     * Since each header may have multiple possible values, this is set to true.\n     *\n     * @private\n     * @readOnly\n     * @type {Boolean}\n     */\n    _postman_propertyAllowsMultipleValues: true,\n\n    /**\n     * Parses a multi line header string into an array of {@link Header.definition}.\n     *\n     * @param {String} headerString -\n     * @returns {Array}\n     */\n    parse: function (headerString) {\n        var headers = [],\n            regexes = {\n                header: /^(\\S+):(.*)$/gm,\n                fold: /\\r\\n([ \\t])/g,\n                trim: /^\\s*(.*\\S)?\\s*$/ // eslint-disable-line security/detect-unsafe-regex\n            },\n            match = regexes.header.exec(headerString);\n\n        headerString = headerString.toString().replace(regexes.fold, '$1');\n\n        while (match) {\n            headers.push({\n                key: match[1],\n                value: match[2].replace(regexes.trim, '$1')\n            });\n            match = regexes.header.exec(headerString);\n        }\n\n        return headers;\n    },\n\n    /**\n     * Parses a single Header.\n     *\n     * @param {String} header -\n     * @returns {{key: String, value: String}}\n     */\n    parseSingle: function (header) {\n        if (!_.isString(header)) { return { key: E, value: E }; }\n\n        var index = header.indexOf(HEADER_KV_SEPARATOR),\n            key,\n            value;\n\n        (index < 0) && (index = header.length);\n\n        key = header.substr(0, index);\n        value = header.substr(index + 1);\n\n        return {\n            key: _.trim(key),\n            value: _.trim(value)\n        };\n    },\n\n    /**\n     * Stringifies an Array or {@link PropertyList} of Headers into a single string.\n     *\n     * @note Disabled headers are excluded.\n     *\n     * @param {Array|PropertyList<Header>} headers -\n     * @param {String=} [separator='\\r\\n'] - Specify a string for separating each header\n     * @returns {String}\n     */\n    unparse: function (headers, separator = CRLF) {\n        if (!_.isArray(headers) && !PropertyList.isPropertyList(headers)) {\n            return E;\n        }\n\n        return headers.reduce(function (acc, header) {\n            if (header && !header.disabled) {\n                acc += Header.unparseSingle(header) + separator;\n            }\n\n            return acc;\n        }, E);\n    },\n\n    /**\n     * Unparses a single Header.\n     *\n     * @param {String} header -\n     * @returns {String}\n     */\n    unparseSingle: function (header) {\n        if (!_.isObject(header)) { return E; }\n\n        return header.key + HEADER_KV_SEPARATOR + SPC + header.value;\n    },\n\n    /**\n     * Check whether an object is an instance of PostmanHeader.\n     *\n     * @param {*} obj -\n     * @returns {Boolean}\n     */\n    isHeader: function (obj) {\n        return Boolean(obj) && ((obj instanceof Header) ||\n            _.inSuperChain(obj.constructor, '_postman_propertyName', Header._postman_propertyName));\n    },\n\n    /* eslint-disable jsdoc/check-param-names */\n    /**\n     * Create a new header instance\n     *\n     * @param {Header.definition|String} [value] - Pass the header definition as an object or the value of the header.\n     * If the value is passed as a string, it should either be in `name:value` format or the second \"name\" parameter\n     * should be used to pass the name as string\n     * @param {String} [name] - optional override the header name or use when the first parameter is the header value as\n     * string.\n     * @returns {Header}\n     */\n    create: function () {\n        var args = Array.prototype.slice.call(arguments);\n\n        args.unshift(Header);\n\n        return new (Header.bind.apply(Header, args))(); // eslint-disable-line prefer-spread\n    }\n    /* eslint-enable jsdoc/check-param-names */\n});\n\nmodule.exports = {\n    Header\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}