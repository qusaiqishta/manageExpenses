{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\nvar isUrl = /^https?:/;\nfunction Redirect(request) {\n  this.request = request;\n  this.followRedirect = true;\n  this.followRedirects = true;\n  this.followAllRedirects = false;\n  this.followOriginalHttpMethod = false;\n  this.followAuthorizationHeader = false;\n  this.allowRedirect = function () {\n    return true;\n  };\n  this.maxRedirects = 10;\n  this.redirects = [];\n  this.redirectsFollowed = 0;\n  this.removeRefererHeader = false;\n}\nRedirect.prototype.onRequest = function (options) {\n  var self = this;\n  if (options.maxRedirects !== undefined) {\n    self.maxRedirects = options.maxRedirects;\n  }\n  if (typeof options.followRedirect === 'function') {\n    self.allowRedirect = options.followRedirect;\n  }\n  if (options.followRedirect !== undefined) {\n    self.followRedirects = !!options.followRedirect;\n  }\n  if (options.followAllRedirects !== undefined) {\n    self.followAllRedirects = options.followAllRedirects;\n  }\n  if (self.followRedirects || self.followAllRedirects) {\n    self.redirects = self.redirects || [];\n  }\n  if (options.removeRefererHeader !== undefined) {\n    self.removeRefererHeader = options.removeRefererHeader;\n  }\n  if (options.followOriginalHttpMethod !== undefined) {\n    self.followOriginalHttpMethod = options.followOriginalHttpMethod;\n  }\n  if (options.followAuthorizationHeader !== undefined) {\n    self.followAuthorizationHeader = options.followAuthorizationHeader;\n  }\n};\nRedirect.prototype.redirectTo = function (response) {\n  var self = this;\n  var request = self.request;\n  var redirectTo = null;\n  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {\n    var location = response.caseless.get('location');\n    request.debug('redirect', location);\n    if (self.followAllRedirects) {\n      redirectTo = location;\n    } else if (self.followRedirects) {\n      switch (request.method) {\n        case 'PATCH':\n        case 'PUT':\n        case 'POST':\n        case 'DELETE':\n          // Do not follow redirects\n          break;\n        default:\n          redirectTo = location;\n          break;\n      }\n    }\n  } else if (response.statusCode === 401) {\n    // retry the request with the new Authorization header value using\n    // WWW-Authenticate response header.\n    // https://tools.ietf.org/html/rfc7235#section-3.1\n    var authHeader = request._auth.onResponse(response);\n    if (authHeader) {\n      request.setHeader('Authorization', authHeader);\n      redirectTo = request.uri;\n    }\n  }\n  return redirectTo;\n};\nRedirect.prototype.onResponse = function (response) {\n  var self = this;\n  var request = self.request;\n  var urlParser = request.urlParser;\n  var options = {};\n  var redirectTo = self.redirectTo(response);\n  if (!redirectTo || !self.allowRedirect.call(request, response)) {\n    return false;\n  }\n  request.debug('redirect to', redirectTo);\n\n  // ignore any potential response body.  it cannot possibly be useful\n  // to us at this point.\n  // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n  if (response.resume) {\n    response.resume();\n  }\n  if (self.redirectsFollowed >= self.maxRedirects) {\n    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href));\n    return false;\n  }\n  self.redirectsFollowed += 1;\n  if (!isUrl.test(redirectTo)) {\n    redirectTo = urlParser.resolve(request.uri.href, redirectTo);\n  }\n  var uriPrev = request.uri;\n  request.uri = urlParser.parse(redirectTo);\n\n  // handle the case where we change protocol from https to http or vice versa\n  if (request.uri.protocol !== uriPrev.protocol) {\n    delete request.agent;\n  }\n  self.redirects.push({\n    statusCode: response.statusCode,\n    redirectUri: redirectTo\n  });\n\n  // if the redirect hostname (not just port or protocol) is changed:\n  //  1. remove host header, the new host will be populated on request.init\n  //  2. remove authorization header, avoid authentication leak\n  // @note: This is done because of security reasons, irrespective of the\n  // status code or request method used.\n  if (request.headers && uriPrev.hostname !== request.uri.hostname) {\n    request.removeHeader('host');\n\n    // use followAuthorizationHeader option to retain authorization header\n    if (!self.followAuthorizationHeader) {\n      request.removeHeader('authorization');\n    }\n  }\n  delete request.src;\n  delete request.req;\n  delete request._started;\n\n  // Switch request method to GET\n  // - if followOriginalHttpMethod is not set [OVERRIDE]\n  // - or, statusCode code is not 401, 307 or 308 [STANDARD]\n  // - also, remove request body for the GET redirect [STANDARD]\n  // @note: when followOriginalHttpMethod is set,\n  // it will always retain the request body irrespective of the method (say GET) or status code (any 3XX).\n  if (!self.followOriginalHttpMethod && response.statusCode !== 401 && response.statusCode !== 307 && response.statusCode !== 308) {\n    // force all redirects to use GET (legacy reasons)\n    // but, HEAD is considered as a safe method so, the method is retained.\n    if (request.method !== 'HEAD') {\n      request.method = 'GET';\n    }\n\n    // Remove parameters from the previous response, unless this is the second request\n    // for a server that requires digest authentication.\n    delete request.body;\n    delete request._form;\n    delete request._multipart;\n    if (request.headers) {\n      request.removeHeader('content-type');\n      request.removeHeader('content-length');\n    }\n  }\n\n  // Restore form-data stream if request body is retained\n  if (request.formData &&\n  // make sure _form is released and there's no pending _streams left\n  // which will be the case for 401 redirects. so, reuse _form on redirect\n  // @note: multiple form-param / file-streams may cause following issue:\n  // https://github.com/request/request/issues/887\n  // @todo: expose stream errors as events\n  request._form && request._form._released && request._form._streams && !request._form._streams.length) {\n    // reinitialize FormData stream for 307 or 308 redirects\n    delete request._form;\n    // remove content-type header for new boundary\n    request.removeHeader('content-type');\n    // remove content-length header since FormValue may be dropped if its not a file stream\n    request.removeHeader('content-length');\n    var formData = [];\n    var resetFormData = function (key, value, paramOptions) {\n      // if `value` is of type stream\n      if (typeof (value && value.pipe) === 'function') {\n        // bail out if not a file stream\n        if (!(value.hasOwnProperty('fd') && value.path)) return;\n        // create new file stream\n        value = fs.createReadStream(value.path);\n      }\n      formData.push({\n        key: key,\n        value: value,\n        options: paramOptions\n      });\n    };\n    for (var i = 0, ii = request.formData.length; i < ii; i++) {\n      var formParam = request.formData[i];\n      if (!formParam) {\n        continue;\n      }\n      resetFormData(formParam.key, formParam.value, formParam.options);\n    }\n\n    // setting `options.formData` will reinitialize FormData in `request.init`\n    options.formData = formData;\n  }\n  if (!self.removeRefererHeader) {\n    request.setHeader('Referer', uriPrev.href);\n  }\n  request.emit('redirect');\n  request.init(options);\n  return true;\n};\nexports.Redirect = Redirect;","map":{"version":3,"names":["fs","require","isUrl","Redirect","request","followRedirect","followRedirects","followAllRedirects","followOriginalHttpMethod","followAuthorizationHeader","allowRedirect","maxRedirects","redirects","redirectsFollowed","removeRefererHeader","prototype","onRequest","options","self","undefined","redirectTo","response","statusCode","caseless","has","location","get","debug","method","authHeader","_auth","onResponse","setHeader","uri","urlParser","call","resume","emit","Error","href","test","resolve","uriPrev","parse","protocol","agent","push","redirectUri","headers","hostname","removeHeader","src","req","_started","body","_form","_multipart","formData","_released","_streams","length","resetFormData","key","value","paramOptions","pipe","hasOwnProperty","path","createReadStream","i","ii","formParam","init","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-request/lib/redirect.js"],"sourcesContent":["'use strict'\n\nvar fs = require('fs')\nvar isUrl = /^https?:/\n\nfunction Redirect (request) {\n  this.request = request\n  this.followRedirect = true\n  this.followRedirects = true\n  this.followAllRedirects = false\n  this.followOriginalHttpMethod = false\n  this.followAuthorizationHeader = false\n  this.allowRedirect = function () { return true }\n  this.maxRedirects = 10\n  this.redirects = []\n  this.redirectsFollowed = 0\n  this.removeRefererHeader = false\n}\n\nRedirect.prototype.onRequest = function (options) {\n  var self = this\n\n  if (options.maxRedirects !== undefined) {\n    self.maxRedirects = options.maxRedirects\n  }\n  if (typeof options.followRedirect === 'function') {\n    self.allowRedirect = options.followRedirect\n  }\n  if (options.followRedirect !== undefined) {\n    self.followRedirects = !!options.followRedirect\n  }\n  if (options.followAllRedirects !== undefined) {\n    self.followAllRedirects = options.followAllRedirects\n  }\n  if (self.followRedirects || self.followAllRedirects) {\n    self.redirects = self.redirects || []\n  }\n  if (options.removeRefererHeader !== undefined) {\n    self.removeRefererHeader = options.removeRefererHeader\n  }\n  if (options.followOriginalHttpMethod !== undefined) {\n    self.followOriginalHttpMethod = options.followOriginalHttpMethod\n  }\n  if (options.followAuthorizationHeader !== undefined) {\n    self.followAuthorizationHeader = options.followAuthorizationHeader\n  }\n}\n\nRedirect.prototype.redirectTo = function (response) {\n  var self = this\n  var request = self.request\n\n  var redirectTo = null\n  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {\n    var location = response.caseless.get('location')\n    request.debug('redirect', location)\n\n    if (self.followAllRedirects) {\n      redirectTo = location\n    } else if (self.followRedirects) {\n      switch (request.method) {\n        case 'PATCH':\n        case 'PUT':\n        case 'POST':\n        case 'DELETE':\n          // Do not follow redirects\n          break\n        default:\n          redirectTo = location\n          break\n      }\n    }\n  } else if (response.statusCode === 401) {\n    // retry the request with the new Authorization header value using\n    // WWW-Authenticate response header.\n    // https://tools.ietf.org/html/rfc7235#section-3.1\n    var authHeader = request._auth.onResponse(response)\n    if (authHeader) {\n      request.setHeader('Authorization', authHeader)\n      redirectTo = request.uri\n    }\n  }\n  return redirectTo\n}\n\nRedirect.prototype.onResponse = function (response) {\n  var self = this\n  var request = self.request\n  var urlParser = request.urlParser\n  var options = {}\n\n  var redirectTo = self.redirectTo(response)\n  if (!redirectTo || !self.allowRedirect.call(request, response)) {\n    return false\n  }\n\n  request.debug('redirect to', redirectTo)\n\n  // ignore any potential response body.  it cannot possibly be useful\n  // to us at this point.\n  // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n  if (response.resume) {\n    response.resume()\n  }\n\n  if (self.redirectsFollowed >= self.maxRedirects) {\n    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href))\n    return false\n  }\n  self.redirectsFollowed += 1\n\n  if (!isUrl.test(redirectTo)) {\n    redirectTo = urlParser.resolve(request.uri.href, redirectTo)\n  }\n\n  var uriPrev = request.uri\n  request.uri = urlParser.parse(redirectTo)\n\n  // handle the case where we change protocol from https to http or vice versa\n  if (request.uri.protocol !== uriPrev.protocol) {\n    delete request.agent\n  }\n\n  self.redirects.push({ statusCode: response.statusCode, redirectUri: redirectTo })\n\n  // if the redirect hostname (not just port or protocol) is changed:\n  //  1. remove host header, the new host will be populated on request.init\n  //  2. remove authorization header, avoid authentication leak\n  // @note: This is done because of security reasons, irrespective of the\n  // status code or request method used.\n  if (request.headers && uriPrev.hostname !== request.uri.hostname) {\n    request.removeHeader('host')\n\n    // use followAuthorizationHeader option to retain authorization header\n    if (!self.followAuthorizationHeader) {\n      request.removeHeader('authorization')\n    }\n  }\n\n  delete request.src\n  delete request.req\n  delete request._started\n\n  // Switch request method to GET\n  // - if followOriginalHttpMethod is not set [OVERRIDE]\n  // - or, statusCode code is not 401, 307 or 308 [STANDARD]\n  // - also, remove request body for the GET redirect [STANDARD]\n  // @note: when followOriginalHttpMethod is set,\n  // it will always retain the request body irrespective of the method (say GET) or status code (any 3XX).\n  if (!self.followOriginalHttpMethod &&\n    response.statusCode !== 401 && response.statusCode !== 307 && response.statusCode !== 308) {\n      // force all redirects to use GET (legacy reasons)\n      // but, HEAD is considered as a safe method so, the method is retained.\n    if (request.method !== 'HEAD') {\n      request.method = 'GET'\n    }\n\n    // Remove parameters from the previous response, unless this is the second request\n    // for a server that requires digest authentication.\n    delete request.body\n    delete request._form\n    delete request._multipart\n    if (request.headers) {\n      request.removeHeader('content-type')\n      request.removeHeader('content-length')\n    }\n  }\n\n  // Restore form-data stream if request body is retained\n  if (request.formData &&\n      // make sure _form is released and there's no pending _streams left\n      // which will be the case for 401 redirects. so, reuse _form on redirect\n      // @note: multiple form-param / file-streams may cause following issue:\n      // https://github.com/request/request/issues/887\n      // @todo: expose stream errors as events\n      request._form && request._form._released &&\n      request._form._streams && !request._form._streams.length) {\n    // reinitialize FormData stream for 307 or 308 redirects\n    delete request._form\n    // remove content-type header for new boundary\n    request.removeHeader('content-type')\n    // remove content-length header since FormValue may be dropped if its not a file stream\n    request.removeHeader('content-length')\n\n    var formData = []\n    var resetFormData = function (key, value, paramOptions) {\n      // if `value` is of type stream\n      if (typeof (value && value.pipe) === 'function') {\n        // bail out if not a file stream\n        if (!(value.hasOwnProperty('fd') && value.path)) return\n        // create new file stream\n        value = fs.createReadStream(value.path)\n      }\n\n      formData.push({key: key, value: value, options: paramOptions})\n    }\n    for (var i = 0, ii = request.formData.length; i < ii; i++) {\n      var formParam = request.formData[i]\n      if (!formParam) { continue }\n      resetFormData(formParam.key, formParam.value, formParam.options)\n    }\n\n    // setting `options.formData` will reinitialize FormData in `request.init`\n    options.formData = formData\n  }\n\n  if (!self.removeRefererHeader) {\n    request.setHeader('Referer', uriPrev.href)\n  }\n\n  request.emit('redirect')\n\n  request.init(options)\n\n  return true\n}\n\nexports.Redirect = Redirect\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}