{"ast":null,"code":"/* eslint-disable object-shorthand */\nvar _ = require('lodash').noConflict(),\n  util = require('../../util'),\n  v2Common = require('../../common/v2'),\n  Builders = function (options) {\n    this.options = options || {};\n  };\n_.assign(Builders.prototype, {\n  /**\n   * Converts v2 style auth manifests into their v1 equivalents.\n   *\n   * @param {Object} entityV2  - The v1 auth manifest to be transformed into v1.\n   * @param {?Object} options - The set of options for the current auth cleansing operation.\n   * @param {?Boolean} [options.includeNoauth=false] - When set to true, noauth is set to null.\n   *\n   * @returns {Object} The transformed auth object.\n   */\n  auth: function (entityV2, options) {\n    return util.authMapToArray(entityV2, options);\n  },\n  /**\n   * Constructs a V1 \"events\" object from a V2 Postman entity\n   *\n   * @param {Object} entityV2 - The v2 event object to be converted.\n   * @returns {Object[]} - The resultant v1 script definition.\n   */\n  events: function (entityV2) {\n    // events is treated as the source of truth in v1, so handle that first and bail out.\n    var source = entityV2.events || entityV2.event;\n    if (_.isArray(source)) {\n      // @todo: Improve this to order prerequest events before test events\n      _.forEach(source, function (event) {\n        !event.listen && (event.listen = 'test');\n        if (event.script) {\n          !event.script.type && (event.script.type = 'text/javascript');\n\n          // @todo: Add support for src\n          _.isString(event.script.exec) && (event.script.exec = event.script.exec.split('\\n'));\n        }\n      });\n      return source;\n    }\n  },\n  /**\n   * Facilitates sanitized variable transformations across all levels for v1 collection normalization.\n   *\n   * @param {Object} entity - The wrapper object containing variable definitions.\n   * @param {?Object} options - The set of options for the current variable transformation.\n   * @param {?Object} options.fallback - The set of fallback values to be applied when no variables exist.\n   * @param {?Boolean} options.noDefaults - When set to true, no defaults are applied.\n   * @param {?Boolean} options.retainIds - When set to true, ids are left as is.\n   * @returns {Object[]} - The set of sanitized variables.\n   */\n  variables: function (entity, options) {\n    return util.handleVars(entity, options);\n  },\n  /**\n   * Extracts all subfolders from a v2.0.0 collection or folder\n   *\n   * @param {Object} folderOrCollection - Thw entity to extract child items from.\n   * @returns {Object[]} - The list of extracted folder items.\n   */\n  extractFolderItems: function (folderOrCollection) {\n    if (!folderOrCollection) {\n      return;\n    }\n    var i,\n      self = this,\n      folders = [],\n      items = folderOrCollection.item || folderOrCollection.items;\n    !_.isArray(items) && (items = [items]);\n    for (i = 0; i < items.length; i++) {\n      if (items[i] && (items[i].items || items[i].item)) {\n        folders.push(items[i]);\n        folders = [].concat(folders, self.extractFolderItems(items[i]));\n      }\n    }\n    return folders;\n  },\n  /**\n   * Extracts all requests from a v2.0.0 collection or folder\n   *\n   * @param {Object} folderOrCollection - The object to extract sub-items from.\n   * @returns {Object[]} - The list of extracted folder items.\n   */\n  extractItems: function (folderOrCollection) {\n    if (!folderOrCollection) {\n      return;\n    }\n    var i,\n      self = this,\n      requests = [],\n      isFolder,\n      items = folderOrCollection.item || folderOrCollection.items;\n    !_.isArray(items) && (items = [items]);\n    for (i = 0; i < items.length; i++) {\n      isFolder = items[i] && (items[i].items || items[i].item);\n      if (items[i]) {\n        isFolder ? requests = [].concat(requests, self.extractItems(items[i])) : requests.push(items[i]);\n      }\n    }\n    return requests;\n  },\n  /**\n   * Constructs a monolithic raw HTTP header block from a V2 header array\n   *\n   * @param {Object} item - The wrapper object to extract headers from.\n   * @returns {*|string} - The resultant header string.\n   */\n  headers: function (item) {\n    if (!(item && item.request)) {\n      return;\n    }\n    return _.map(item.request.headers || item.request.header, function (header) {\n      return (header.disabled ? '// ' : '') + header.key + ': ' + header.value;\n    }).join('\\n');\n  },\n  /**\n   * Detects the data mode from a given Postman Collection V2 item\n   *\n   * @param {Object} item - .\n   * @returns {*|number|string}\n   */\n  dataMode: function (item) {\n    return v2Common.modeMap[_.get(item, 'request.body.mode')];\n  },\n  /**\n   * Returns the appropriate request data based on the data mode.\n   *\n   * @param {Object} item - The .\n   * @returns {Object} - The converted request body.\n   */\n  data: function (item) {\n    var self = this,\n      mode = _.get(item, 'request.body.mode'),\n      retainEmpty = this.options.retainEmptyValues;\n    if (mode === 'raw' || mode === 'file' || mode === 'graphql' || !mode) {\n      return retainEmpty ? null : undefined;\n    }\n    return _.map(item.request.body[mode], function (elem) {\n      // Only update the value in v1 if src in v2 is non-empty\n      if (elem && elem.type === 'file' && _.has(elem, 'src')) {\n        elem.value = _.isString(elem.src) || _.isArray(elem.src) ? elem.src : null;\n        delete elem.src;\n      }\n\n      // Prevents empty request body descriptions from showing up in the result, keeps collections clean.\n      elem.description = self.description(elem.description);\n      _.has(elem, 'disabled') && (elem.enabled = !elem.disabled);\n      delete elem.disabled;\n      return elem;\n    });\n  },\n  /**\n   * In case of raw request bodies, this constructs the proper raw data from a V2 item.\n   *\n   * @param {Object} item - The v2 request to derive body information from.\n   * @returns {String} - The inferred v1 request body mode.\n   */\n  rawModeData: function (item) {\n    var mode = _.get(item, 'request.body.mode');\n    if (mode === 'raw') {\n      return item.request.body.raw;\n    } else if (mode === 'file') {\n      return _.get(item.request.body, 'file.src');\n    }\n    return this.options.retainEmptyValues ? null : undefined;\n  },\n  /**\n   * Returns GraphQL data if mode is set to graphql.\n   *\n   * @param {Object} item - The v2 request to derive information form.\n   * @returns {Object} - GraphQL request body.\n   */\n  graphqlModeData: function (item) {\n    var mode = _.get(item, 'request.body.mode');\n    if (mode === 'graphql') {\n      return item.request.body.graphql;\n    }\n    return this.options.retainEmptyValues ? null : undefined;\n  },\n  /**\n   * Creates options for body from v2 format.\n   *\n   * @param {Object} item - The v2 request to derive information form.\n   * @returns {Object} - The converted body options.\n   */\n  dataOptions: function (item) {\n    var options = _.get(item, 'request.body.options'),\n      bodyOptions = {},\n      mode;\n    if (!options) {\n      return;\n    }\n\n    // Convert v2 mode to v1 mode\n    for (mode in v2Common.modeMap) {\n      if (!_.isEmpty(options[mode])) {\n        bodyOptions[v2Common.modeMap[mode]] = options[mode];\n      }\n    }\n    return _.isEmpty(bodyOptions) ? undefined : bodyOptions;\n  },\n  /**\n   * Creates an object of path-variables and their values from a V2 item\n   *\n   * @param {Object} item - The wrapper object containing path variable information.\n   * @returns {Object} - The resultant hash of path variables.\n   */\n  pathVariables: function (item) {\n    var variable = _.get(item, 'request.url.variables') || _.get(item, 'request.url.variable');\n    if (!variable) {\n      return;\n    }\n    return _.transform(variable, function (accumulator, v) {\n      accumulator[v.key || v.id] = v.value; // v2.0.0 supports both key and id, v2.1.0 will drop id support\n    }, {});\n  },\n  /**\n   * Creates a V1 URL from a V2 item\n   *\n   * @param {Object} item - The v2 request to extract the URL from.\n   * @returns {String} - The extracted URL of the request.\n   */\n  url: function (item) {\n    var url = _.get(item, 'request.url');\n    if (_.isString(url)) {\n      return url;\n    }\n    if (!url) {\n      return '';\n    }\n    return util.urlunparse(url);\n  },\n  /**\n   * Extracts test from a V2 collection\n   *\n   * @param {Object} item - The wrapper object to extract test code from.\n   * @returns {String} - The resultant test script code.\n   */\n  tests: function (item) {\n    var allEvents = item.events || item.event,\n      events;\n\n    // Nothing to do if the item has no associated events\n    if (!allEvents) {\n      return;\n    }\n    events = _.filter(allEvents, {\n      listen: 'test'\n    });\n    return _.map(events, function (event) {\n      var tests = _.get(event, 'script.exec');\n\n      // @todo: Possible dead code, remove when confirmed\n      if (_.isArray(tests)) {\n        tests = tests.join('\\n');\n      }\n      return tests;\n    }).join('\\n');\n  },\n  /**\n   * Extracts the pre-request script from an Item\n   *\n   * @param {Object} item - The wrapper object to extract pre-request code from.\n   * @returns {String} - The resultant pre-request script code.\n   */\n  preRequestScript: function (item) {\n    var allEvents = item.events || item.event,\n      events;\n\n    // Nothing to do if the item has no associated events\n    if (!allEvents) {\n      return;\n    }\n    events = _.filter(allEvents, {\n      listen: 'prerequest'\n    });\n    return _.map(events, function (event) {\n      var tests = _.get(event, 'script.exec');\n\n      // @todo: Possible dead code, remove when confirmed\n      if (_.isArray(tests)) {\n        tests = tests.join('\\n');\n      }\n      return tests;\n    }).join('\\n');\n  },\n  /**\n   * Converts a V2 cookie to a V1 cookie.\n   *\n   * @param {Object} cookieV2 - The v2 cookie object to be converted.\n   * @returns {{expirationDate: *, hostOnly: *, httpOnly: *,\n       *          domain: (any), path: (any), secure: *, session: *, value: *, name: *}}\n   */\n  cookie: function (cookieV2) {\n    return {\n      expirationDate: cookieV2.expires,\n      hostOnly: cookieV2.hostOnly,\n      httpOnly: cookieV2.httpOnly,\n      domain: cookieV2.domain,\n      path: cookieV2.path,\n      secure: cookieV2.secure,\n      session: cookieV2.session,\n      value: cookieV2.value,\n      name: cookieV2.key || cookieV2.name\n    };\n  },\n  /**\n   * Converts a V2 response object to a V1 response\n   *\n   * @param {Object} responseV2 - The v2 response to be converted.\n   * @returns {Object} - The converted v1 response.\n   */\n  response: function (responseV2) {\n    var self = this,\n      response = {},\n      handlePartial = self.options.handlePartial,\n      id = responseV2.id || responseV2._postman_id,\n      originalRequest = responseV2.originalRequest || responseV2.request;\n\n    // the true in the next line ensures that we don't recursively go on processing responses in a request.\n    response.request = originalRequest ? self.request({\n      request: originalRequest\n    }, undefined, true) : undefined;\n\n    // add the requestObject to the response (needed by sync)\n    try {\n      response.request && (response.requestObject = JSON.stringify(response.request));\n    } catch (e) {/* It's fine, not a fatal error, just move on. */}\n\n    // do not attempt to regenerate response id here when `retainIds` is set to false\n    // if id is changed here the parent's `responses_order` also needs to be changed\n    // that can't be done yet\n    response.id = id || util.uid();\n    response.name = responseV2.name;\n    response.status = responseV2.status;\n    response.responseCode = {\n      code: responseV2.code,\n      name: responseV2.status,\n      // TODO: get a list of descriptions\n      detail: ''\n    };\n    response.language = responseV2._postman_previewlanguage || _.get(responseV2, '_.postman_previewlanguage') || 'Text';\n    response.previewType = responseV2._postman_previewtype || _.get(responseV2, '_.postman_previewtype') || 'html';\n    response.time = responseV2.responseTime;\n    response.headers = responseV2.headers || responseV2.header;\n    response.cookies = _.map(responseV2.cookies || responseV2.cookie, self.cookie);\n    response.text = responseV2.body;\n    response.rawDataType = 'text';\n    if (handlePartial) {\n      !(responseV2.code || responseV2.status) && (response.responseCode = undefined);\n      responseV2.cookies === undefined && (response.cookies = undefined);\n      responseV2.body === undefined && (response.rawDataType = response.language = response.previewType = undefined);\n    }\n    return response;\n  },\n  /**\n   * Extracts the array of responses from a V2 Item.\n   *\n   * @param {Object} item - The v2 item to extract saved responses from.\n   * @returns {Object[]} - The list of saved response objects for the current request.\n   */\n  responses: function (item) {\n    var self = this,\n      allResponses = item.responses || item.response;\n    if (!allResponses) {\n      return;\n    }\n    return _.map(allResponses, function (response) {\n      return self.response(response, item);\n    });\n  },\n  /**\n   * Creates an ordering field for responses of a V2 Item.\n   *\n   * @param {Object} item - The v2 item to extract saved responses from.\n   * @returns {Object[]} - The order of responses within the V2 Item.\n   */\n  responses_order: function (item) {\n    var allResponses = item.responses || item.response;\n    if (!allResponses) {\n      return [];\n    }\n    return _.map(allResponses, 'id');\n  },\n  /**\n   * Converts a V2 request to a V1 request.\n   *\n   * @param {Object} item - The v2 item to be converted.\n   * @param {Object} collectionId - The collection id related to the current conversion routine.\n   * @param {Boolean} [skipResponses=false] - When set to true, excludes saved responses from the result.\n   * @returns {{id: *, name: *, description: (*|string|builders.description), url: *, collectionId: *, method: *,\n       *          currentHelper: *, helperAttributes: *}|*}\n   */\n  request: function (item, collectionId, skipResponses) {\n    if (!item) {\n      return;\n    }\n    var units = ['headers', 'dataMode', 'data', 'rawModeData', 'graphqlModeData', 'pathVariables', 'tests', 'preRequestScript', 'url', 'dataOptions'],\n      self = this,\n      request,\n      description,\n      currentHelper,\n      helperAttributes,\n      req = item && item.request,\n      v2Auth = req && req.auth,\n      auth = self.auth(req),\n      events = self.events(item),\n      variables = self.variables(item, {\n        retainIds: self.options.retainIds\n      }),\n      url = req && req.url,\n      retainEmpty = self.options.retainEmptyValues,\n      handlePartial = self.options.handlePartial,\n      urlObj = _.isString(url) ? util.urlparse(url) : url,\n      headers = req && (req.headers || req.header),\n      pathVariables = urlObj && (urlObj.variables || urlObj.variable);\n    if (!skipResponses) {\n      units.push('responses');\n      units.push('responses_order');\n    }\n    if (v2Auth && v2Auth.type) {\n      // @todo: Add support for custom auth helpers\n      currentHelper = v2Common.authMap[v2Auth.type];\n      if (util.authMappersFromCurrent[currentHelper]) {\n        _.isArray(v2Auth[v2Auth.type]) && (v2Auth = util.authArrayToMap(req));\n        helperAttributes = util.authMappersFromCurrent[currentHelper](v2Auth[v2Auth.type]);\n      } else {\n        helperAttributes = null;\n      }\n    } else if (v2Auth === null) {\n      currentHelper = null;\n      helperAttributes = null;\n    }\n    request = {\n      // do not attempt to regenerate request id here when `retainIds` is set to false\n      // if id is changed here the parent's `order` also needs to be changed\n      // that can't be done yet\n      id: item.id || item._postman_id || util.uid(),\n      name: item.name,\n      collectionId: collectionId,\n      method: item.request ? item.request.method : undefined,\n      currentHelper: currentHelper,\n      helperAttributes: helperAttributes\n    };\n\n    // add protocolProfileBehavior property from item to the request\n    util.addProtocolProfileBehavior(item, request);\n\n    // only include the dataDisabled flag if truthy\n    if (req && req.body && _.has(req.body, 'disabled') && (req.body.disabled || retainEmpty)) {\n      request.dataDisabled = Boolean(req.body.disabled);\n    }\n    description = item.request && self.description(item.request.description);\n\n    // Prevent empty request descriptions from showing up in the converted result, keeps collections clean.\n    if (description) {\n      request.description = description;\n    } else if (retainEmpty) {\n      request.description = null;\n    }\n    (auth || auth === null) && (request.auth = auth);\n    events && events.length && (request.events = events);\n    variables && variables.length && (request.variables = variables);\n    _.forEach(units, function (unit) {\n      request[unit] = self[unit](item);\n    });\n\n    // description transformations for v2 to v1\n    urlObj && (request.pathVariableData = _.map(pathVariables, function (v) {\n      var result = {\n        key: v.key || v.id,\n        value: v.value\n      };\n\n      // Prevent empty path variable descriptions from showing up in converted results, keeps collections clean.\n      if (v.description) {\n        result.description = self.description(v.description);\n      } else if (retainEmpty) {\n        result.description = null;\n      }\n      return result;\n    }));\n    urlObj && (request.queryParams = _.map(urlObj.query, function (queryParam) {\n      // Prevents empty query param descriptions from showing up in the result, keeps collections clean.\n      queryParam.description = self.description(queryParam.description);\n      _.has(queryParam, 'disabled') && (queryParam.enabled = !queryParam.disabled);\n      delete queryParam.disabled;\n      return queryParam;\n    }));\n\n    // item truthiness is already validated by this point\n    request.headerData = _.map(headers, function (header) {\n      // Prevents empty query param descriptions from showing up in the result, keeps collections clean.\n      header.description = self.description(header.description);\n      _.has(header, 'disabled') && (header.enabled = !header.disabled);\n      delete header.disabled;\n      return header;\n    });\n\n    // In case of a partial transformation, remove undefined fields\n    if (handlePartial) {\n      headers === undefined && (request.headers = request.headerData = undefined);\n      item.responses === undefined && (request.responses = request.responses_order = undefined);\n      url === undefined && (request.url = request.pathVariableData = request.queryParams = undefined);\n    }\n    return request;\n  },\n  /**\n   * Creates a V1 compatible array of requests from a Postman V2 collection.\n   *\n   * @param {Object} collectionV2 - The v2 collection to derive v1 requests from.\n   * @returns {Object[]} - The list of v1 request objects.\n   */\n  requests: function (collectionV2) {\n    var self = this,\n      requests = [],\n      info = collectionV2 && collectionV2.info,\n      id = info && (info.id || info._postman_id) || collectionV2.id;\n    _.forEach(self.extractItems(collectionV2), function (item) {\n      var requestV1 = self.request(item, id);\n      requests.push(requestV1);\n    });\n    return requests;\n  },\n  /**\n   * Creates a V1 compatible array of solo requestIds from a Postman collection V2\n   *\n   * @param {Object} collectionV2 - The v2 collection to be used for request order derivation.\n   * @returns {Object[]} - The request order for the resultant v1 collection.\n   */\n  order: function (collectionV2) {\n    var itemArray = collectionV2.items || collectionV2.item,\n      allItems = _.isArray(itemArray) ? itemArray : [itemArray];\n\n    // eslint-disable-next-line lodash/prefer-compact\n    return _.filter(_.map(allItems, function (item) {\n      if (!item) {\n        return;\n      }\n      var isFolder = item.items || item.item;\n      if (!isFolder) {\n        return item.id || item._postman_id;\n      }\n    }));\n  },\n  /**\n   * Creates a V1 compatible array of folder orders from a Postman collection V2\n   *\n   * @param {Object} folderOrCollection - The object to derive folder order details from.\n   * @returns {Object[]} - The list of folder ids that indicate the order.\n   */\n  folders_order: function (folderOrCollection) {\n    var itemArray = folderOrCollection.items || folderOrCollection.item,\n      allItems = _.isArray(itemArray) ? itemArray : [itemArray];\n\n    // eslint-disable-next-line lodash/prefer-compact\n    return _.filter(_.map(allItems, function (item) {\n      if (!item) {\n        return;\n      }\n      var isFolder = item.items || item.item;\n      if (isFolder) {\n        return item.id || item._postman_id;\n      }\n    }));\n  },\n  /**\n   * Creates an array of V1 compatible folders from a V2 collection\n   *\n   * @param {Object} collectionV2 - The v2 collection to derive folder structure information from.\n   * @returns {Object[]} - The list of folder definitions.\n   */\n  folders: function (collectionV2) {\n    var self = this,\n      retainEmpty = self.options.retainEmptyValues;\n    return _.map(self.extractFolderItems(collectionV2), function (folder) {\n      if (!folder) {\n        return;\n      }\n      var folderItems = folder.items || folder.item,\n        description = self.description(folder.description),\n        auth = self.auth(folder),\n        events = self.events(folder),\n        variables = self.variables(folder, {\n          retainIds: self.options.retainIds\n        }),\n        result = {\n          // do not attempt to regenerate folder id here when `retainIds` is set to false\n          // if id is changed here the parent's `folder_order` also needs to be changed\n          // that can't be done yet\n          id: folder.id || folder._postman_id || util.uid(),\n          name: folder.name,\n          // eslint-disable-next-line lodash/prefer-compact\n          order: _.filter(_.map(folderItems, function (f) {\n            if (!f) {\n              return;\n            }\n            var isFolder = f.items || f.item;\n            return !isFolder && (f.id || f._postman_id);\n          })),\n          folders_order: self.folders_order(folder)\n        };\n      (auth && auth.type || auth === null) && (result.auth = auth);\n      events && events.length && (result.events = events);\n      variables && variables.length && (result.variables = variables);\n      util.addProtocolProfileBehavior(folder, result);\n\n      // Prevent empty folder descriptions from showing up in the result, keeps collections clean.\n      if (description) {\n        result.description = description;\n      } else if (retainEmpty) {\n        result.description = null;\n      }\n      return result;\n    });\n  },\n  /**\n   * Creates the v1.0.0 compatible description string from the v2.0.0 description format.\n   *\n   * @param {Object} descriptionV2 - The v2 style description to be converted\n   *\n   * @returns {String} - The resultant v1 description.\n   */\n  description: function (descriptionV2) {\n    var description,\n      retainEmpty = this.options.retainEmptyValues;\n    description = _.isObject(descriptionV2) ? descriptionV2.content : descriptionV2;\n    if (description) {\n      return description;\n    } else if (retainEmpty) {\n      return null;\n    }\n  }\n});\nmodule.exports = {\n  input: '2.0.0',\n  output: '1.0.0',\n  Builders: Builders,\n  /**\n   * Converts a single V2 item to a V1 request.\n   *\n   * @param {Object} request - The request to be converted.\n   * @param {Object} options - The set of options for request conversion.\n   * @param {Function} callback - The function to be invoked after conversion has completed.\n   */\n  convertSingle: function (request, options, callback) {\n    var builders = new Builders(options),\n      clone = _.cloneDeep(request),\n      converted,\n      err;\n    try {\n      clone = v2Common.populateIds(clone);\n      converted = builders.request(clone);\n    } catch (e) {\n      err = e;\n    }\n    if (callback) {\n      return callback(err, converted);\n    }\n    if (err) {\n      throw err;\n    }\n    return converted;\n  },\n  /**\n   * Converts a single V2 item to a V1 request.\n   *\n   * @param {Object} response - The response to be converted.\n   * @param {Object} options - The set of options for request conversion.\n   * @param {Function} callback - The function to be invoked after conversion has completed.\n   */\n  convertResponse: function (response, options, callback) {\n    var builders = new Builders(options),\n      converted,\n      err;\n    try {\n      converted = builders.response(_.cloneDeep(response));\n    } catch (e) {\n      err = e;\n    }\n    if (callback) {\n      return callback(err, converted);\n    }\n    if (err) {\n      throw err;\n    }\n    return converted;\n  },\n  /**\n   * Converts a V2 collection to a V1 collection (performs ID replacement, etc as necessary).\n   *\n   * @param {Object} collection - The collection to be converted.\n   * @param {Object} options - The set of options for request conversion.\n   * @param {Function} callback - The function to be invoked after conversion has completed.\n   */\n  convert: function (collection, options, callback) {\n    collection = _.cloneDeep(collection);\n    var auth,\n      events,\n      variables,\n      builders = new Builders(options),\n      authOptions = {\n        excludeNoauth: true\n      },\n      varOpts = options && {\n        fallback: options.env,\n        retainIds: options.retainIds\n      },\n      units = ['order', 'folders_order', 'folders', 'requests'],\n      id = _.get(collection, 'info._postman_id') || _.get(collection, 'info.id'),\n      info = collection && collection.info,\n      newCollection = {\n        id: id && options && options.retainIds ? id : util.uid(),\n        name: info && info.name\n      };\n\n    // ensure that each item has an ID\n    collection = v2Common.populateIds(collection);\n    try {\n      // eslint-disable-next-line max-len\n      newCollection.description = builders.description(info && info.description);\n      (auth = builders.auth(collection, authOptions)) && (newCollection.auth = auth);\n      (events = builders.events(collection)) && (newCollection.events = events);\n      (variables = builders.variables(collection, varOpts)) && (newCollection.variables = variables);\n      util.addProtocolProfileBehavior(collection, newCollection);\n      units.forEach(function (unit) {\n        newCollection[unit] = builders[unit](collection);\n      });\n    } catch (e) {\n      if (callback) {\n        return callback(e, null);\n      }\n      throw e;\n    }\n    if (options && options.handlePartial) {\n      !collection.item && (newCollection.requests = newCollection.folders = newCollection.folders_order = newCollection.order = undefined);\n    }\n    if (callback) {\n      return callback(null, newCollection);\n    }\n    return newCollection;\n  }\n};","map":{"version":3,"names":["_","require","noConflict","util","v2Common","Builders","options","assign","prototype","auth","entityV2","authMapToArray","events","source","event","isArray","forEach","listen","script","type","isString","exec","split","variables","entity","handleVars","extractFolderItems","folderOrCollection","i","self","folders","items","item","length","push","concat","extractItems","requests","isFolder","headers","request","map","header","disabled","key","value","join","dataMode","modeMap","get","data","mode","retainEmpty","retainEmptyValues","undefined","body","elem","has","src","description","enabled","rawModeData","raw","graphqlModeData","graphql","dataOptions","bodyOptions","isEmpty","pathVariables","variable","transform","accumulator","v","id","url","urlunparse","tests","allEvents","filter","preRequestScript","cookie","cookieV2","expirationDate","expires","hostOnly","httpOnly","domain","path","secure","session","name","response","responseV2","handlePartial","_postman_id","originalRequest","requestObject","JSON","stringify","e","uid","status","responseCode","code","detail","language","_postman_previewlanguage","previewType","_postman_previewtype","time","responseTime","cookies","text","rawDataType","responses","allResponses","responses_order","collectionId","skipResponses","units","currentHelper","helperAttributes","req","v2Auth","retainIds","urlObj","urlparse","authMap","authMappersFromCurrent","authArrayToMap","method","addProtocolProfileBehavior","dataDisabled","Boolean","unit","pathVariableData","result","queryParams","query","queryParam","headerData","collectionV2","info","requestV1","order","itemArray","allItems","folders_order","folder","folderItems","f","descriptionV2","isObject","content","module","exports","input","output","convertSingle","callback","builders","clone","cloneDeep","converted","err","populateIds","convertResponse","convert","collection","authOptions","excludeNoauth","varOpts","fallback","env","newCollection"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection-transformer/lib/converters/v2.0.0/converter-v2-to-v1.js"],"sourcesContent":["/* eslint-disable object-shorthand */\nvar _ = require('lodash').noConflict(),\n    util = require('../../util'),\n\n    v2Common = require('../../common/v2'),\n\n    Builders = function (options) {\n        this.options = options || {};\n    };\n\n_.assign(Builders.prototype, {\n\n    /**\n     * Converts v2 style auth manifests into their v1 equivalents.\n     *\n     * @param {Object} entityV2  - The v1 auth manifest to be transformed into v1.\n     * @param {?Object} options - The set of options for the current auth cleansing operation.\n     * @param {?Boolean} [options.includeNoauth=false] - When set to true, noauth is set to null.\n     *\n     * @returns {Object} The transformed auth object.\n     */\n    auth: function (entityV2, options) {\n        return util.authMapToArray(entityV2, options);\n    },\n\n    /**\n     * Constructs a V1 \"events\" object from a V2 Postman entity\n     *\n     * @param {Object} entityV2 - The v2 event object to be converted.\n     * @returns {Object[]} - The resultant v1 script definition.\n     */\n    events: function (entityV2) {\n        // events is treated as the source of truth in v1, so handle that first and bail out.\n        var source = entityV2.events || entityV2.event;\n\n        if (_.isArray(source)) {\n            // @todo: Improve this to order prerequest events before test events\n            _.forEach(source, function (event) {\n                !event.listen && (event.listen = 'test');\n\n                if (event.script) {\n                    !event.script.type && (event.script.type = 'text/javascript');\n\n                    // @todo: Add support for src\n                    _.isString(event.script.exec) && (event.script.exec = event.script.exec.split('\\n'));\n                }\n            });\n\n            return source;\n        }\n    },\n\n    /**\n     * Facilitates sanitized variable transformations across all levels for v1 collection normalization.\n     *\n     * @param {Object} entity - The wrapper object containing variable definitions.\n     * @param {?Object} options - The set of options for the current variable transformation.\n     * @param {?Object} options.fallback - The set of fallback values to be applied when no variables exist.\n     * @param {?Boolean} options.noDefaults - When set to true, no defaults are applied.\n     * @param {?Boolean} options.retainIds - When set to true, ids are left as is.\n     * @returns {Object[]} - The set of sanitized variables.\n     */\n    variables: function (entity, options) {\n        return util.handleVars(entity, options);\n    },\n\n    /**\n     * Extracts all subfolders from a v2.0.0 collection or folder\n     *\n     * @param {Object} folderOrCollection - Thw entity to extract child items from.\n     * @returns {Object[]} - The list of extracted folder items.\n     */\n    extractFolderItems: function (folderOrCollection) {\n        if (!folderOrCollection) { return; }\n\n        var i,\n            self = this,\n            folders = [],\n            items = folderOrCollection.item || folderOrCollection.items;\n\n        !_.isArray(items) && (items = [items]);\n\n        for (i = 0; i < items.length; i++) {\n            if (items[i] && (items[i].items || items[i].item)) {\n                folders.push(items[i]);\n                folders = [].concat(folders, self.extractFolderItems(items[i]));\n            }\n        }\n\n        return folders;\n    },\n\n    /**\n     * Extracts all requests from a v2.0.0 collection or folder\n     *\n     * @param {Object} folderOrCollection - The object to extract sub-items from.\n     * @returns {Object[]} - The list of extracted folder items.\n     */\n    extractItems: function (folderOrCollection) {\n        if (!folderOrCollection) { return; }\n\n        var i,\n            self = this,\n            requests = [],\n            isFolder,\n            items = folderOrCollection.item || folderOrCollection.items;\n\n        !_.isArray(items) && (items = [items]);\n        for (i = 0; i < items.length; i++) {\n            isFolder = items[i] && (items[i].items || items[i].item);\n            if (items[i]) {\n                isFolder ? (requests = [].concat(requests, self.extractItems(items[i]))) : requests.push(items[i]);\n            }\n        }\n\n        return requests;\n    },\n\n    /**\n     * Constructs a monolithic raw HTTP header block from a V2 header array\n     *\n     * @param {Object} item - The wrapper object to extract headers from.\n     * @returns {*|string} - The resultant header string.\n     */\n    headers: function (item) {\n        if (!(item && item.request)) { return; }\n\n        return _.map(item.request.headers || item.request.header, function (header) {\n            return (header.disabled ? '// ' : '') + header.key + ': ' + header.value;\n        }).join('\\n');\n    },\n\n    /**\n     * Detects the data mode from a given Postman Collection V2 item\n     *\n     * @param {Object} item - .\n     * @returns {*|number|string}\n     */\n    dataMode: function (item) {\n        return v2Common.modeMap[_.get(item, 'request.body.mode')];\n    },\n\n    /**\n     * Returns the appropriate request data based on the data mode.\n     *\n     * @param {Object} item - The .\n     * @returns {Object} - The converted request body.\n     */\n    data: function (item) {\n        var self = this,\n            mode = _.get(item, 'request.body.mode'),\n            retainEmpty = this.options.retainEmptyValues;\n\n        if (mode === 'raw' || mode === 'file' || mode === 'graphql' || !mode) {\n            return retainEmpty ? null : undefined;\n        }\n\n        return _.map(item.request.body[mode], function (elem) {\n            // Only update the value in v1 if src in v2 is non-empty\n            if (elem && elem.type === 'file' && _.has(elem, 'src')) {\n                elem.value = (_.isString(elem.src) || _.isArray(elem.src)) ? elem.src : null;\n                delete elem.src;\n            }\n\n            // Prevents empty request body descriptions from showing up in the result, keeps collections clean.\n            elem.description = self.description(elem.description);\n            _.has(elem, 'disabled') && (elem.enabled = !elem.disabled);\n\n            delete elem.disabled;\n\n            return elem;\n        });\n    },\n\n    /**\n     * In case of raw request bodies, this constructs the proper raw data from a V2 item.\n     *\n     * @param {Object} item - The v2 request to derive body information from.\n     * @returns {String} - The inferred v1 request body mode.\n     */\n    rawModeData: function (item) {\n        var mode = _.get(item, 'request.body.mode');\n\n        if (mode === 'raw') {\n            return item.request.body.raw;\n        }\n        else if (mode === 'file') {\n            return _.get(item.request.body, 'file.src');\n        }\n\n        return this.options.retainEmptyValues ? null : undefined;\n    },\n\n    /**\n     * Returns GraphQL data if mode is set to graphql.\n     *\n     * @param {Object} item - The v2 request to derive information form.\n     * @returns {Object} - GraphQL request body.\n     */\n    graphqlModeData: function (item) {\n        var mode = _.get(item, 'request.body.mode');\n\n        if (mode === 'graphql') {\n            return item.request.body.graphql;\n        }\n\n        return this.options.retainEmptyValues ? null : undefined;\n    },\n\n    /**\n     * Creates options for body from v2 format.\n     *\n     * @param {Object} item - The v2 request to derive information form.\n     * @returns {Object} - The converted body options.\n     */\n    dataOptions: function (item) {\n        var options = _.get(item, 'request.body.options'),\n            bodyOptions = {},\n            mode;\n\n        if (!options) {\n            return;\n        }\n\n        // Convert v2 mode to v1 mode\n        for (mode in v2Common.modeMap) {\n            if (!_.isEmpty(options[mode])) {\n                bodyOptions[v2Common.modeMap[mode]] = options[mode];\n            }\n        }\n\n        return _.isEmpty(bodyOptions) ? undefined : bodyOptions;\n    },\n\n    /**\n     * Creates an object of path-variables and their values from a V2 item\n     *\n     * @param {Object} item - The wrapper object containing path variable information.\n     * @returns {Object} - The resultant hash of path variables.\n     */\n    pathVariables: function (item) {\n        var variable = _.get(item, 'request.url.variables') || _.get(item, 'request.url.variable');\n\n        if (!variable) { return; }\n\n        return _.transform(variable, function (accumulator, v) {\n            accumulator[v.key || v.id] = v.value; // v2.0.0 supports both key and id, v2.1.0 will drop id support\n        }, {});\n    },\n\n    /**\n     * Creates a V1 URL from a V2 item\n     *\n     * @param {Object} item - The v2 request to extract the URL from.\n     * @returns {String} - The extracted URL of the request.\n     */\n    url: function (item) {\n        var url = _.get(item, 'request.url');\n\n        if (_.isString(url)) {\n            return url;\n        }\n\n        if (!url) {\n            return '';\n        }\n\n        return util.urlunparse(url);\n    },\n\n    /**\n     * Extracts test from a V2 collection\n     *\n     * @param {Object} item - The wrapper object to extract test code from.\n     * @returns {String} - The resultant test script code.\n     */\n    tests: function (item) {\n        var allEvents = item.events || item.event,\n            events;\n\n        // Nothing to do if the item has no associated events\n        if (!allEvents) {\n            return;\n        }\n\n        events = _.filter(allEvents, { listen: 'test' });\n\n        return _.map(events, function (event) {\n            var tests = _.get(event, 'script.exec');\n\n            // @todo: Possible dead code, remove when confirmed\n            if (_.isArray(tests)) {\n                tests = tests.join('\\n');\n            }\n\n            return tests;\n        }).join('\\n');\n    },\n\n    /**\n     * Extracts the pre-request script from an Item\n     *\n     * @param {Object} item - The wrapper object to extract pre-request code from.\n     * @returns {String} - The resultant pre-request script code.\n     */\n    preRequestScript: function (item) {\n        var allEvents = item.events || item.event,\n            events;\n\n        // Nothing to do if the item has no associated events\n        if (!allEvents) {\n            return;\n        }\n\n        events = _.filter(allEvents, { listen: 'prerequest' });\n\n        return _.map(events, function (event) {\n            var tests = _.get(event, 'script.exec');\n\n            // @todo: Possible dead code, remove when confirmed\n            if (_.isArray(tests)) {\n                tests = tests.join('\\n');\n            }\n\n            return tests;\n        }).join('\\n');\n    },\n\n    /**\n     * Converts a V2 cookie to a V1 cookie.\n     *\n     * @param {Object} cookieV2 - The v2 cookie object to be converted.\n     * @returns {{expirationDate: *, hostOnly: *, httpOnly: *,\n         *          domain: (any), path: (any), secure: *, session: *, value: *, name: *}}\n     */\n    cookie: function (cookieV2) {\n        return {\n            expirationDate: cookieV2.expires,\n            hostOnly: cookieV2.hostOnly,\n            httpOnly: cookieV2.httpOnly,\n            domain: cookieV2.domain,\n            path: cookieV2.path,\n            secure: cookieV2.secure,\n            session: cookieV2.session,\n            value: cookieV2.value,\n            name: cookieV2.key || cookieV2.name\n        };\n    },\n\n    /**\n     * Converts a V2 response object to a V1 response\n     *\n     * @param {Object} responseV2 - The v2 response to be converted.\n     * @returns {Object} - The converted v1 response.\n     */\n    response: function (responseV2) {\n        var self = this,\n            response = {},\n            handlePartial = self.options.handlePartial,\n            id = responseV2.id || responseV2._postman_id,\n            originalRequest = responseV2.originalRequest || responseV2.request;\n\n        // the true in the next line ensures that we don't recursively go on processing responses in a request.\n        response.request = originalRequest ? self.request({ request: originalRequest }, undefined, true) : undefined;\n\n        // add the requestObject to the response (needed by sync)\n        try {\n            response.request && (response.requestObject = JSON.stringify(response.request));\n        }\n        catch (e) { /* It's fine, not a fatal error, just move on. */ }\n\n        // do not attempt to regenerate response id here when `retainIds` is set to false\n        // if id is changed here the parent's `responses_order` also needs to be changed\n        // that can't be done yet\n        response.id = id || util.uid();\n        response.name = responseV2.name;\n        response.status = responseV2.status;\n        response.responseCode = {\n            code: responseV2.code,\n            name: responseV2.status,\n            // TODO: get a list of descriptions\n            detail: ''\n        };\n        response.language = responseV2._postman_previewlanguage ||\n            _.get(responseV2, '_.postman_previewlanguage') || 'Text';\n        response.previewType = responseV2._postman_previewtype ||\n            _.get(responseV2, '_.postman_previewtype') || 'html';\n        response.time = responseV2.responseTime;\n        response.headers = responseV2.headers || responseV2.header;\n        response.cookies = _.map(responseV2.cookies || responseV2.cookie, self.cookie);\n        response.text = responseV2.body;\n        response.rawDataType = 'text';\n\n        if (handlePartial) {\n            (!(responseV2.code || responseV2.status)) && (response.responseCode = undefined);\n            (responseV2.cookies === undefined) && (response.cookies = undefined);\n            (responseV2.body === undefined) && (\n                response.rawDataType =\n                response.language =\n                response.previewType = undefined\n            );\n        }\n\n        return response;\n    },\n\n    /**\n     * Extracts the array of responses from a V2 Item.\n     *\n     * @param {Object} item - The v2 item to extract saved responses from.\n     * @returns {Object[]} - The list of saved response objects for the current request.\n     */\n    responses: function (item) {\n        var self = this,\n            allResponses = item.responses || item.response;\n\n        if (!allResponses) { return; }\n\n        return _.map(allResponses, function (response) {\n            return self.response(response, item);\n        });\n    },\n\n    /**\n     * Creates an ordering field for responses of a V2 Item.\n     *\n     * @param {Object} item - The v2 item to extract saved responses from.\n     * @returns {Object[]} - The order of responses within the V2 Item.\n     */\n    responses_order: function (item) {\n        var allResponses = item.responses || item.response;\n\n        if (!allResponses) {\n            return [];\n        }\n\n        return _.map(allResponses, 'id');\n    },\n\n    /**\n     * Converts a V2 request to a V1 request.\n     *\n     * @param {Object} item - The v2 item to be converted.\n     * @param {Object} collectionId - The collection id related to the current conversion routine.\n     * @param {Boolean} [skipResponses=false] - When set to true, excludes saved responses from the result.\n     * @returns {{id: *, name: *, description: (*|string|builders.description), url: *, collectionId: *, method: *,\n         *          currentHelper: *, helperAttributes: *}|*}\n     */\n    request: function (item, collectionId, skipResponses) {\n        if (!item) { return; }\n\n        var units = ['headers', 'dataMode', 'data', 'rawModeData', 'graphqlModeData',\n                'pathVariables', 'tests', 'preRequestScript', 'url', 'dataOptions'],\n            self = this,\n            request,\n            description,\n            currentHelper,\n            helperAttributes,\n            req = item && item.request,\n            v2Auth = req && req.auth,\n            auth = self.auth(req),\n            events = self.events(item),\n            variables = self.variables(item, { retainIds: self.options.retainIds }),\n            url = req && req.url,\n            retainEmpty = self.options.retainEmptyValues,\n            handlePartial = self.options.handlePartial,\n            urlObj = _.isString(url) ? util.urlparse(url) : url,\n            headers = req && (req.headers || req.header),\n            pathVariables = urlObj && (urlObj.variables || urlObj.variable);\n\n        if (!skipResponses) {\n            units.push('responses');\n            units.push('responses_order');\n        }\n\n        if (v2Auth && v2Auth.type) {\n            // @todo: Add support for custom auth helpers\n            currentHelper = v2Common.authMap[v2Auth.type];\n            if (util.authMappersFromCurrent[currentHelper]) {\n                _.isArray(v2Auth[v2Auth.type]) && (v2Auth = util.authArrayToMap(req));\n                helperAttributes = util.authMappersFromCurrent[currentHelper](v2Auth[v2Auth.type]);\n            }\n            else {\n                helperAttributes = null;\n            }\n        }\n        else if (v2Auth === null) {\n            currentHelper = null;\n            helperAttributes = null;\n        }\n\n        request = {\n\n            // do not attempt to regenerate request id here when `retainIds` is set to false\n            // if id is changed here the parent's `order` also needs to be changed\n            // that can't be done yet\n            id: item.id || item._postman_id || util.uid(),\n            name: item.name,\n            collectionId: collectionId,\n            method: item.request ? item.request.method : undefined,\n            currentHelper: currentHelper,\n            helperAttributes: helperAttributes\n        };\n\n        // add protocolProfileBehavior property from item to the request\n        util.addProtocolProfileBehavior(item, request);\n\n        // only include the dataDisabled flag if truthy\n        if (req && req.body && _.has(req.body, 'disabled') && (req.body.disabled || retainEmpty)) {\n            request.dataDisabled = Boolean(req.body.disabled);\n        }\n\n        description = item.request && self.description(item.request.description);\n\n        // Prevent empty request descriptions from showing up in the converted result, keeps collections clean.\n        if (description) { request.description = description; }\n        else if (retainEmpty) { request.description = null; }\n\n        (auth || (auth === null)) && (request.auth = auth);\n        events && events.length && (request.events = events);\n        variables && variables.length && (request.variables = variables);\n\n        _.forEach(units, function (unit) {\n            request[unit] = self[unit](item);\n        });\n\n        // description transformations for v2 to v1\n        urlObj && (request.pathVariableData = _.map(pathVariables, function (v) {\n            var result = { key: v.key || v.id, value: v.value };\n\n            // Prevent empty path variable descriptions from showing up in converted results, keeps collections clean.\n            if (v.description) { result.description = self.description(v.description); }\n            else if (retainEmpty) { result.description = null; }\n\n            return result;\n        }));\n\n        urlObj && (request.queryParams = _.map(urlObj.query, function (queryParam) {\n            // Prevents empty query param descriptions from showing up in the result, keeps collections clean.\n            queryParam.description = self.description(queryParam.description);\n\n            _.has(queryParam, 'disabled') && (queryParam.enabled = !queryParam.disabled);\n            delete queryParam.disabled;\n\n            return queryParam;\n        }));\n\n        // item truthiness is already validated by this point\n        request.headerData = _.map(headers, function (header) {\n            // Prevents empty query param descriptions from showing up in the result, keeps collections clean.\n            header.description = self.description(header.description);\n\n            _.has(header, 'disabled') && (header.enabled = !header.disabled);\n            delete header.disabled;\n\n            return header;\n        });\n\n        // In case of a partial transformation, remove undefined fields\n        if (handlePartial) {\n            (headers === undefined) && (request.headers = request.headerData = undefined);\n            (item.responses === undefined) && (request.responses = request.responses_order = undefined);\n            (url === undefined) && (request.url = request.pathVariableData = request.queryParams = undefined);\n        }\n\n        return request;\n    },\n\n    /**\n     * Creates a V1 compatible array of requests from a Postman V2 collection.\n     *\n     * @param {Object} collectionV2 - The v2 collection to derive v1 requests from.\n     * @returns {Object[]} - The list of v1 request objects.\n     */\n    requests: function (collectionV2) {\n        var self = this,\n            requests = [],\n            info = collectionV2 && collectionV2.info,\n            id = info && (info.id || info._postman_id) || collectionV2.id;\n\n        _.forEach(self.extractItems(collectionV2), function (item) {\n            var requestV1 = self.request(item, id);\n\n            requests.push(requestV1);\n        });\n\n        return requests;\n    },\n\n    /**\n     * Creates a V1 compatible array of solo requestIds from a Postman collection V2\n     *\n     * @param {Object} collectionV2 - The v2 collection to be used for request order derivation.\n     * @returns {Object[]} - The request order for the resultant v1 collection.\n     */\n    order: function (collectionV2) {\n        var itemArray = collectionV2.items || collectionV2.item,\n            allItems = _.isArray(itemArray) ? itemArray : [itemArray];\n\n        // eslint-disable-next-line lodash/prefer-compact\n        return _.filter(_.map(allItems, function (item) {\n            if (!item) { return; }\n\n            var isFolder = (item.items || item.item);\n\n            if (!isFolder) {\n                return item.id || item._postman_id;\n            }\n        }));\n    },\n\n    /**\n     * Creates a V1 compatible array of folder orders from a Postman collection V2\n     *\n     * @param {Object} folderOrCollection - The object to derive folder order details from.\n     * @returns {Object[]} - The list of folder ids that indicate the order.\n     */\n    folders_order: function (folderOrCollection) {\n        var itemArray = folderOrCollection.items || folderOrCollection.item,\n            allItems = _.isArray(itemArray) ? itemArray : [itemArray];\n\n        // eslint-disable-next-line lodash/prefer-compact\n        return _.filter(_.map(allItems, function (item) {\n            if (!item) { return; }\n\n            var isFolder = (item.items || item.item);\n\n            if (isFolder) {\n                return item.id || item._postman_id;\n            }\n        }));\n    },\n\n    /**\n     * Creates an array of V1 compatible folders from a V2 collection\n     *\n     * @param {Object} collectionV2 - The v2 collection to derive folder structure information from.\n     * @returns {Object[]} - The list of folder definitions.\n     */\n    folders: function (collectionV2) {\n        var self = this,\n            retainEmpty = self.options.retainEmptyValues;\n\n        return _.map(self.extractFolderItems(collectionV2), function (folder) {\n            if (!folder) { return; }\n\n            var folderItems = folder.items || folder.item,\n                description = self.description(folder.description),\n                auth = self.auth(folder),\n                events = self.events(folder),\n                variables = self.variables(folder, { retainIds: self.options.retainIds }),\n\n                result = {\n\n                    // do not attempt to regenerate folder id here when `retainIds` is set to false\n                    // if id is changed here the parent's `folder_order` also needs to be changed\n                    // that can't be done yet\n                    id: folder.id || folder._postman_id || util.uid(),\n                    name: folder.name,\n                    // eslint-disable-next-line lodash/prefer-compact\n                    order: _.filter(_.map(folderItems, function (f) {\n                        if (!f) { return; }\n\n                        var isFolder = (f.items || f.item);\n\n                        return !isFolder && (f.id || f._postman_id);\n                    })),\n                    folders_order: self.folders_order(folder)\n                };\n\n            ((auth && auth.type) || (auth === null)) && (result.auth = auth);\n            events && events.length && (result.events = events);\n            variables && variables.length && (result.variables = variables);\n            util.addProtocolProfileBehavior(folder, result);\n\n            // Prevent empty folder descriptions from showing up in the result, keeps collections clean.\n            if (description) { result.description = description; }\n            else if (retainEmpty) { result.description = null; }\n\n            return result;\n        });\n    },\n\n    /**\n     * Creates the v1.0.0 compatible description string from the v2.0.0 description format.\n     *\n     * @param {Object} descriptionV2 - The v2 style description to be converted\n     *\n     * @returns {String} - The resultant v1 description.\n     */\n    description: function (descriptionV2) {\n        var description,\n            retainEmpty = this.options.retainEmptyValues;\n\n        description = _.isObject(descriptionV2) ? descriptionV2.content : descriptionV2;\n\n        if (description) { return description; }\n        else if (retainEmpty) { return null; }\n    }\n});\n\nmodule.exports = {\n    input: '2.0.0',\n    output: '1.0.0',\n    Builders: Builders,\n\n    /**\n     * Converts a single V2 item to a V1 request.\n     *\n     * @param {Object} request - The request to be converted.\n     * @param {Object} options - The set of options for request conversion.\n     * @param {Function} callback - The function to be invoked after conversion has completed.\n     */\n    convertSingle: function (request, options, callback) {\n        var builders = new Builders(options),\n            clone = _.cloneDeep(request),\n            converted,\n            err;\n\n        try {\n            clone = v2Common.populateIds(clone);\n            converted = builders.request(clone);\n        }\n        catch (e) {\n            err = e;\n        }\n\n        if (callback) {\n            return callback(err, converted);\n        }\n\n        if (err) {\n            throw err;\n        }\n\n        return converted;\n    },\n\n    /**\n     * Converts a single V2 item to a V1 request.\n     *\n     * @param {Object} response - The response to be converted.\n     * @param {Object} options - The set of options for request conversion.\n     * @param {Function} callback - The function to be invoked after conversion has completed.\n     */\n    convertResponse: function (response, options, callback) {\n        var builders = new Builders(options),\n            converted,\n            err;\n\n        try {\n            converted = builders.response(_.cloneDeep(response));\n        }\n        catch (e) {\n            err = e;\n        }\n\n        if (callback) {\n            return callback(err, converted);\n        }\n\n        if (err) {\n            throw err;\n        }\n\n        return converted;\n    },\n\n    /**\n     * Converts a V2 collection to a V1 collection (performs ID replacement, etc as necessary).\n     *\n     * @param {Object} collection - The collection to be converted.\n     * @param {Object} options - The set of options for request conversion.\n     * @param {Function} callback - The function to be invoked after conversion has completed.\n     */\n    convert: function (collection, options, callback) {\n        collection = _.cloneDeep(collection);\n\n        var auth,\n            events,\n            variables,\n            builders = new Builders(options),\n            authOptions = { excludeNoauth: true },\n            varOpts = options && { fallback: options.env, retainIds: options.retainIds },\n            units = ['order', 'folders_order', 'folders', 'requests'],\n            id = _.get(collection, 'info._postman_id') || _.get(collection, 'info.id'),\n            info = collection && collection.info,\n            newCollection = {\n                id: id && options && options.retainIds ? id : util.uid(),\n                name: info && info.name\n            };\n\n        // ensure that each item has an ID\n        collection = v2Common.populateIds(collection);\n        try {\n            // eslint-disable-next-line max-len\n            newCollection.description = builders.description(info && info.description);\n            (auth = builders.auth(collection, authOptions)) && (newCollection.auth = auth);\n            (events = builders.events(collection)) && (newCollection.events = events);\n            (variables = builders.variables(collection, varOpts)) && (newCollection.variables = variables);\n            util.addProtocolProfileBehavior(collection, newCollection);\n\n            units.forEach(function (unit) {\n                newCollection[unit] = builders[unit](collection);\n            });\n        }\n        catch (e) {\n            if (callback) {\n                return callback(e, null);\n            }\n            throw e;\n        }\n\n        if (options && options.handlePartial) {\n            (!collection.item) && (\n                newCollection.requests =\n                newCollection.folders =\n                newCollection.folders_order =\n                newCollection.order = undefined\n            );\n        }\n\n        if (callback) {\n            return callback(null, newCollection);\n        }\n\n        return newCollection;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}