{"ast":null,"code":"var _ = require('../util').lodash,\n  PropertyList = require('./property-list').PropertyList,\n  Url = require('./url').Url,\n  Certificate = require('./certificate').Certificate,\n  CertificateList;\n_.inherit(\n/**\n * @constructor\n * @extends {PropertyList}\n *\n * @param {Object} parent -\n * @param {Array} list - The list of certificate representations\n *\n * @example <caption>Create a new CertificateList</caption>\n * var CertificateList = require('postman-collection').CertificateList,\n *    certificateList = new CertificateList({}, [\n *        {\n *            name: 'my certificate for example.com',\n *            matches: ['https://example.com/*'],\n *            key: { src: '/path/to/key/file' },\n *            cert: { src: '/path/to/certificate/file' }\n *        },\n *        {\n *            name: 'my certificate for example2.com',\n *            matches: ['https://example2.com/*'],\n *            key: { src: '/path/to/key/file' },\n *            cert: { src: '/path/to/key/file' }\n *        }\n * ]);\n */\nCertificateList = function (parent, list) {\n  // this constructor is intended to inherit and as such the super constructor is required to be executed\n  CertificateList.super_.call(this, Certificate, parent, list);\n}, PropertyList);\n_.assign(CertificateList.prototype, /** @lends CertificateList.prototype */{\n  /**\n   * Matches the given url against the member certificates' allowed matches\n   * and returns the certificate that can be used for the url.\n   *\n   * @param {String} url The url to find the certificate for\n   * @returns {Certificate.definition=} The matched certificate\n   */\n  resolveOne(url) {\n    // url must be either string or an instance of url.\n    if (!_.isString(url) && !Url.isUrl(url)) {\n      return;\n    }\n\n    // find a certificate that can be applied to the url\n    return this.find(function (certificate) {\n      return certificate.canApplyTo(url);\n    });\n  }\n});\n_.assign(CertificateList, /** @lends CertificateList */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'CertificateList',\n  /**\n   * Checks if the given object is a CertificateList\n   *\n   * @param {*} obj -\n   * @returns {Boolean}\n   */\n  isCertificateList: function (obj) {\n    return Boolean(obj) && (obj instanceof CertificateList || _.inSuperChain(obj.constructor, '_postman_propertyName', CertificateList._postman_propertyName));\n  }\n});\nmodule.exports = {\n  CertificateList\n};","map":{"version":3,"names":["_","require","lodash","PropertyList","Url","Certificate","CertificateList","inherit","parent","list","super_","call","assign","prototype","resolveOne","url","isString","isUrl","find","certificate","canApplyTo","_postman_propertyName","isCertificateList","obj","Boolean","inSuperChain","constructor","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/certificate-list.js"],"sourcesContent":["var _ = require('../util').lodash,\n    PropertyList = require('./property-list').PropertyList,\n    Url = require('./url').Url,\n    Certificate = require('./certificate').Certificate,\n\n    CertificateList;\n\n_.inherit((\n\n    /**\n     * @constructor\n     * @extends {PropertyList}\n     *\n     * @param {Object} parent -\n     * @param {Array} list - The list of certificate representations\n     *\n     * @example <caption>Create a new CertificateList</caption>\n     * var CertificateList = require('postman-collection').CertificateList,\n     *    certificateList = new CertificateList({}, [\n     *        {\n     *            name: 'my certificate for example.com',\n     *            matches: ['https://example.com/*'],\n     *            key: { src: '/path/to/key/file' },\n     *            cert: { src: '/path/to/certificate/file' }\n     *        },\n     *        {\n     *            name: 'my certificate for example2.com',\n     *            matches: ['https://example2.com/*'],\n     *            key: { src: '/path/to/key/file' },\n     *            cert: { src: '/path/to/key/file' }\n     *        }\n     * ]);\n     */\n    CertificateList = function (parent, list) {\n        // this constructor is intended to inherit and as such the super constructor is required to be executed\n        CertificateList.super_.call(this, Certificate, parent, list);\n    }), PropertyList);\n\n_.assign(CertificateList.prototype, /** @lends CertificateList.prototype */ {\n    /**\n     * Matches the given url against the member certificates' allowed matches\n     * and returns the certificate that can be used for the url.\n     *\n     * @param {String} url The url to find the certificate for\n     * @returns {Certificate.definition=} The matched certificate\n     */\n    resolveOne (url) {\n        // url must be either string or an instance of url.\n        if (!_.isString(url) && !Url.isUrl(url)) {\n            return;\n        }\n\n        // find a certificate that can be applied to the url\n        return this.find(function (certificate) {\n            return certificate.canApplyTo(url);\n        });\n    }\n});\n\n_.assign(CertificateList, /** @lends CertificateList */ {\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'CertificateList',\n\n    /**\n     * Checks if the given object is a CertificateList\n     *\n     * @param {*} obj -\n     * @returns {Boolean}\n     */\n    isCertificateList: function (obj) {\n        return Boolean(obj) && ((obj instanceof CertificateList) ||\n          _.inSuperChain(obj.constructor, '_postman_propertyName', CertificateList._postman_propertyName));\n    }\n});\n\nmodule.exports = {\n    CertificateList\n};\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM;EAC7BC,YAAY,GAAGF,OAAO,CAAC,iBAAiB,CAAC,CAACE,YAAY;EACtDC,GAAG,GAAGH,OAAO,CAAC,OAAO,CAAC,CAACG,GAAG;EAC1BC,WAAW,GAAGJ,OAAO,CAAC,eAAe,CAAC,CAACI,WAAW;EAElDC,eAAe;AAEnBN,CAAC,CAACO,OAAO;AAEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACID,eAAe,GAAG,UAAUE,MAAM,EAAEC,IAAI,EAAE;EACtC;EACAH,eAAe,CAACI,MAAM,CAACC,IAAI,CAAC,IAAI,EAAEN,WAAW,EAAEG,MAAM,EAAEC,IAAI,CAAC;AAChE,CAAC,EAAGN,YAAY,CAAC;AAErBH,CAAC,CAACY,MAAM,CAACN,eAAe,CAACO,SAAS,EAAE,uCAAwC;EACxE;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,UAAU,CAAEC,GAAG,EAAE;IACb;IACA,IAAI,CAACf,CAAC,CAACgB,QAAQ,CAACD,GAAG,CAAC,IAAI,CAACX,GAAG,CAACa,KAAK,CAACF,GAAG,CAAC,EAAE;MACrC;IACJ;;IAEA;IACA,OAAO,IAAI,CAACG,IAAI,CAAC,UAAUC,WAAW,EAAE;MACpC,OAAOA,WAAW,CAACC,UAAU,CAACL,GAAG,CAAC;IACtC,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEFf,CAAC,CAACY,MAAM,CAACN,eAAe,EAAE,6BAA8B;EACpD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIe,qBAAqB,EAAE,iBAAiB;EAExC;AACJ;AACA;AACA;AACA;AACA;EACIC,iBAAiB,EAAE,UAAUC,GAAG,EAAE;IAC9B,OAAOC,OAAO,CAACD,GAAG,CAAC,KAAMA,GAAG,YAAYjB,eAAe,IACrDN,CAAC,CAACyB,YAAY,CAACF,GAAG,CAACG,WAAW,EAAE,uBAAuB,EAAEpB,eAAe,CAACe,qBAAqB,CAAC,CAAC;EACtG;AACJ,CAAC,CAAC;AAEFM,MAAM,CAACC,OAAO,GAAG;EACbtB;AACJ,CAAC"},"metadata":{},"sourceType":"script"}