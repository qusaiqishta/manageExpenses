{"ast":null,"code":"var semver = require('semver'),\n  util = require('./util'),\n  converter = require('./converters'),\n  normalizers = require('./normalizers');\nmodule.exports = {\n  /**\n   * Converts a Collection between different versions, based on the given input.\n   *\n   * @param {Object} collection - The collection object to be converted.\n   * @param {Object} options - The set of conversion options.\n   * @param {String} options.outputVersion - The version to convert to.\n   * @param {String} options.inputVersion - The version to convert from.\n   * @param {Function} callback - The function invoked to mark the completion of the conversion process.\n   */\n  convert: function (collection, options, callback) {\n    if (!options.outputVersion || !semver.valid(options.outputVersion, true)) {\n      return callback(new Error('Output version not specified or invalid: ' + options.outputVersion));\n    }\n    if (!options.inputVersion || !semver.valid(options.inputVersion, true)) {\n      return callback(new Error('Input version not specified or invalid: ' + options.inputVersion));\n    }\n    return converter.convert(collection, options, callback);\n  },\n  normalize: normalizers.normalize,\n  normalizeSingle: normalizers.normalizeSingle,\n  normalizeResponse: normalizers.normalizeResponse,\n  /**\n   * Export the utilities\n   */\n  util: util,\n  /**\n   * Checks whether the given object is a v1 collection\n   *\n   * @param {Object} object - The Object to check for v1 collection compliance.\n   * @returns {Boolean} - A boolean result indicating whether or not the passed object was a v1 collection.\n   */\n  isv1: function (object) {\n    return Boolean(object && object.name && object.order && object.requests);\n  },\n  /**\n   * Checks whether the given object is a v2 collection\n   *\n   * @param {Object} object - The Object to check for v2 collection compliance.\n   * @returns {Boolean} - A boolean result indicating whether or not the passed object was a v2 collection.\n   */\n  isv2: function (object) {\n    return Boolean(object && object.info && object.info.schema);\n  },\n  /**\n   * Converts a single V1 request to a V2 Item, or a V2 item to a single V1 request.\n   *\n   * @param {Object} object - A V1 request or a V2 item.\n   * @param {Object} options - The set of options for response conversion.\n   * @param {String} options.outputVersion - The version to convert to.\n   * @param {String} options.inputVersion - The version to convert from.\n   * @param {Function} callback - The function invoked to mark the completion of the conversion process.\n   */\n  convertSingle: function (object, options, callback) {\n    if (!options.outputVersion || !semver.valid(options.outputVersion, true)) {\n      return callback(new Error('Output version not specified or invalid: ' + options.outputVersion));\n    }\n    if (!options.inputVersion || !semver.valid(options.inputVersion, true)) {\n      return callback(new Error('Input version not specified or invalid: ' + options.inputVersion));\n    }\n    return converter.convertSingle(object, options, callback);\n  },\n  /**\n   * Converts a single V1 request to a V2 Item, or a V2 item to a single V1 request.\n   *\n   * @param {Object} object - A V1 request or a V2 item.\n   * @param {Object} options - The set of options for response conversion.\n   * @param {String} options.outputVersion - The version to convert to.\n   * @param {String} options.inputVersion - The version to convert from.\n   * @param {Function} callback - The function invoked to mark the completion of the conversion process.\n   */\n  convertResponse: function (object, options, callback) {\n    if (!options.outputVersion || !semver.valid(options.outputVersion, true)) {\n      return callback(new Error('Output version not specified or invalid: ' + options.outputVersion));\n    }\n    if (!options.inputVersion || !semver.valid(options.inputVersion, true)) {\n      return callback(new Error('Input version not specified or invalid: ' + options.inputVersion));\n    }\n    return converter.convertResponse(object, options, callback);\n  }\n};","map":{"version":3,"names":["semver","require","util","converter","normalizers","module","exports","convert","collection","options","callback","outputVersion","valid","Error","inputVersion","normalize","normalizeSingle","normalizeResponse","isv1","object","Boolean","name","order","requests","isv2","info","schema","convertSingle","convertResponse"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection-transformer/lib/index.js"],"sourcesContent":["var semver = require('semver'),\n\n    util = require('./util'),\n    converter = require('./converters'),\n    normalizers = require('./normalizers');\n\nmodule.exports = {\n\n    /**\n     * Converts a Collection between different versions, based on the given input.\n     *\n     * @param {Object} collection - The collection object to be converted.\n     * @param {Object} options - The set of conversion options.\n     * @param {String} options.outputVersion - The version to convert to.\n     * @param {String} options.inputVersion - The version to convert from.\n     * @param {Function} callback - The function invoked to mark the completion of the conversion process.\n     */\n    convert: function (collection, options, callback) {\n        if (!options.outputVersion || !semver.valid(options.outputVersion, true)) {\n            return callback(new Error('Output version not specified or invalid: ' + options.outputVersion));\n        }\n        if (!options.inputVersion || !semver.valid(options.inputVersion, true)) {\n            return callback(new Error('Input version not specified or invalid: ' + options.inputVersion));\n        }\n\n        return converter.convert(collection, options, callback);\n    },\n\n    normalize: normalizers.normalize,\n    normalizeSingle: normalizers.normalizeSingle,\n    normalizeResponse: normalizers.normalizeResponse,\n\n    /**\n     * Export the utilities\n     */\n    util: util,\n\n    /**\n     * Checks whether the given object is a v1 collection\n     *\n     * @param {Object} object - The Object to check for v1 collection compliance.\n     * @returns {Boolean} - A boolean result indicating whether or not the passed object was a v1 collection.\n     */\n    isv1: function (object) {\n        return Boolean(object && object.name && object.order && object.requests);\n    },\n\n    /**\n     * Checks whether the given object is a v2 collection\n     *\n     * @param {Object} object - The Object to check for v2 collection compliance.\n     * @returns {Boolean} - A boolean result indicating whether or not the passed object was a v2 collection.\n     */\n    isv2: function (object) {\n        return Boolean(object && object.info && object.info.schema);\n    },\n\n    /**\n     * Converts a single V1 request to a V2 Item, or a V2 item to a single V1 request.\n     *\n     * @param {Object} object - A V1 request or a V2 item.\n     * @param {Object} options - The set of options for response conversion.\n     * @param {String} options.outputVersion - The version to convert to.\n     * @param {String} options.inputVersion - The version to convert from.\n     * @param {Function} callback - The function invoked to mark the completion of the conversion process.\n     */\n    convertSingle: function (object, options, callback) {\n        if (!options.outputVersion || !semver.valid(options.outputVersion, true)) {\n            return callback(new Error('Output version not specified or invalid: ' + options.outputVersion));\n        }\n        if (!options.inputVersion || !semver.valid(options.inputVersion, true)) {\n            return callback(new Error('Input version not specified or invalid: ' + options.inputVersion));\n        }\n\n        return converter.convertSingle(object, options, callback);\n    },\n\n    /**\n     * Converts a single V1 request to a V2 Item, or a V2 item to a single V1 request.\n     *\n     * @param {Object} object - A V1 request or a V2 item.\n     * @param {Object} options - The set of options for response conversion.\n     * @param {String} options.outputVersion - The version to convert to.\n     * @param {String} options.inputVersion - The version to convert from.\n     * @param {Function} callback - The function invoked to mark the completion of the conversion process.\n     */\n    convertResponse: function (object, options, callback) {\n        if (!options.outputVersion || !semver.valid(options.outputVersion, true)) {\n            return callback(new Error('Output version not specified or invalid: ' + options.outputVersion));\n        }\n        if (!options.inputVersion || !semver.valid(options.inputVersion, true)) {\n            return callback(new Error('Input version not specified or invalid: ' + options.inputVersion));\n        }\n\n        return converter.convertResponse(object, options, callback);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}