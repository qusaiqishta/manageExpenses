{"ast":null,"code":"var _ = require('../util').lodash,\n  ItemGroup = require('./item-group').ItemGroup,\n  VariableList = require('./variable-list').VariableList,\n  Version = require('./version').Version,\n  Collection,\n  // constructor\n\n  SCHEMA_URL = 'https://schema.getpostman.com/json/collection/v2.1.0/collection.json';\n\n/**\n * The following is the object structure accepted as constructor parameter while calling `new Collection(...)`. It is\n * also the structure exported when {@link Property#toJSON} or {@link Property#toObjectResolved} is called on a\n * collection instance.\n *\n * @typedef Collection.definition\n *\n * @property {Object=} [info] The meta information regarding the collection is provided as the `info` object.\n * @property {String=} [info.id] Every collection is identified by the unique value of this property. It is recommended\n * that you maintain the same id since changing the id usually implies that is a different collection than it was\n * originally.\n * @property {String=} [info.name] A collection's friendly name is defined by this property. You would want to set this\n * field to a value that would allow you to easily identify this collection among a bunch of other collections.\n * @property {String=} [info.version] Postman allows you to version your collections as they grow, and this field holds\n * the version number. While optional, it is recommended that you use this field to its fullest extent.\n * @property {Array<(Item.definition|ItemGroup.definition)>} [item] Items are the basic unit for a Postman collection.\n * You can think of them as corresponding to a single API endpoint. Each Item has one request and may have multiple API\n * responses associated with it.\n * @property {Variable.definition=} [variable] Collection variables allow you to define a set of variables,\n * that are a *part of the collection*, as opposed to environments, which are separate entities.\n * @property {RequestAuth.definition=} [auth] Collection auth allows you to define an authentication,\n * that *applies to all items* in the collection.\n * @property {Array<Event.definition>=} [event] Postman allows you to configure scripts to run when specific events\n * occur.\n * @property {String|Version.definition=} [version] Version of the collection expressed in [semver](http://semver.org/)\n * format.\n *\n * @see {ItemGroup.definition} - Since `Collection` inherits {@link ItemGroup}, the properties supported by ItemGroup\n * are applicable as well.\n *\n * @example <caption>JSON definition of an example collection</caption>\n * {\n *     \"info\": {\n *         \"name\": \"My Postman Collection\",\n *         \"version\": \"1.0.0\"\n *     }\n *     \"item\": [{\n *         \"request\": \"{{base-url}}/get\"\n *     }],\n *     \"variables\": [{\n *         \"id\": \"base-url\",\n *         \"value\": \"https://postman-echo.com\"\n *     }]\n * }\n */\n_.inherit(\n/**\n * Create or load an instance of [Postman Collection](https://www.getpostman.com/docs/collections) as a JavaScript\n * object that can be manipulated easily.\n *\n * A collection lets you group individual requests together. These requests can be further organized into folders to\n * accurately mirror your API. Requests can also store sample responses when saved in a collection. You can add\n * metadata like name and description too so that all the information that a developer needs to use your API is\n * available easily.\n *\n * @constructor\n * @extends {ItemGroup}\n *\n * @param {Collection.definition=} [definition] - Pass the initial definition of the collection (name, id, etc) as\n * the `definition` parameter. The definition object is structured exactly as the collection format as defined in\n * [https://www.schema.getpostman.com/](https://www.schema.getpostman.com/). This parameter is optional. That\n * implies that you can create an empty instance of collection and add requests and other properties in order to\n * build a new collection.\n * @param {Array<Object>=} [environments] - The collection instance constructor accepts the second parameter as an\n * array of environment objects. Environments objects store variable definitions that are inherited by\n * {@link Collection#variables}. These environment variables are usually the ones that are exported from the Postman\n * App to use them with different collections. Refer to Postman\n * [documentation on environment variables](https://www.getpostman.com/docs/environments).\n *\n * @example <caption>Load a Collection JSON file from disk</caption>\n * var fs = require('fs'), // needed to read JSON file from disk\n *     pretty = function (obj) { // function to neatly log the collection object to console\n *         return require('util').inspect(obj, {colors: true});\n *     },\n *     Collection = require('postman-collection').Collection,\n *     myCollection;\n *\n * // Load a collection to memory from a JSON file on disk (say, sample-collection.json)\n * myCollection = new Collection(JSON.stringify(fs.readFileSync('sample-collection.json').toString()));\n *\n * // log items at root level of the collection\n * console.log(pretty(myCollection));\n *\n * @example <caption>Create a blank collection and write to file</caption>\n * var fs = require('fs'),\n *     Collection = require('postman-collection').Collection,\n *     mycollection;\n *\n * myCollection = new Collection({\n *     info: {\n *         name: \"my Collection\"\n *     }\n * });\n *\n * // log the collection to console to see its contents\n * fs.writeFileSync('myCollection.postman_collection', JSON.stringify(myCollection, null, 2));\n */\nCollection = function PostmanCollection(definition, environments) {\n  // this constructor is intended to inherit and as such the super constructor is required to be executed\n  Collection.super_.call(this, definition);\n  _.assign(this, /** @lends Collection.prototype */{\n    /**\n     * The `variables` property holds a list of variables that are associated with a Collection. These variables\n     * are stored within a collection so that they can be re-used and replaced in rest of the collection. For\n     * example, if one has a variable named `port` with value `8080`, then one can write a request {@link Url}\n     * as `http://localhost:{{port}}/my/endpoint` and that will be replaced to form\n     * `http://localhost:8080/my/endpoint`. **Collection Variables** are like\n     * [environment variables](https://www.getpostman.com/docs/environments), but stored locally within a\n     * collection.\n     *\n     * @type {VariableList}\n     *\n     * @example <caption>Creating a collection with variables</caption>\n     * var fs = require('fs'),\n     *     Collection = require('postman-collection').Collection,\n     *     mycollection;\n     *\n     * // Create a new empty collection.\n     * myCollection = new Collection();\n     *\n     * // Add a variable to the collection\n     * myCollection.variables.add({\n     *     id: 'apiBaseUrl',\n     *     value: 'http://timeapi.org',\n     *     type: 'string'\n     * });\n     *\n     * //Add a request that uses the variable that we just added.\n     * myCollection.items.add({\n     *     id: 'utc-time-now',\n     *     name: 'Get the current time in UTC',\n     *     request: '{{apiBaseUrl}}/utc/now'\n     * });\n     */\n    variables: new VariableList(this, definition && definition.variable, environments),\n    /**\n     * The `version` key in collection is used to express the version of the collection. It is useful in either\n     * tracking development iteration of an API server or the version of an API itself. It can also be used to\n     * represent the number of iterations of the collection as it is updated through its lifetime.\n     *\n     * Version is expressed in [semver](http://semver.org/) format.\n     *\n     * @type {Version}\n     * @optional\n     *\n     * @see {@link http://semver.org/}\n     */\n    version: definition && definition.info && definition.info.version ? new Version(definition.info.version) : undefined\n  });\n}, ItemGroup);\n_.assign(Collection.prototype, /** @lends Collection.prototype */{\n  /**\n   * Using this function, one can sync the values of collection variables from a reference object.\n   *\n   * @param {Object} obj -\n   * @param {Boolean=} [track] -\n   *\n   * @returns {Object}\n   */\n  syncVariablesFrom(obj, track) {\n    return this.variables.syncFromObject(obj, track);\n  },\n  /**\n   * Transfer the variables in this scope to an object\n   *\n   * @param {Object=} [obj] -\n   *\n   * @returns {Object}\n   */\n  syncVariablesTo(obj) {\n    return this.variables.syncToObject(obj);\n  },\n  /**\n   * Convert the collection to JSON compatible plain object\n   *\n   * @returns {Object}\n   */\n  toJSON() {\n    var json = ItemGroup.prototype.toJSON.apply(this);\n\n    // move ids and stuff from root level to `info` object\n    json.info = {\n      _postman_id: this.id,\n      name: this.name,\n      version: this.version,\n      schema: SCHEMA_URL\n    };\n    delete json.id;\n    delete json.name;\n    delete json.version;\n    if (_.has(json, 'description')) {\n      json.info.description = this.description;\n      delete json.description;\n    }\n    return json;\n  }\n});\n_.assign(Collection, /** @lends Collection */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'Collection',\n  /**\n   * Check whether an object is an instance of {@link ItemGroup}.\n   *\n   * @param {*} obj -\n   * @returns {Boolean}\n   */\n  isCollection: function (obj) {\n    return Boolean(obj) && (obj instanceof Collection || _.inSuperChain(obj.constructor, '_postman_propertyName', Collection._postman_propertyName));\n  }\n});\nmodule.exports = {\n  Collection\n};","map":{"version":3,"names":["_","require","lodash","ItemGroup","VariableList","Version","Collection","SCHEMA_URL","inherit","PostmanCollection","definition","environments","super_","call","assign","variables","variable","version","info","undefined","prototype","syncVariablesFrom","obj","track","syncFromObject","syncVariablesTo","syncToObject","toJSON","json","apply","_postman_id","id","name","schema","has","description","_postman_propertyName","isCollection","Boolean","inSuperChain","constructor","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/collection.js"],"sourcesContent":["var _ = require('../util').lodash,\n    ItemGroup = require('./item-group').ItemGroup,\n    VariableList = require('./variable-list').VariableList,\n    Version = require('./version').Version,\n\n    Collection, // constructor\n\n    SCHEMA_URL = 'https://schema.getpostman.com/json/collection/v2.1.0/collection.json';\n\n/**\n * The following is the object structure accepted as constructor parameter while calling `new Collection(...)`. It is\n * also the structure exported when {@link Property#toJSON} or {@link Property#toObjectResolved} is called on a\n * collection instance.\n *\n * @typedef Collection.definition\n *\n * @property {Object=} [info] The meta information regarding the collection is provided as the `info` object.\n * @property {String=} [info.id] Every collection is identified by the unique value of this property. It is recommended\n * that you maintain the same id since changing the id usually implies that is a different collection than it was\n * originally.\n * @property {String=} [info.name] A collection's friendly name is defined by this property. You would want to set this\n * field to a value that would allow you to easily identify this collection among a bunch of other collections.\n * @property {String=} [info.version] Postman allows you to version your collections as they grow, and this field holds\n * the version number. While optional, it is recommended that you use this field to its fullest extent.\n * @property {Array<(Item.definition|ItemGroup.definition)>} [item] Items are the basic unit for a Postman collection.\n * You can think of them as corresponding to a single API endpoint. Each Item has one request and may have multiple API\n * responses associated with it.\n * @property {Variable.definition=} [variable] Collection variables allow you to define a set of variables,\n * that are a *part of the collection*, as opposed to environments, which are separate entities.\n * @property {RequestAuth.definition=} [auth] Collection auth allows you to define an authentication,\n * that *applies to all items* in the collection.\n * @property {Array<Event.definition>=} [event] Postman allows you to configure scripts to run when specific events\n * occur.\n * @property {String|Version.definition=} [version] Version of the collection expressed in [semver](http://semver.org/)\n * format.\n *\n * @see {ItemGroup.definition} - Since `Collection` inherits {@link ItemGroup}, the properties supported by ItemGroup\n * are applicable as well.\n *\n * @example <caption>JSON definition of an example collection</caption>\n * {\n *     \"info\": {\n *         \"name\": \"My Postman Collection\",\n *         \"version\": \"1.0.0\"\n *     }\n *     \"item\": [{\n *         \"request\": \"{{base-url}}/get\"\n *     }],\n *     \"variables\": [{\n *         \"id\": \"base-url\",\n *         \"value\": \"https://postman-echo.com\"\n *     }]\n * }\n */\n_.inherit((\n\n    /**\n     * Create or load an instance of [Postman Collection](https://www.getpostman.com/docs/collections) as a JavaScript\n     * object that can be manipulated easily.\n     *\n     * A collection lets you group individual requests together. These requests can be further organized into folders to\n     * accurately mirror your API. Requests can also store sample responses when saved in a collection. You can add\n     * metadata like name and description too so that all the information that a developer needs to use your API is\n     * available easily.\n     *\n     * @constructor\n     * @extends {ItemGroup}\n     *\n     * @param {Collection.definition=} [definition] - Pass the initial definition of the collection (name, id, etc) as\n     * the `definition` parameter. The definition object is structured exactly as the collection format as defined in\n     * [https://www.schema.getpostman.com/](https://www.schema.getpostman.com/). This parameter is optional. That\n     * implies that you can create an empty instance of collection and add requests and other properties in order to\n     * build a new collection.\n     * @param {Array<Object>=} [environments] - The collection instance constructor accepts the second parameter as an\n     * array of environment objects. Environments objects store variable definitions that are inherited by\n     * {@link Collection#variables}. These environment variables are usually the ones that are exported from the Postman\n     * App to use them with different collections. Refer to Postman\n     * [documentation on environment variables](https://www.getpostman.com/docs/environments).\n     *\n     * @example <caption>Load a Collection JSON file from disk</caption>\n     * var fs = require('fs'), // needed to read JSON file from disk\n     *     pretty = function (obj) { // function to neatly log the collection object to console\n     *         return require('util').inspect(obj, {colors: true});\n     *     },\n     *     Collection = require('postman-collection').Collection,\n     *     myCollection;\n     *\n     * // Load a collection to memory from a JSON file on disk (say, sample-collection.json)\n     * myCollection = new Collection(JSON.stringify(fs.readFileSync('sample-collection.json').toString()));\n     *\n     * // log items at root level of the collection\n     * console.log(pretty(myCollection));\n     *\n     * @example <caption>Create a blank collection and write to file</caption>\n     * var fs = require('fs'),\n     *     Collection = require('postman-collection').Collection,\n     *     mycollection;\n     *\n     * myCollection = new Collection({\n     *     info: {\n     *         name: \"my Collection\"\n     *     }\n     * });\n     *\n     * // log the collection to console to see its contents\n     * fs.writeFileSync('myCollection.postman_collection', JSON.stringify(myCollection, null, 2));\n     */\n    Collection = function PostmanCollection (definition, environments) {\n        // this constructor is intended to inherit and as such the super constructor is required to be executed\n        Collection.super_.call(this, definition);\n\n        _.assign(this, /** @lends Collection.prototype */ {\n            /**\n             * The `variables` property holds a list of variables that are associated with a Collection. These variables\n             * are stored within a collection so that they can be re-used and replaced in rest of the collection. For\n             * example, if one has a variable named `port` with value `8080`, then one can write a request {@link Url}\n             * as `http://localhost:{{port}}/my/endpoint` and that will be replaced to form\n             * `http://localhost:8080/my/endpoint`. **Collection Variables** are like\n             * [environment variables](https://www.getpostman.com/docs/environments), but stored locally within a\n             * collection.\n             *\n             * @type {VariableList}\n             *\n             * @example <caption>Creating a collection with variables</caption>\n             * var fs = require('fs'),\n             *     Collection = require('postman-collection').Collection,\n             *     mycollection;\n             *\n             * // Create a new empty collection.\n             * myCollection = new Collection();\n             *\n             * // Add a variable to the collection\n             * myCollection.variables.add({\n             *     id: 'apiBaseUrl',\n             *     value: 'http://timeapi.org',\n             *     type: 'string'\n             * });\n             *\n             * //Add a request that uses the variable that we just added.\n             * myCollection.items.add({\n             *     id: 'utc-time-now',\n             *     name: 'Get the current time in UTC',\n             *     request: '{{apiBaseUrl}}/utc/now'\n             * });\n             */\n            variables: new VariableList(this, definition && definition.variable, environments),\n\n            /**\n             * The `version` key in collection is used to express the version of the collection. It is useful in either\n             * tracking development iteration of an API server or the version of an API itself. It can also be used to\n             * represent the number of iterations of the collection as it is updated through its lifetime.\n             *\n             * Version is expressed in [semver](http://semver.org/) format.\n             *\n             * @type {Version}\n             * @optional\n             *\n             * @see {@link http://semver.org/}\n             */\n            version: (definition && definition.info && definition.info.version) ?\n                new Version(definition.info.version) : undefined\n        });\n    }), ItemGroup);\n\n_.assign(Collection.prototype, /** @lends Collection.prototype */ {\n    /**\n     * Using this function, one can sync the values of collection variables from a reference object.\n     *\n     * @param {Object} obj -\n     * @param {Boolean=} [track] -\n     *\n     * @returns {Object}\n     */\n    syncVariablesFrom (obj, track) {\n        return this.variables.syncFromObject(obj, track);\n    },\n\n    /**\n     * Transfer the variables in this scope to an object\n     *\n     * @param {Object=} [obj] -\n     *\n     * @returns {Object}\n     */\n    syncVariablesTo (obj) {\n        return this.variables.syncToObject(obj);\n    },\n\n    /**\n     * Convert the collection to JSON compatible plain object\n     *\n     * @returns {Object}\n     */\n    toJSON () {\n        var json = ItemGroup.prototype.toJSON.apply(this);\n\n        // move ids and stuff from root level to `info` object\n        json.info = {\n            _postman_id: this.id,\n            name: this.name,\n            version: this.version,\n            schema: SCHEMA_URL\n        };\n\n        delete json.id;\n        delete json.name;\n        delete json.version;\n\n        if (_.has(json, 'description')) {\n            json.info.description = this.description;\n            delete json.description;\n        }\n\n        return json;\n    }\n});\n\n_.assign(Collection, /** @lends Collection */ {\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'Collection',\n\n    /**\n     * Check whether an object is an instance of {@link ItemGroup}.\n     *\n     * @param {*} obj -\n     * @returns {Boolean}\n     */\n    isCollection: function (obj) {\n        return Boolean(obj) && ((obj instanceof Collection) ||\n            _.inSuperChain(obj.constructor, '_postman_propertyName', Collection._postman_propertyName));\n    }\n});\n\nmodule.exports = {\n    Collection\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}