{"ast":null,"code":"'use strict';\n\nconst CHARTSET_RE = /(?:charset|encoding)\\s{0,10}=\\s{0,10}['\"]? {0,10}([\\w\\-]{1,100})/i;\nmodule.exports = charset;\n\n/**\n * guest data charset from req.headers, xml, html content-type meta tag\n * headers:\n *  'content-type': 'text/html;charset=gbk'\n * meta tag:\n *  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=xxxx\"/>\n * xml file:\n *  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n *\n * @param {Object} obj `Content-Type` String, or `res.headers`, or `res` Object\n * @param {Buffer} [data] content buffer\n * @param {Number} [peekSize] max content peek size, default is 512\n * @return {String} charset, lower case, e.g.: utf8, gbk, gb2312, ....\n *  If can\\'t guest, return null\n * @api public\n */\nfunction charset(obj, data, peekSize) {\n  let matchs = null;\n  let end = 0;\n  if (data) {\n    peekSize = peekSize || 512;\n    // https://github.com/node-modules/charset/issues/4\n    end = data.length > peekSize ? peekSize : data.length;\n  }\n  // charset('text/html;charset=gbk')\n  let contentType = obj;\n  if (contentType && typeof contentType !== 'string') {\n    // charset(res.headers)\n    let headers = obj;\n    if (obj.headers) {\n      // charset(res)\n      headers = obj.headers;\n    }\n    contentType = headers['content-type'] || headers['Content-Type'];\n  }\n  if (contentType) {\n    // guest from obj first\n    matchs = CHARTSET_RE.exec(contentType);\n  }\n  if (!matchs && end > 0) {\n    // guest from content body (html/xml) header\n    contentType = data.slice(0, end).toString();\n    matchs = CHARTSET_RE.exec(contentType);\n  }\n  let cs = null;\n  if (matchs) {\n    cs = matchs[1].toLowerCase();\n    if (cs === 'utf-8') {\n      cs = 'utf8';\n    }\n  }\n  return cs;\n}","map":{"version":3,"names":["CHARTSET_RE","module","exports","charset","obj","data","peekSize","matchs","end","length","contentType","headers","exec","slice","toString","cs","toLowerCase"],"sources":["/Users/Qusai.Qishta/node_modules/charset/index.js"],"sourcesContent":["'use strict';\n\nconst CHARTSET_RE = /(?:charset|encoding)\\s{0,10}=\\s{0,10}['\"]? {0,10}([\\w\\-]{1,100})/i;\n\nmodule.exports = charset;\n\n/**\n * guest data charset from req.headers, xml, html content-type meta tag\n * headers:\n *  'content-type': 'text/html;charset=gbk'\n * meta tag:\n *  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=xxxx\"/>\n * xml file:\n *  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n *\n * @param {Object} obj `Content-Type` String, or `res.headers`, or `res` Object\n * @param {Buffer} [data] content buffer\n * @param {Number} [peekSize] max content peek size, default is 512\n * @return {String} charset, lower case, e.g.: utf8, gbk, gb2312, ....\n *  If can\\'t guest, return null\n * @api public\n */\nfunction charset(obj, data, peekSize) {\n  let matchs = null;\n  let end = 0;\n  if (data) {\n    peekSize = peekSize || 512;\n    // https://github.com/node-modules/charset/issues/4\n    end = data.length > peekSize ? peekSize : data.length;\n  }\n  // charset('text/html;charset=gbk')\n  let contentType = obj;\n  if (contentType && typeof contentType !== 'string') {\n    // charset(res.headers)\n    let headers = obj;\n    if (obj.headers) {\n      // charset(res)\n      headers = obj.headers;\n    }\n    contentType = headers['content-type'] || headers['Content-Type'];\n  }\n  if (contentType) {\n    // guest from obj first\n    matchs = CHARTSET_RE.exec(contentType);\n  }\n  if (!matchs && end > 0) {\n    // guest from content body (html/xml) header\n    contentType = data.slice(0, end).toString();\n    matchs = CHARTSET_RE.exec(contentType);\n  }\n  let cs = null;\n  if (matchs) {\n    cs = matchs[1].toLowerCase();\n    if (cs === 'utf-8') {\n      cs = 'utf8';\n    }\n  }\n  return cs;\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,WAAW,GAAG,mEAAmE;AAEvFC,MAAM,CAACC,OAAO,GAAGC,OAAO;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,CAACC,GAAG,EAAEC,IAAI,EAAEC,QAAQ,EAAE;EACpC,IAAIC,MAAM,GAAG,IAAI;EACjB,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIH,IAAI,EAAE;IACRC,QAAQ,GAAGA,QAAQ,IAAI,GAAG;IAC1B;IACAE,GAAG,GAAGH,IAAI,CAACI,MAAM,GAAGH,QAAQ,GAAGA,QAAQ,GAAGD,IAAI,CAACI,MAAM;EACvD;EACA;EACA,IAAIC,WAAW,GAAGN,GAAG;EACrB,IAAIM,WAAW,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;IAClD;IACA,IAAIC,OAAO,GAAGP,GAAG;IACjB,IAAIA,GAAG,CAACO,OAAO,EAAE;MACf;MACAA,OAAO,GAAGP,GAAG,CAACO,OAAO;IACvB;IACAD,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC,IAAIA,OAAO,CAAC,cAAc,CAAC;EAClE;EACA,IAAID,WAAW,EAAE;IACf;IACAH,MAAM,GAAGP,WAAW,CAACY,IAAI,CAACF,WAAW,CAAC;EACxC;EACA,IAAI,CAACH,MAAM,IAAIC,GAAG,GAAG,CAAC,EAAE;IACtB;IACAE,WAAW,GAAGL,IAAI,CAACQ,KAAK,CAAC,CAAC,EAAEL,GAAG,CAAC,CAACM,QAAQ,EAAE;IAC3CP,MAAM,GAAGP,WAAW,CAACY,IAAI,CAACF,WAAW,CAAC;EACxC;EACA,IAAIK,EAAE,GAAG,IAAI;EACb,IAAIR,MAAM,EAAE;IACVQ,EAAE,GAAGR,MAAM,CAAC,CAAC,CAAC,CAACS,WAAW,EAAE;IAC5B,IAAID,EAAE,KAAK,OAAO,EAAE;MAClBA,EAAE,GAAG,MAAM;IACb;EACF;EACA,OAAOA,EAAE;AACX"},"metadata":{},"sourceType":"script"}