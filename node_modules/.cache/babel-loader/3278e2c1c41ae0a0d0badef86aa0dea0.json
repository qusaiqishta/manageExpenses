{"ast":null,"code":"var _ = require('lodash'),\n  aws4 = require('aws4'),\n  crypto = require('crypto'),\n  sdk = require('postman-collection'),\n  urlEncoder = require('postman-url-encoder'),\n  bodyBuilder = require('../requester/core-body-builder'),\n  RequestBody = sdk.RequestBody,\n  X_AMZ_PREFIX = 'X-Amz-',\n  BODY_HASH_HEADER = 'X-Amz-Content-Sha256',\n  /**\n   * Calculates body hash with given algorithm and digestEncoding.\n   *\n   * @todo This function can also be used in Digest auth so that it works correctly for urlencoded and file body types\n   *\n   * @param {RequestBody} body -\n   * @param {String} algorithm -\n   * @param {String} digestEncoding -\n   * @param {Function} callback -\n   */\n  computeBodyHash = function (body, algorithm, digestEncoding, callback) {\n    if (!(body && algorithm && digestEncoding) || body.isEmpty()) {\n      return callback();\n    }\n    var hash = crypto.createHash(algorithm),\n      originalReadStream,\n      rawBody,\n      urlencodedBody,\n      graphqlBody;\n    if (body.mode === RequestBody.MODES.raw) {\n      rawBody = bodyBuilder.raw(body.raw).body;\n      hash.update(rawBody);\n      return callback(hash.digest(digestEncoding));\n    }\n    if (body.mode === RequestBody.MODES.urlencoded) {\n      urlencodedBody = bodyBuilder.urlencoded(body.urlencoded).form;\n      urlencodedBody = urlEncoder.encodeQueryString(urlencodedBody);\n      hash.update(urlencodedBody);\n      return callback(hash.digest(digestEncoding));\n    }\n    if (body.mode === RequestBody.MODES.file) {\n      originalReadStream = _.get(body, 'file.content');\n      if (!originalReadStream) {\n        return callback();\n      }\n      return originalReadStream.cloneReadStream(function (err, clonedStream) {\n        if (err) {\n          return callback();\n        }\n        clonedStream.on('data', function (chunk) {\n          hash.update(chunk);\n        });\n        clonedStream.on('end', function () {\n          callback(hash.digest(digestEncoding));\n        });\n      });\n    }\n    if (body.mode === RequestBody.MODES.graphql) {\n      graphqlBody = bodyBuilder.graphql(body.graphql).body;\n      hash.update(graphqlBody);\n      return callback(hash.digest(digestEncoding));\n    }\n\n    // @todo: formdata body type requires adding new data to form instead of setting headers for AWS auth.\n    //        Figure out how to do that. See below link:\n    //        AWS auth with formdata: https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html\n\n    // ensure that callback is called if body.mode doesn't match with any of the above modes\n    return callback();\n  };\n\n/**\n * @implements {AuthHandlerInterface}\n */\nmodule.exports = {\n  /**\n   * @property {AuthHandlerInterface~AuthManifest}\n   */\n  manifest: {\n    info: {\n      name: 'awsv4',\n      version: '1.0.0'\n    },\n    updates: [{\n      property: 'Host',\n      type: 'header'\n    }, {\n      property: 'Authorization',\n      type: 'header'\n    }, {\n      property: 'X-Amz-Date',\n      type: 'header'\n    }, {\n      property: 'X-Amz-Security-Token',\n      type: 'header'\n    }, {\n      property: 'X-Amz-Content-Sha256',\n      type: 'header'\n    }, {\n      property: 'X-Amz-Security-Token',\n      type: 'url.param'\n    }, {\n      property: 'X-Amz-Expires',\n      type: 'url.param'\n    }, {\n      property: 'X-Amz-Date',\n      type: 'url.param'\n    }, {\n      property: 'X-Amz-Algorithm',\n      type: 'url.param'\n    }, {\n      property: 'X-Amz-Credential',\n      type: 'url.param'\n    }, {\n      property: 'X-Amz-SignedHeaders',\n      type: 'url.param'\n    }, {\n      property: 'X-Amz-Signature',\n      type: 'url.param'\n    }]\n  },\n  /**\n   * Initializes a item (fetches all required parameters, etc) before the actual authorization step.\n   *\n   * @param {AuthInterface} auth -\n   * @param {Response} response -\n   * @param {AuthHandlerInterface~authInitHookCallback} done -\n   */\n  init: function (auth, response, done) {\n    done(null);\n  },\n  /**\n   * Checks the item, and fetches any parameters that are not already provided.\n   *\n   * @param {AuthInterface} auth -\n   * @param {AuthHandlerInterface~authPreHookCallback} done -\n   */\n  pre: function (auth, done) {\n    done(null, true);\n  },\n  /**\n   * Verifies whether the request was successful after being sent.\n   *\n   * @param {AuthInterface} auth -\n   * @param {Requester} response -\n   * @param {AuthHandlerInterface~authPostHookCallback} done -\n   */\n  post: function (auth, response, done) {\n    done(null, true);\n  },\n  /**\n   * Generates the signature and adds auth data to the request as additional headers/query params.\n   * AWS v4 auth mandates that a content type header be present in each request.\n   *\n   * @param {Request} request request to add auth data\n   * @param {Object} params data required for auth\n   * @param {Object} params.credentials Should contain the AWS credentials, \"accessKeyId\" and \"secretAccessKey\"\n   * @param {String} params.host Contains the host name for the request\n   * @param {String} params.path Contains the complete path, with query string as well, e.g: /something/kane?hi=ho\n   * @param {String} params.service The name of the AWS service\n   * @param {String} params.region AWS region\n   * @param {String} params.method Request method\n   * @param {String} params.body Stringified request body\n   * @param {Object} params.headers Each key should be a header key, and the value should be a header value\n   * @param {Boolean} params.signQuery Add auth data to query params if true, otherwise add it to headers\n   */\n  addAuthDataToRequest: function (request, params) {\n    var signedData = aws4.sign(params, params.credentials);\n    if (params.signQuery) {\n      _.forEach(sdk.Url.parse(signedData.path).query, function (param) {\n        // only add additional AWS specific params to request\n        if (_.startsWith(param.key, X_AMZ_PREFIX) && !request.url.query.has(param.key)) {\n          param.system = true;\n          request.url.query.add(param);\n        }\n      });\n    }\n    _.forEach(signedData.headers, function (value, key) {\n      request.upsertHeader({\n        key: key,\n        value: value,\n        system: true\n      });\n    });\n  },\n  /**\n   * Signs a request.\n   *\n   * @param {AuthInterface} auth -\n   * @param {Request} request -\n   * @param {AuthHandlerInterface~authSignHookCallback} done -\n   */\n  sign: function (auth, request, done) {\n    var self = this,\n      params = auth.get(['accessKey', 'secretKey', 'sessionToken', 'service', 'region', 'addAuthDataToQuery']),\n      url = urlEncoder.toNodeUrl(request.url),\n      dataToSign;\n\n    // Clean up the request (if needed)\n    request.removeHeader('Authorization', {\n      ignoreCase: true\n    });\n    request.removeHeader('X-Amz-Date', {\n      ignoreCase: true\n    });\n    request.removeHeader('X-Amz-Security-Token', {\n      ignoreCase: true\n    });\n    request.removeHeader('X-Amz-Content-Sha256', {\n      ignoreCase: true\n    });\n\n    // Not removing `X-Amz-Expires` from params here allowing user to override\n    // default value\n    request.removeQueryParams(['X-Amz-Security-Token', 'X-Amz-Date', 'X-Amz-Algorithm', 'X-Amz-Credential', 'X-Amz-SignedHeaders', 'X-Amz-Signature']);\n    dataToSign = {\n      credentials: {\n        accessKeyId: params.accessKey,\n        secretAccessKey: params.secretKey,\n        sessionToken: params.sessionToken || undefined\n      },\n      host: url.host,\n      path: url.path,\n      // path = pathname + query\n      service: params.service || 'execute-api',\n      // AWS API Gateway is the default service.\n      region: params.region || 'us-east-1',\n      method: request.method,\n      body: undefined,\n      // no need to give body since we are setting 'X-Amz-Content-Sha256' header\n      headers: _.transform(request.getHeaders({\n        enabled: true\n      }), function (accumulator, value, key) {\n        accumulator[key] = value;\n      }, {}),\n      signQuery: params.addAuthDataToQuery\n    };\n\n    // Removed the code which was adding content-type header if it is not there in the request. Because\n    // aws4 does not require content-type header. It is only mandatory to include content-type header in signature\n    // calculation if it is there in the request.\n    // Refer: https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html#canonical-request\n\n    // body hash is not required when adding auth data to qury params\n    // @see: https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\n    if (params.addAuthDataToQuery) {\n      self.addAuthDataToRequest(request, dataToSign);\n      return done();\n    }\n\n    // aws4 module can't calculate body hash for body with ReadStream.\n    // So we calculate it our self and set 'X-Amz-Content-Sha256' header which will be used by aws4 module\n    // to calculate the signature.\n    computeBodyHash(request.body, 'sha256', 'hex', function (bodyHash) {\n      if (bodyHash) {\n        request.upsertHeader({\n          key: BODY_HASH_HEADER,\n          value: bodyHash,\n          system: true\n        });\n        dataToSign.headers[BODY_HASH_HEADER] = bodyHash;\n      }\n      self.addAuthDataToRequest(request, dataToSign);\n      return done();\n    });\n  }\n};","map":{"version":3,"names":["_","require","aws4","crypto","sdk","urlEncoder","bodyBuilder","RequestBody","X_AMZ_PREFIX","BODY_HASH_HEADER","computeBodyHash","body","algorithm","digestEncoding","callback","isEmpty","hash","createHash","originalReadStream","rawBody","urlencodedBody","graphqlBody","mode","MODES","raw","update","digest","urlencoded","form","encodeQueryString","file","get","cloneReadStream","err","clonedStream","on","chunk","graphql","module","exports","manifest","info","name","version","updates","property","type","init","auth","response","done","pre","post","addAuthDataToRequest","request","params","signedData","sign","credentials","signQuery","forEach","Url","parse","path","query","param","startsWith","key","url","has","system","add","headers","value","upsertHeader","self","toNodeUrl","dataToSign","removeHeader","ignoreCase","removeQueryParams","accessKeyId","accessKey","secretAccessKey","secretKey","sessionToken","undefined","host","service","region","method","transform","getHeaders","enabled","accumulator","addAuthDataToQuery","bodyHash"],"sources":["/Users/Qusai.Qishta/node_modules/postman-runtime/lib/authorizer/aws4.js"],"sourcesContent":["var _ = require('lodash'),\n    aws4 = require('aws4'),\n    crypto = require('crypto'),\n    sdk = require('postman-collection'),\n    urlEncoder = require('postman-url-encoder'),\n    bodyBuilder = require('../requester/core-body-builder'),\n\n    RequestBody = sdk.RequestBody,\n\n    X_AMZ_PREFIX = 'X-Amz-',\n    BODY_HASH_HEADER = 'X-Amz-Content-Sha256',\n\n    /**\n     * Calculates body hash with given algorithm and digestEncoding.\n     *\n     * @todo This function can also be used in Digest auth so that it works correctly for urlencoded and file body types\n     *\n     * @param {RequestBody} body -\n     * @param {String} algorithm -\n     * @param {String} digestEncoding -\n     * @param {Function} callback -\n     */\n    computeBodyHash = function (body, algorithm, digestEncoding, callback) {\n        if (!(body && algorithm && digestEncoding) || body.isEmpty()) { return callback(); }\n\n        var hash = crypto.createHash(algorithm),\n            originalReadStream,\n            rawBody,\n            urlencodedBody,\n            graphqlBody;\n\n        if (body.mode === RequestBody.MODES.raw) {\n            rawBody = bodyBuilder.raw(body.raw).body;\n            hash.update(rawBody);\n\n            return callback(hash.digest(digestEncoding));\n        }\n\n        if (body.mode === RequestBody.MODES.urlencoded) {\n            urlencodedBody = bodyBuilder.urlencoded(body.urlencoded).form;\n            urlencodedBody = urlEncoder.encodeQueryString(urlencodedBody);\n            hash.update(urlencodedBody);\n\n            return callback(hash.digest(digestEncoding));\n        }\n\n        if (body.mode === RequestBody.MODES.file) {\n            originalReadStream = _.get(body, 'file.content');\n\n            if (!originalReadStream) {\n                return callback();\n            }\n\n            return originalReadStream.cloneReadStream(function (err, clonedStream) {\n                if (err) { return callback(); }\n\n                clonedStream.on('data', function (chunk) {\n                    hash.update(chunk);\n                });\n\n                clonedStream.on('end', function () {\n                    callback(hash.digest(digestEncoding));\n                });\n            });\n        }\n\n        if (body.mode === RequestBody.MODES.graphql) {\n            graphqlBody = bodyBuilder.graphql(body.graphql).body;\n            hash.update(graphqlBody);\n\n            return callback(hash.digest(digestEncoding));\n        }\n\n        // @todo: formdata body type requires adding new data to form instead of setting headers for AWS auth.\n        //        Figure out how to do that. See below link:\n        //        AWS auth with formdata: https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html\n\n        // ensure that callback is called if body.mode doesn't match with any of the above modes\n        return callback();\n    };\n\n/**\n * @implements {AuthHandlerInterface}\n */\nmodule.exports = {\n    /**\n     * @property {AuthHandlerInterface~AuthManifest}\n     */\n    manifest: {\n        info: {\n            name: 'awsv4',\n            version: '1.0.0'\n        },\n        updates: [\n            {\n                property: 'Host',\n                type: 'header'\n            },\n            {\n                property: 'Authorization',\n                type: 'header'\n            },\n            {\n                property: 'X-Amz-Date',\n                type: 'header'\n            },\n            {\n                property: 'X-Amz-Security-Token',\n                type: 'header'\n            },\n            {\n                property: 'X-Amz-Content-Sha256',\n                type: 'header'\n            },\n            {\n                property: 'X-Amz-Security-Token',\n                type: 'url.param'\n            },\n            {\n                property: 'X-Amz-Expires',\n                type: 'url.param'\n            },\n            {\n                property: 'X-Amz-Date',\n                type: 'url.param'\n            },\n            {\n                property: 'X-Amz-Algorithm',\n                type: 'url.param'\n            },\n            {\n                property: 'X-Amz-Credential',\n                type: 'url.param'\n            },\n            {\n                property: 'X-Amz-SignedHeaders',\n                type: 'url.param'\n            },\n            {\n                property: 'X-Amz-Signature',\n                type: 'url.param'\n            }\n        ]\n    },\n\n    /**\n     * Initializes a item (fetches all required parameters, etc) before the actual authorization step.\n     *\n     * @param {AuthInterface} auth -\n     * @param {Response} response -\n     * @param {AuthHandlerInterface~authInitHookCallback} done -\n     */\n    init: function (auth, response, done) {\n        done(null);\n    },\n\n    /**\n     * Checks the item, and fetches any parameters that are not already provided.\n     *\n     * @param {AuthInterface} auth -\n     * @param {AuthHandlerInterface~authPreHookCallback} done -\n     */\n    pre: function (auth, done) {\n        done(null, true);\n    },\n\n    /**\n     * Verifies whether the request was successful after being sent.\n     *\n     * @param {AuthInterface} auth -\n     * @param {Requester} response -\n     * @param {AuthHandlerInterface~authPostHookCallback} done -\n     */\n    post: function (auth, response, done) {\n        done(null, true);\n    },\n\n    /**\n     * Generates the signature and adds auth data to the request as additional headers/query params.\n     * AWS v4 auth mandates that a content type header be present in each request.\n     *\n     * @param {Request} request request to add auth data\n     * @param {Object} params data required for auth\n     * @param {Object} params.credentials Should contain the AWS credentials, \"accessKeyId\" and \"secretAccessKey\"\n     * @param {String} params.host Contains the host name for the request\n     * @param {String} params.path Contains the complete path, with query string as well, e.g: /something/kane?hi=ho\n     * @param {String} params.service The name of the AWS service\n     * @param {String} params.region AWS region\n     * @param {String} params.method Request method\n     * @param {String} params.body Stringified request body\n     * @param {Object} params.headers Each key should be a header key, and the value should be a header value\n     * @param {Boolean} params.signQuery Add auth data to query params if true, otherwise add it to headers\n     */\n    addAuthDataToRequest: function (request, params) {\n        var signedData = aws4.sign(params, params.credentials);\n\n        if (params.signQuery) {\n            _.forEach(sdk.Url.parse(signedData.path).query, function (param) {\n                // only add additional AWS specific params to request\n                if (_.startsWith(param.key, X_AMZ_PREFIX) && !request.url.query.has(param.key)) {\n                    param.system = true;\n                    request.url.query.add(param);\n                }\n            });\n        }\n\n        _.forEach(signedData.headers, function (value, key) {\n            request.upsertHeader({\n                key: key,\n                value: value,\n                system: true\n            });\n        });\n    },\n\n    /**\n     * Signs a request.\n     *\n     * @param {AuthInterface} auth -\n     * @param {Request} request -\n     * @param {AuthHandlerInterface~authSignHookCallback} done -\n     */\n    sign: function (auth, request, done) {\n        var self = this,\n            params = auth.get([\n                'accessKey',\n                'secretKey',\n                'sessionToken',\n                'service',\n                'region',\n                'addAuthDataToQuery'\n            ]),\n            url = urlEncoder.toNodeUrl(request.url),\n            dataToSign;\n\n        // Clean up the request (if needed)\n        request.removeHeader('Authorization', { ignoreCase: true });\n        request.removeHeader('X-Amz-Date', { ignoreCase: true });\n        request.removeHeader('X-Amz-Security-Token', { ignoreCase: true });\n        request.removeHeader('X-Amz-Content-Sha256', { ignoreCase: true });\n\n        // Not removing `X-Amz-Expires` from params here allowing user to override\n        // default value\n        request.removeQueryParams([\n            'X-Amz-Security-Token',\n            'X-Amz-Date',\n            'X-Amz-Algorithm',\n            'X-Amz-Credential',\n            'X-Amz-SignedHeaders',\n            'X-Amz-Signature'\n        ]);\n\n        dataToSign = {\n            credentials: {\n                accessKeyId: params.accessKey,\n                secretAccessKey: params.secretKey,\n                sessionToken: params.sessionToken || undefined\n            },\n            host: url.host,\n            path: url.path, // path = pathname + query\n            service: params.service || 'execute-api', // AWS API Gateway is the default service.\n            region: params.region || 'us-east-1',\n            method: request.method,\n            body: undefined, // no need to give body since we are setting 'X-Amz-Content-Sha256' header\n            headers: _.transform(request.getHeaders({ enabled: true }), function (accumulator, value, key) {\n                accumulator[key] = value;\n            }, {}),\n            signQuery: params.addAuthDataToQuery\n        };\n\n        // Removed the code which was adding content-type header if it is not there in the request. Because\n        // aws4 does not require content-type header. It is only mandatory to include content-type header in signature\n        // calculation if it is there in the request.\n        // Refer: https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html#canonical-request\n\n        // body hash is not required when adding auth data to qury params\n        // @see: https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\n        if (params.addAuthDataToQuery) {\n            self.addAuthDataToRequest(request, dataToSign);\n\n            return done();\n        }\n\n        // aws4 module can't calculate body hash for body with ReadStream.\n        // So we calculate it our self and set 'X-Amz-Content-Sha256' header which will be used by aws4 module\n        // to calculate the signature.\n        computeBodyHash(request.body, 'sha256', 'hex', function (bodyHash) {\n            if (bodyHash) {\n                request.upsertHeader({\n                    key: BODY_HASH_HEADER,\n                    value: bodyHash,\n                    system: true\n                });\n\n                dataToSign.headers[BODY_HASH_HEADER] = bodyHash;\n            }\n\n            self.addAuthDataToRequest(request, dataToSign);\n\n            return done();\n        });\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}