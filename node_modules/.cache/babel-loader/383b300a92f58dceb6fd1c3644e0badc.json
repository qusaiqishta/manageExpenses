{"ast":null,"code":"var bomb = {\n  /**\n   * @private\n   * @type {Object}\n   */\n  code: {\n    // @todo: could be shifted to outside the bomb object\n    FEFF: 0xFEFF,\n    BBBF: 0xBBBF,\n    FE: 0xFE,\n    FF: 0xFF,\n    EF: 0xEF,\n    BB: 0xBB,\n    BF: 0xBF\n  },\n  /**\n   * Checks whether string has BOM\n   * @param {String} str An input string that is tested for the presence of BOM\n   *\n   * @returns {Number} If greater than 0, implies that a BOM of returned length was found. Else, zero is returned.\n   */\n  indexOfBOM: function (str) {\n    if (typeof str !== 'string') {\n      return 0;\n    }\n\n    // @todo: compress logic below\n    // remove UTF-16 and UTF-32 BOM (https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8)\n    if (str.charCodeAt(0) === bomb.code.FEFF || str.charCodeAt(0) === bomb.code.BBBF) {\n      return 1;\n    }\n\n    // big endian UTF-16 BOM\n    if (str.charCodeAt(0) === bomb.code.FE && str.charCodeAt(1) === bomb.code.FF) {\n      return 2;\n    }\n\n    // little endian UTF-16 BOM\n    if (str.charCodeAt(0) === bomb.code.FF && str.charCodeAt(1) === bomb.code.FE) {\n      return 2;\n    }\n\n    // UTF-8 BOM\n    if (str.charCodeAt(0) === bomb.code.EF && str.charCodeAt(1) === bomb.code.BB && str.charCodeAt(2) === bomb.code.BF) {\n      return 3;\n    }\n    return 0;\n  },\n  /**\n   * Trim BOM from a string\n   *\n   * @param {String} str An input string that is tested for the presence of BOM\n   * @returns {String} The input string stripped of any BOM, if found. If the input is not a string, it is returned as\n   *                   is.\n   */\n  trim: function (str) {\n    var pos = bomb.indexOfBOM(str);\n    return pos ? str.slice(pos) : str;\n  }\n};\nmodule.exports = bomb;","map":{"version":3,"names":["bomb","code","FEFF","BBBF","FE","FF","EF","BB","BF","indexOfBOM","str","charCodeAt","trim","pos","slice","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/liquid-json/lib/bomb.js"],"sourcesContent":["var bomb = {\n    /**\n     * @private\n     * @type {Object}\n     */\n    code: { // @todo: could be shifted to outside the bomb object\n        FEFF: 0xFEFF,\n        BBBF: 0xBBBF,\n        FE: 0xFE,\n        FF: 0xFF,\n        EF: 0xEF,\n        BB: 0xBB,\n        BF: 0xBF\n    },\n\n    /**\n     * Checks whether string has BOM\n     * @param {String} str An input string that is tested for the presence of BOM\n     *\n     * @returns {Number} If greater than 0, implies that a BOM of returned length was found. Else, zero is returned.\n     */\n    indexOfBOM: function (str) {\n        if (typeof str !== 'string') {\n            return 0;\n        }\n\n        // @todo: compress logic below\n        // remove UTF-16 and UTF-32 BOM (https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8)\n        if ((str.charCodeAt(0) === bomb.code.FEFF) || (str.charCodeAt(0) === bomb.code.BBBF)) {\n            return 1;\n        }\n\n        // big endian UTF-16 BOM\n        if ((str.charCodeAt(0) === bomb.code.FE) && (str.charCodeAt(1) === bomb.code.FF)) {\n            return 2;\n        }\n\n        // little endian UTF-16 BOM\n        if ((str.charCodeAt(0) === bomb.code.FF) && (str.charCodeAt(1) === bomb.code.FE)) {\n            return 2;\n        }\n\n        // UTF-8 BOM\n        if ((str.charCodeAt(0) === bomb.code.EF) && (str.charCodeAt(1) === bomb.code.BB) &&\n            (str.charCodeAt(2) === bomb.code.BF)) {\n            return 3;\n        }\n\n        return 0;\n    },\n\n    /**\n     * Trim BOM from a string\n     *\n     * @param {String} str An input string that is tested for the presence of BOM\n     * @returns {String} The input string stripped of any BOM, if found. If the input is not a string, it is returned as\n     *                   is.\n     */\n    trim: function (str) {\n        var pos = bomb.indexOfBOM(str);\n        return pos ? str.slice(pos) : str;\n    }\n};\n\nmodule.exports = bomb;\n"],"mappings":"AAAA,IAAIA,IAAI,GAAG;EACP;AACJ;AACA;AACA;EACIC,IAAI,EAAE;IAAE;IACJC,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,MAAM;IACZC,EAAE,EAAE,IAAI;IACRC,EAAE,EAAE,IAAI;IACRC,EAAE,EAAE,IAAI;IACRC,EAAE,EAAE,IAAI;IACRC,EAAE,EAAE;EACR,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIC,UAAU,EAAE,UAAUC,GAAG,EAAE;IACvB,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MACzB,OAAO,CAAC;IACZ;;IAEA;IACA;IACA,IAAKA,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKX,IAAI,CAACC,IAAI,CAACC,IAAI,IAAMQ,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKX,IAAI,CAACC,IAAI,CAACE,IAAK,EAAE;MAClF,OAAO,CAAC;IACZ;;IAEA;IACA,IAAKO,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKX,IAAI,CAACC,IAAI,CAACG,EAAE,IAAMM,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKX,IAAI,CAACC,IAAI,CAACI,EAAG,EAAE;MAC9E,OAAO,CAAC;IACZ;;IAEA;IACA,IAAKK,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKX,IAAI,CAACC,IAAI,CAACI,EAAE,IAAMK,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKX,IAAI,CAACC,IAAI,CAACG,EAAG,EAAE;MAC9E,OAAO,CAAC;IACZ;;IAEA;IACA,IAAKM,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKX,IAAI,CAACC,IAAI,CAACK,EAAE,IAAMI,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKX,IAAI,CAACC,IAAI,CAACM,EAAG,IAC3EG,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKX,IAAI,CAACC,IAAI,CAACO,EAAG,EAAE;MACtC,OAAO,CAAC;IACZ;IAEA,OAAO,CAAC;EACZ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACII,IAAI,EAAE,UAAUF,GAAG,EAAE;IACjB,IAAIG,GAAG,GAAGb,IAAI,CAACS,UAAU,CAACC,GAAG,CAAC;IAC9B,OAAOG,GAAG,GAAGH,GAAG,CAACI,KAAK,CAACD,GAAG,CAAC,GAAGH,GAAG;EACrC;AACJ,CAAC;AAEDK,MAAM,CAACC,OAAO,GAAGhB,IAAI"},"metadata":{},"sourceType":"script"}