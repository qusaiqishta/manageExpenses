{"ast":null,"code":"var format = require('util').format,\n  cliUtils = require('../reporters/cli/cli-utils'),\n  SPC = ' ',\n  BS = '\\b',\n  LF = '\\n',\n  WAIT_FRAMES = /^win/.test(process.platform) ? ['\\u2015', '\\\\', '|', '/'] : ['⠄', '⠆', '⠇', '⠋', '⠙', '⠸', '⠰', '⠠', '⠰', '⠸', '⠙', '⠋', '⠇', '⠆'],\n  WAIT_FRAMES_SIZE = WAIT_FRAMES.length - 1,\n  WAIT_FRAMERATE = 100,\n  print;\n\n/**\n * Function that prints to stdout using standard NodeJS util.format, without end newline.\n *\n * @returns {print} - The result of context bound call to the run context, with all arguments passed.\n * @chainable\n */\nprint = function () {\n  return print.print.apply(this, arguments);\n};\n\n/**\n * Function that prints to stdout using standard NodeJS util.format, without end newline.\n *\n * @returns {print} - The updated print module wrapper, with unwait and unbuffer methods invoked.\n * @chainable\n */\nprint.print = function () {\n  print.waiting && print.unwait();\n  print._buffer && print.unbuffer();\n  process.stdout.write(format.apply(this, arguments));\n  return print;\n};\n\n/**\n * Print with a line feed at the end.\n *\n * @returns {print} - The updated print module wrapper, with unwait and unbuffer methods invoked.\n * @chainable\n */\nprint.lf = function () {\n  print.waiting && print.unwait();\n  print._buffer && print.unbuffer();\n  process.stdout.write(format.apply(this, arguments) + LF);\n  return print;\n};\n\n// store the starting frame during wait\nprint._waitPosition = 0;\n\n/**\n * Draw a spinner until next print statement is received.\n *\n * @param {Function=} color - Optional color function from `colors` module.\n * @returns {print} - The print module wrapper, with a key set as a setInterval label.\n * @chainable\n */\nprint.wait = function (color) {\n  print.unwait();\n  if (cliUtils.noTTY()) {\n    return print;\n  }\n  process.stdout.write(SPC);\n  print.waiting = setInterval(function () {\n    process.stdout.write(BS + (color ? color(WAIT_FRAMES[print._waitPosition++]) : WAIT_FRAMES[print._waitPosition++]));\n    print._waitPosition > WAIT_FRAMES_SIZE && (print._waitPosition = 0); // move frame\n  }, WAIT_FRAMERATE);\n  return print;\n};\n\n/**\n * Stops a running spinner on CLI. It is automatically taken care of in most cases.\n *\n * @returns {print} - Returns the updated print module wrapper, with the cleared waiting label.\n * @chainable\n * @see print.wait\n */\nprint.unwait = function () {\n  if (print.waiting) {\n    print.waiting = clearInterval(print.waiting);\n    print._waitPosition = 0;\n    process.stdout.write('\\b');\n  }\n  return print;\n};\nprint._buffer = undefined;\n\n/**\n * Prints a message between start and end text. Consequent buffer calls does not print the start text and any other\n * unbuffered call or a delay of time prints the end text.\n *\n * @param {String} startText - The text to begin printing with.\n * @param {String} endText - The text that marks the end of the print routine.\n * @returns {print} - The update print module wrapper with internal buffer and buffering members redefined.\n * @chainable\n */\nprint.buffer = function (startText, endText) {\n  print._buffer === undefined && process.stdout.write(startText);\n  print._buffer = endText;\n  print._buferring && (print._buferring = clearTimeout(print._buferring));\n  print._buferring = setTimeout(print.unbuffer, 500);\n  process.stdout.write(format.apply(this, Array.prototype.splice.call(arguments, 2)));\n  return print;\n};\n\n/**\n * Prints text without flushing the buffer.\n *\n * @returns {print} - The update print module wrapper with unwait called.\n * @chainable\n * @see print.buffer\n */\nprint.nobuffer = function () {\n  print.unwait();\n  process.stdout.write(format.apply(this, arguments));\n  return print;\n};\n\n/**\n * Flushes the buffer.\n *\n * @returns {print} - The print module wrapper with internal private members: buffer, and buffering redefined.\n * @chainable\n * @see print.buffer\n */\nprint.unbuffer = function () {\n  print._buferring && (print._buferring = clearTimeout(print._buferring));\n  if (print._buffer) {\n    process.stdout.write(print._buffer);\n    print._buffer = undefined;\n  }\n  return print;\n};\nmodule.exports = print;","map":{"version":3,"names":["format","require","cliUtils","SPC","BS","LF","WAIT_FRAMES","test","process","platform","WAIT_FRAMES_SIZE","length","WAIT_FRAMERATE","print","apply","arguments","waiting","unwait","_buffer","unbuffer","stdout","write","lf","_waitPosition","wait","color","noTTY","setInterval","clearInterval","undefined","buffer","startText","endText","_buferring","clearTimeout","setTimeout","Array","prototype","splice","call","nobuffer","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/newman/lib/print/index.js"],"sourcesContent":["var format = require('util').format,\n    cliUtils = require('../reporters/cli/cli-utils'),\n    SPC = ' ',\n    BS = '\\b',\n    LF = '\\n',\n    WAIT_FRAMES = (/^win/).test(process.platform) ?\n        ['\\u2015', '\\\\', '|', '/'] :\n        ['⠄', '⠆', '⠇', '⠋', '⠙', '⠸', '⠰', '⠠', '⠰', '⠸', '⠙', '⠋', '⠇', '⠆'],\n    WAIT_FRAMES_SIZE = WAIT_FRAMES.length - 1,\n    WAIT_FRAMERATE = 100,\n    print;\n\n/**\n * Function that prints to stdout using standard NodeJS util.format, without end newline.\n *\n * @returns {print} - The result of context bound call to the run context, with all arguments passed.\n * @chainable\n */\nprint = function () {\n    return print.print.apply(this, arguments);\n};\n\n/**\n * Function that prints to stdout using standard NodeJS util.format, without end newline.\n *\n * @returns {print} - The updated print module wrapper, with unwait and unbuffer methods invoked.\n * @chainable\n */\nprint.print = function () {\n    print.waiting && print.unwait();\n    print._buffer && print.unbuffer();\n    process.stdout.write(format.apply(this, arguments));\n\n    return print;\n};\n\n/**\n * Print with a line feed at the end.\n *\n * @returns {print} - The updated print module wrapper, with unwait and unbuffer methods invoked.\n * @chainable\n */\nprint.lf = function () {\n    print.waiting && print.unwait();\n    print._buffer && print.unbuffer();\n    process.stdout.write(format.apply(this, arguments) + LF);\n\n    return print;\n};\n\n// store the starting frame during wait\nprint._waitPosition = 0;\n\n/**\n * Draw a spinner until next print statement is received.\n *\n * @param {Function=} color - Optional color function from `colors` module.\n * @returns {print} - The print module wrapper, with a key set as a setInterval label.\n * @chainable\n */\nprint.wait = function (color) {\n    print.unwait();\n\n    if (cliUtils.noTTY()) {\n        return print;\n    }\n\n    process.stdout.write(SPC);\n    print.waiting = setInterval(function () {\n        process.stdout.write(BS +\n            (color ? color(WAIT_FRAMES[print._waitPosition++]) : WAIT_FRAMES[print._waitPosition++]));\n        (print._waitPosition > WAIT_FRAMES_SIZE) && (print._waitPosition = 0); // move frame\n    }, WAIT_FRAMERATE);\n\n    return print;\n};\n\n/**\n * Stops a running spinner on CLI. It is automatically taken care of in most cases.\n *\n * @returns {print} - Returns the updated print module wrapper, with the cleared waiting label.\n * @chainable\n * @see print.wait\n */\nprint.unwait = function () {\n    if (print.waiting) {\n        print.waiting = clearInterval(print.waiting);\n        print._waitPosition = 0;\n        process.stdout.write('\\b');\n    }\n\n    return print;\n};\n\nprint._buffer = undefined;\n\n/**\n * Prints a message between start and end text. Consequent buffer calls does not print the start text and any other\n * unbuffered call or a delay of time prints the end text.\n *\n * @param {String} startText - The text to begin printing with.\n * @param {String} endText - The text that marks the end of the print routine.\n * @returns {print} - The update print module wrapper with internal buffer and buffering members redefined.\n * @chainable\n */\nprint.buffer = function (startText, endText) {\n    (print._buffer === undefined) && process.stdout.write(startText);\n    print._buffer = endText;\n\n    print._buferring && (print._buferring = clearTimeout(print._buferring));\n    print._buferring = setTimeout(print.unbuffer, 500);\n\n    process.stdout.write(format.apply(this, Array.prototype.splice.call(arguments, 2)));\n\n    return print;\n};\n\n/**\n * Prints text without flushing the buffer.\n *\n * @returns {print} - The update print module wrapper with unwait called.\n * @chainable\n * @see print.buffer\n */\nprint.nobuffer = function () {\n    print.unwait();\n    process.stdout.write(format.apply(this, arguments));\n\n    return print;\n};\n\n/**\n * Flushes the buffer.\n *\n * @returns {print} - The print module wrapper with internal private members: buffer, and buffering redefined.\n * @chainable\n * @see print.buffer\n */\nprint.unbuffer = function () {\n    print._buferring && (print._buferring = clearTimeout(print._buferring));\n    if (print._buffer) {\n        process.stdout.write(print._buffer);\n        print._buffer = undefined;\n    }\n\n    return print;\n};\n\nmodule.exports = print;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}