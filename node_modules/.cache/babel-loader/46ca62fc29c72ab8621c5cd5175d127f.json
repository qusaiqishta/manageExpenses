{"ast":null,"code":"var _ = require('../util').lodash,\n  Property = require('./property').Property,\n  VariableList = require('./variable-list').VariableList,\n  RequestAuth;\n\n/**\n * This defines the definition of the authentication method to be used.\n *\n * @typedef RequestAuth.definition\n * @property {String=} type The Auth type to use. Check the names in {@link AuthTypes}\n *\n * @example <caption>Sample auth definition for Basic Auth</caption>\n * {\n *   \"type\": \"basic\",\n *   \"basic\": [\n *     { \"key\": \"username\", \"value\": \"postman\" },\n *     { \"key\": \"password\", \"value\": \"secrets\" }\n *   ]\n * }\n */\n_.inherit(\n/**\n * A Postman Auth definition that comprehensively represents different types of auth mechanisms available.\n *\n * @constructor\n * @extends {Property}\n *\n * @param {RequestAuth.definition} options Pass the initial definition of the Auth.\n * @param {Property|PropertyList=} [parent] optionally pass the parent of this auth. aides variable resolution.\n *\n * @example <caption>Creating a request with two auth data and one selected</caption>\n * var auth = new RequestAuth({\n *   type: 'digest',\n *\n *   basic: [\n *     { key: \"username\", value: \"postman\" },\n *     { key: \"password\", value: \"secrets\" }\n *   ],\n *   digest: [\n *     { key: \"nonce\", value: \"aef54cde\" },\n *     { key: \"realm\", value: \"items.x\" }\n *   ]\n * });\n *\n * // change the selected auth\n * auth.use('basic');\n */\nRequestAuth = function PostmanRequestAuth(options, parent) {\n  // this constructor is intended to inherit and as such the super constructor is required to be executed\n  RequestAuth.super_.call(this, options);\n\n  // set the parent\n  parent && this.setParent(parent);\n\n  // set the type, if passed via options\n  if (_.has(options, 'type')) {\n    this.use(options.type);\n  }\n\n  // load all possible auth parameters from options\n  _.forEach(_.omit(options, 'type'), this.update.bind(this));\n}, Property);\n_.assign(RequestAuth.prototype, /** @lends RequestAuth.prototype */{\n  /**\n   * Update the parameters of a specific authentication type. If none is provided then it uses the one marked as to be\n   * used.\n   *\n   * @param {VariableList|Array|Object} options -\n   * @param {String=} [type=this.type] -\n   */\n  update(options, type) {\n    // update must have options\n    if (!_.isObject(options)) {\n      return;\n    }\n    // choose default from existing type if not provided\n    if (!type) {\n      type = this.type;\n    }\n    // validate type parameter and return in case type is not valid.\n    if (!RequestAuth.isValidType(type)) {\n      return;\n    }\n    var parameters = this[type];\n\n    // in case the type holder is not created, we create one and send the population variables\n    if (!VariableList.isVariableList(parameters)) {\n      // @todo optimise the handling of legacy object type auth parameters\n      parameters = this[type] = new VariableList(this);\n      parameters._postman_requestAuthType = type;\n    }\n\n    // we simply assimilate the new options either it is an array or an object\n    if (_.isArray(options) || VariableList.isVariableList(options)) {\n      parameters.assimilate(options);\n    } else {\n      parameters.syncFromObject(options, false, false); // params: no need to track and no need to prune\n    }\n  },\n\n  /**\n   * Sets the authentication type to be used by this item.\n   *\n   * @param {String} type -\n   * @param {VariableList|Array|Object} options - note that options set here would replace all existing\n   * options for the particular auth\n   */\n  use(type, options) {\n    if (!RequestAuth.isValidType(type)) {\n      return;\n    }\n    this.type = type; // set the type\n\n    var parameters = this[type];\n    if (!VariableList.isVariableList(parameters)) {\n      parameters = this[type] = new VariableList(this);\n    }\n\n    // we simply assimilate the new options either it is an array or an object\n    if (_.isArray(options) || VariableList.isVariableList(options)) {\n      parameters.assimilate(options);\n    } else {\n      parameters.syncFromObject(options, false, false); // params: no need to track and no need to prune\n    }\n  },\n\n  /**\n   * @private\n   * @deprecated discontinued in v4.0\n   */\n  current() {\n    throw new Error('`Request#current` has been discontinued, use `Request#parameters` instead.');\n  },\n  /**\n   * Returns the parameters of the selected auth type\n   *\n   * @returns {VariableList}\n   */\n  parameters() {\n    return this[this.type];\n  },\n  /**\n   * Clears the definition of an auth type.\n   *\n   * @param {String} type -\n   */\n  clear(type) {\n    if (!(RequestAuth.isValidType(type) && VariableList.isVariableList(this[type]))) {\n      return;\n    }\n\n    // clear the variable list\n    this[type].clear();\n\n    // if it is not a currently selected auth type, do not delete the variable list, but simply delete it\n    if (type !== this.type) {\n      delete this[type];\n    }\n  }\n});\n_.assign(RequestAuth, /** @lends RequestAuth */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'RequestAuth',\n  /**\n   * Determines whether an authentication type name is valid or not\n   *\n   * @param {String} type -\n   * @returns {Boolean}\n   */\n  isValidType: function (type) {\n    // no auth name can be \"type\", else will have namespace collision with type selector\n    return _.isString(type) && type !== 'type';\n  }\n});\nmodule.exports = {\n  RequestAuth\n};","map":{"version":3,"names":["_","require","lodash","Property","VariableList","RequestAuth","inherit","PostmanRequestAuth","options","parent","super_","call","setParent","has","use","type","forEach","omit","update","bind","assign","prototype","isObject","isValidType","parameters","isVariableList","_postman_requestAuthType","isArray","assimilate","syncFromObject","current","Error","clear","_postman_propertyName","isString","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/request-auth.js"],"sourcesContent":["var _ = require('../util').lodash,\n    Property = require('./property').Property,\n    VariableList = require('./variable-list').VariableList,\n\n    RequestAuth;\n\n/**\n * This defines the definition of the authentication method to be used.\n *\n * @typedef RequestAuth.definition\n * @property {String=} type The Auth type to use. Check the names in {@link AuthTypes}\n *\n * @example <caption>Sample auth definition for Basic Auth</caption>\n * {\n *   \"type\": \"basic\",\n *   \"basic\": [\n *     { \"key\": \"username\", \"value\": \"postman\" },\n *     { \"key\": \"password\", \"value\": \"secrets\" }\n *   ]\n * }\n */\n_.inherit((\n\n    /**\n     * A Postman Auth definition that comprehensively represents different types of auth mechanisms available.\n     *\n     * @constructor\n     * @extends {Property}\n     *\n     * @param {RequestAuth.definition} options Pass the initial definition of the Auth.\n     * @param {Property|PropertyList=} [parent] optionally pass the parent of this auth. aides variable resolution.\n     *\n     * @example <caption>Creating a request with two auth data and one selected</caption>\n     * var auth = new RequestAuth({\n     *   type: 'digest',\n     *\n     *   basic: [\n     *     { key: \"username\", value: \"postman\" },\n     *     { key: \"password\", value: \"secrets\" }\n     *   ],\n     *   digest: [\n     *     { key: \"nonce\", value: \"aef54cde\" },\n     *     { key: \"realm\", value: \"items.x\" }\n     *   ]\n     * });\n     *\n     * // change the selected auth\n     * auth.use('basic');\n     */\n    RequestAuth = function PostmanRequestAuth (options, parent) {\n        // this constructor is intended to inherit and as such the super constructor is required to be executed\n        RequestAuth.super_.call(this, options);\n\n        // set the parent\n        parent && this.setParent(parent);\n\n        // set the type, if passed via options\n        if (_.has(options, 'type')) {\n            this.use(options.type);\n        }\n\n        // load all possible auth parameters from options\n        _.forEach(_.omit(options, 'type'), this.update.bind(this));\n    }), Property);\n\n_.assign(RequestAuth.prototype, /** @lends RequestAuth.prototype */ {\n    /**\n     * Update the parameters of a specific authentication type. If none is provided then it uses the one marked as to be\n     * used.\n     *\n     * @param {VariableList|Array|Object} options -\n     * @param {String=} [type=this.type] -\n     */\n    update (options, type) {\n        // update must have options\n        if (!_.isObject(options)) { return; }\n        // choose default from existing type if not provided\n        if (!type) { type = this.type; }\n        // validate type parameter and return in case type is not valid.\n        if (!RequestAuth.isValidType(type)) { return; }\n\n        var parameters = this[type];\n\n        // in case the type holder is not created, we create one and send the population variables\n        if (!VariableList.isVariableList(parameters)) {\n            // @todo optimise the handling of legacy object type auth parameters\n            parameters = this[type] = new VariableList(this);\n            parameters._postman_requestAuthType = type;\n        }\n\n        // we simply assimilate the new options either it is an array or an object\n        if (_.isArray(options) || VariableList.isVariableList(options)) {\n            parameters.assimilate(options);\n        }\n        else {\n            parameters.syncFromObject(options, false, false); // params: no need to track and no need to prune\n        }\n    },\n\n    /**\n     * Sets the authentication type to be used by this item.\n     *\n     * @param {String} type -\n     * @param {VariableList|Array|Object} options - note that options set here would replace all existing\n     * options for the particular auth\n     */\n    use (type, options) {\n        if (!RequestAuth.isValidType(type)) { return; }\n\n        this.type = type; // set the type\n\n        var parameters = this[type];\n\n        if (!VariableList.isVariableList(parameters)) {\n            parameters = this[type] = new VariableList(this);\n        }\n\n        // we simply assimilate the new options either it is an array or an object\n        if (_.isArray(options) || VariableList.isVariableList(options)) {\n            parameters.assimilate(options);\n        }\n        else {\n            parameters.syncFromObject(options, false, false); // params: no need to track and no need to prune\n        }\n    },\n\n    /**\n     * @private\n     * @deprecated discontinued in v4.0\n     */\n    current () {\n        throw new Error('`Request#current` has been discontinued, use `Request#parameters` instead.');\n    },\n\n    /**\n     * Returns the parameters of the selected auth type\n     *\n     * @returns {VariableList}\n     */\n    parameters () {\n        return this[this.type];\n    },\n\n    /**\n     * Clears the definition of an auth type.\n     *\n     * @param {String} type -\n     */\n    clear (type) {\n        if (!(RequestAuth.isValidType(type) && VariableList.isVariableList(this[type]))) {\n            return;\n        }\n\n        // clear the variable list\n        this[type].clear();\n\n        // if it is not a currently selected auth type, do not delete the variable list, but simply delete it\n        if (type !== this.type) {\n            delete this[type];\n        }\n    }\n});\n\n_.assign(RequestAuth, /** @lends RequestAuth */ {\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'RequestAuth',\n\n    /**\n     * Determines whether an authentication type name is valid or not\n     *\n     * @param {String} type -\n     * @returns {Boolean}\n     */\n    isValidType: function (type) {\n        // no auth name can be \"type\", else will have namespace collision with type selector\n        return _.isString(type) && (type !== 'type');\n    }\n});\n\nmodule.exports = {\n    RequestAuth\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}