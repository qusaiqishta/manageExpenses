{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nvar _utils = require('../utils');\nvar _exception = require('../exception');\nvar _exception2 = _interopRequireDefault(_exception);\nexports['default'] = function (instance) {\n  instance.registerHelper('each', function (context, options) {\n    if (!options) {\n      throw new _exception2['default']('Must pass iterator to #each');\n    }\n    var fn = options.fn,\n      inverse = options.inverse,\n      i = 0,\n      ret = '',\n      data = undefined,\n      contextPath = undefined;\n    if (options.data && options.ids) {\n      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n    if (options.data) {\n      data = _utils.createFrame(options.data);\n    }\n    function execIteration(field, index, last) {\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n      ret = ret + fn(context[field], {\n        data: data,\n        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])\n      });\n    }\n    if (context && typeof context === 'object') {\n      if (_utils.isArray(context)) {\n        for (var j = context.length; i < j; i++) {\n          if (i in context) {\n            execIteration(i, i, i === context.length - 1);\n          }\n        }\n      } else if (global.Symbol && context[global.Symbol.iterator]) {\n        var newContext = [];\n        var iterator = context[global.Symbol.iterator]();\n        for (var it = iterator.next(); !it.done; it = iterator.next()) {\n          newContext.push(it.value);\n        }\n        context = newContext;\n        for (var j = context.length; i < j; i++) {\n          execIteration(i, i, i === context.length - 1);\n        }\n      } else {\n        (function () {\n          var priorKey = undefined;\n          Object.keys(context).forEach(function (key) {\n            // We're running the iterations one step out of sync so we can detect\n            // the last iteration without have to scan the object twice and create\n            // an itermediate keys array.\n            if (priorKey !== undefined) {\n              execIteration(priorKey, i - 1);\n            }\n            priorKey = key;\n            i++;\n          });\n          if (priorKey !== undefined) {\n            execIteration(priorKey, i - 1, true);\n          }\n        })();\n      }\n    }\n    if (i === 0) {\n      ret = inverse(this);\n    }\n    return ret;\n  });\n};\nmodule.exports = exports['default'];","map":{"version":3,"mappings":"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","names":["instance","registerHelper","context","options","fn","inverse","i","ret","data","contextPath","ids","_utils","call","execIteration","field","index","last","key","first","blockParams","j","length","global","Symbol","iterator","newContext","it","next","done","push","value","priorKey","Object","keys","forEach","undefined"],"sources":["../../../../lib/handlebars/helpers/each.js"],"sourcesContent":["import {\n  appendContextPath,\n  blockParams,\n  createFrame,\n  isArray,\n  isFunction\n} from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('each', function(context, options) {\n    if (!options) {\n      throw new Exception('Must pass iterator to #each');\n    }\n\n    let fn = options.fn,\n      inverse = options.inverse,\n      i = 0,\n      ret = '',\n      data,\n      contextPath;\n\n    if (options.data && options.ids) {\n      contextPath =\n        appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (isFunction(context)) {\n      context = context.call(this);\n    }\n\n    if (options.data) {\n      data = createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret =\n        ret +\n        fn(context[field], {\n          data: data,\n          blockParams: blockParams(\n            [context[field], field],\n            [contextPath + field, null]\n          )\n        });\n    }\n\n    if (context && typeof context === 'object') {\n      if (isArray(context)) {\n        for (let j = context.length; i < j; i++) {\n          if (i in context) {\n            execIteration(i, i, i === context.length - 1);\n          }\n        }\n      } else if (global.Symbol && context[global.Symbol.iterator]) {\n        const newContext = [];\n        const iterator = context[global.Symbol.iterator]();\n        for (let it = iterator.next(); !it.done; it = iterator.next()) {\n          newContext.push(it.value);\n        }\n        context = newContext;\n        for (let j = context.length; i < j; i++) {\n          execIteration(i, i, i === context.length - 1);\n        }\n      } else {\n        let priorKey;\n\n        Object.keys(context).forEach(key => {\n          // We're running the iterations one step out of sync so we can detect\n          // the last iteration without have to scan the object twice and create\n          // an itermediate keys array.\n          if (priorKey !== undefined) {\n            execIteration(priorKey, i - 1);\n          }\n          priorKey = key;\n          i++;\n        });\n        if (priorKey !== undefined) {\n          execIteration(priorKey, i - 1, true);\n        }\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  });\n}\n"]},"metadata":{},"sourceType":"script"}