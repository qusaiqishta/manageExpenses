{"ast":null,"code":"var stacktrace = require('stack-trace'),\n  hash = require('object-hash'),\n  uuid = require('uuid'),\n  SerialisedError;\nSerialisedError = function (err, decorate) {\n  var now = new Date(); // to hold date here before any more time is lost\n\n  // If the function is called without the `new` operator, then we do it on behalf of the callee\n  if (!(this instanceof SerialisedError)) {\n    return new SerialisedError(err, decorate);\n  }\n\n  // Iterate on user-defined properties of error and mix in the default non ennumerable properties\n  typeof err === 'object' && err !== null && Object.keys(err).concat(['name', 'message', 'stack']).forEach(function (key) {\n    this[key] = err[key];\n  }, this);\n\n  // add additional meta information\n  if (decorate) {\n    this.checksum = hash.MD5(this);\n    this.id = uuid.v4();\n    this.timestamp = now.getTime();\n    this.stacktrace = stacktrace.parse(this);\n  }\n};\nmodule.exports = SerialisedError;","map":{"version":3,"names":["stacktrace","require","hash","uuid","SerialisedError","err","decorate","now","Date","Object","keys","concat","forEach","key","checksum","MD5","id","v4","timestamp","getTime","parse","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/serialised-error/index.js"],"sourcesContent":["var stacktrace = require('stack-trace'),\n    hash = require('object-hash'),\n    uuid = require('uuid'),\n    SerialisedError;\n\nSerialisedError = function (err, decorate) {\n    var now = new Date(); // to hold date here before any more time is lost\n\n    // If the function is called without the `new` operator, then we do it on behalf of the callee\n\tif (!(this instanceof SerialisedError)) {\n\t\treturn new SerialisedError(err, decorate);\n\t}\n\n    // Iterate on user-defined properties of error and mix in the default non ennumerable properties\n\t(typeof err === 'object') && (err !== null) &&\n        Object.keys(err).concat(['name', 'message', 'stack']).forEach(function (key) {\n    \t\tthis[key] = err[key];\n    \t}, this);\n\n    // add additional meta information\n    if (decorate) {\n        this.checksum = hash.MD5(this);\n        this.id = uuid.v4();\n        this.timestamp = now.getTime();\n        this.stacktrace = stacktrace.parse(this);\n    }\n};\n\nmodule.exports = SerialisedError;\n"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,aAAa,CAAC;EACnCC,IAAI,GAAGD,OAAO,CAAC,aAAa,CAAC;EAC7BE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;EACtBG,eAAe;AAEnBA,eAAe,GAAG,UAAUC,GAAG,EAAEC,QAAQ,EAAE;EACvC,IAAIC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAAC,CAAC;;EAEtB;EACH,IAAI,EAAE,IAAI,YAAYJ,eAAe,CAAC,EAAE;IACvC,OAAO,IAAIA,eAAe,CAACC,GAAG,EAAEC,QAAQ,CAAC;EAC1C;;EAEG;EACF,OAAOD,GAAG,KAAK,QAAQ,IAAMA,GAAG,KAAK,IAAK,IACpCI,MAAM,CAACC,IAAI,CAACL,GAAG,CAAC,CAACM,MAAM,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;IAC/E,IAAI,CAACA,GAAG,CAAC,GAAGR,GAAG,CAACQ,GAAG,CAAC;EACrB,CAAC,EAAE,IAAI,CAAC;;EAET;EACA,IAAIP,QAAQ,EAAE;IACV,IAAI,CAACQ,QAAQ,GAAGZ,IAAI,CAACa,GAAG,CAAC,IAAI,CAAC;IAC9B,IAAI,CAACC,EAAE,GAAGb,IAAI,CAACc,EAAE,EAAE;IACnB,IAAI,CAACC,SAAS,GAAGX,GAAG,CAACY,OAAO,EAAE;IAC9B,IAAI,CAACnB,UAAU,GAAGA,UAAU,CAACoB,KAAK,CAAC,IAAI,CAAC;EAC5C;AACJ,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGlB,eAAe"},"metadata":{},"sourceType":"script"}