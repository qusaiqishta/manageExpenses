{"ast":null,"code":"var _ = require('../util').lodash,\n  Property = require('./property').Property,\n  PropertyBase = require('./property-base').PropertyBase,\n  FormParam;\n\n/**\n * @typedef FormParam.definition\n * @property {String} key The name (\"key\") of the form data parameter.\n * @property {String} value The value of the parameter.\n */\n_.inherit(\n/**\n * Represents a Form Data parameter, which can exist in request body.\n *\n * @constructor\n * @param {FormParam.definition} options Pass the initial definition of the form data parameter.\n */\nFormParam = function PostmanFormParam() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  FormParam.super_.apply(this, arguments);\n  this.key = options.key || '';\n  this.value = options.value || '';\n  this.type = options.type;\n  this.src = options.src;\n  this.contentType = options.contentType;\n}, Property);\n_.assign(FormParam.prototype, /** @lends FormParam.prototype */{\n  /**\n   * Converts the FormParameter to a single param string.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this.key + '=' + this.value;\n  },\n  /**\n   * Returns the value of the form parameter (if any).\n   *\n   * @returns {*|String}\n   */\n  valueOf() {\n    return this.value; // can be multiple types, so just return whatever we have instead of being too clever\n  },\n\n  /**\n   * Convert the form-param to JSON compatible plain object.\n   *\n   * @returns {Object}\n   */\n  toJSON() {\n    var obj = PropertyBase.toJSON(this);\n\n    // remove value from file param because it is non-serializable ReadStream\n    if (obj.type === 'file') {\n      _.unset(obj, 'value');\n    }\n    return obj;\n  }\n});\n_.assign(FormParam, /** @lends FormParam */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'FormParam',\n  /**\n   * Declare the list index key, so that property lists of form parameters work correctly\n   *\n   * @type {String}\n   */\n  _postman_propertyIndexKey: 'key',\n  /**\n   * Form params can have multiple values, so set this to true.\n   *\n   * @type {Boolean}\n   */\n  _postman_propertyAllowsMultipleValues: true,\n  /**\n   * Parse a form data string into an array of objects, where each object contains a key and a value.\n   *\n   * @todo implement this, not implemented yet.\n   * @param formdata {String}\n   * @returns {Array}\n   */\n  parse: _.noop\n});\nmodule.exports = {\n  FormParam\n};","map":{"version":3,"names":["_","require","lodash","Property","PropertyBase","FormParam","inherit","PostmanFormParam","options","super_","apply","arguments","key","value","type","src","contentType","assign","prototype","toString","valueOf","toJSON","obj","unset","_postman_propertyName","_postman_propertyIndexKey","_postman_propertyAllowsMultipleValues","parse","noop","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/form-param.js"],"sourcesContent":["var _ = require('../util').lodash,\n    Property = require('./property').Property,\n    PropertyBase = require('./property-base').PropertyBase,\n\n    FormParam;\n\n/**\n * @typedef FormParam.definition\n * @property {String} key The name (\"key\") of the form data parameter.\n * @property {String} value The value of the parameter.\n */\n_.inherit((\n\n    /**\n     * Represents a Form Data parameter, which can exist in request body.\n     *\n     * @constructor\n     * @param {FormParam.definition} options Pass the initial definition of the form data parameter.\n     */\n    FormParam = function PostmanFormParam (options = {}) {\n        FormParam.super_.apply(this, arguments);\n\n        this.key = options.key || '';\n        this.value = options.value || '';\n        this.type = options.type;\n        this.src = options.src;\n        this.contentType = options.contentType;\n    }), Property);\n\n_.assign(FormParam.prototype, /** @lends FormParam.prototype */ {\n    /**\n     * Converts the FormParameter to a single param string.\n     *\n     * @returns {String}\n     */\n    toString () {\n        return this.key + '=' + this.value;\n    },\n\n    /**\n     * Returns the value of the form parameter (if any).\n     *\n     * @returns {*|String}\n     */\n    valueOf () {\n        return this.value; // can be multiple types, so just return whatever we have instead of being too clever\n    },\n\n    /**\n     * Convert the form-param to JSON compatible plain object.\n     *\n     * @returns {Object}\n     */\n    toJSON () {\n        var obj = PropertyBase.toJSON(this);\n\n        // remove value from file param because it is non-serializable ReadStream\n        if (obj.type === 'file') {\n            _.unset(obj, 'value');\n        }\n\n        return obj;\n    }\n});\n\n_.assign(FormParam, /** @lends FormParam */ {\n\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'FormParam',\n\n    /**\n     * Declare the list index key, so that property lists of form parameters work correctly\n     *\n     * @type {String}\n     */\n    _postman_propertyIndexKey: 'key',\n\n    /**\n     * Form params can have multiple values, so set this to true.\n     *\n     * @type {Boolean}\n     */\n    _postman_propertyAllowsMultipleValues: true,\n\n    /**\n     * Parse a form data string into an array of objects, where each object contains a key and a value.\n     *\n     * @todo implement this, not implemented yet.\n     * @param formdata {String}\n     * @returns {Array}\n     */\n    parse: _.noop\n});\n\nmodule.exports = {\n    FormParam\n};\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM;EAC7BC,QAAQ,GAAGF,OAAO,CAAC,YAAY,CAAC,CAACE,QAAQ;EACzCC,YAAY,GAAGH,OAAO,CAAC,iBAAiB,CAAC,CAACG,YAAY;EAEtDC,SAAS;;AAEb;AACA;AACA;AACA;AACA;AACAL,CAAC,CAACM,OAAO;AAEL;AACJ;AACA;AACA;AACA;AACA;AACID,SAAS,GAAG,SAASE,gBAAgB,GAAgB;EAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;EAC/CH,SAAS,CAACI,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAEvC,IAAI,CAACC,GAAG,GAAGJ,OAAO,CAACI,GAAG,IAAI,EAAE;EAC5B,IAAI,CAACC,KAAK,GAAGL,OAAO,CAACK,KAAK,IAAI,EAAE;EAChC,IAAI,CAACC,IAAI,GAAGN,OAAO,CAACM,IAAI;EACxB,IAAI,CAACC,GAAG,GAAGP,OAAO,CAACO,GAAG;EACtB,IAAI,CAACC,WAAW,GAAGR,OAAO,CAACQ,WAAW;AAC1C,CAAC,EAAGb,QAAQ,CAAC;AAEjBH,CAAC,CAACiB,MAAM,CAACZ,SAAS,CAACa,SAAS,EAAE,iCAAkC;EAC5D;AACJ;AACA;AACA;AACA;EACIC,QAAQ,GAAI;IACR,OAAO,IAAI,CAACP,GAAG,GAAG,GAAG,GAAG,IAAI,CAACC,KAAK;EACtC,CAAC;EAED;AACJ;AACA;AACA;AACA;EACIO,OAAO,GAAI;IACP,OAAO,IAAI,CAACP,KAAK,CAAC,CAAC;EACvB,CAAC;;EAED;AACJ;AACA;AACA;AACA;EACIQ,MAAM,GAAI;IACN,IAAIC,GAAG,GAAGlB,YAAY,CAACiB,MAAM,CAAC,IAAI,CAAC;;IAEnC;IACA,IAAIC,GAAG,CAACR,IAAI,KAAK,MAAM,EAAE;MACrBd,CAAC,CAACuB,KAAK,CAACD,GAAG,EAAE,OAAO,CAAC;IACzB;IAEA,OAAOA,GAAG;EACd;AACJ,CAAC,CAAC;AAEFtB,CAAC,CAACiB,MAAM,CAACZ,SAAS,EAAE,uBAAwB;EAExC;AACJ;AACA;AACA;AACA;AACA;AACA;EACImB,qBAAqB,EAAE,WAAW;EAElC;AACJ;AACA;AACA;AACA;EACIC,yBAAyB,EAAE,KAAK;EAEhC;AACJ;AACA;AACA;AACA;EACIC,qCAAqC,EAAE,IAAI;EAE3C;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,KAAK,EAAE3B,CAAC,CAAC4B;AACb,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAG;EACbzB;AACJ,CAAC"},"metadata":{},"sourceType":"script"}