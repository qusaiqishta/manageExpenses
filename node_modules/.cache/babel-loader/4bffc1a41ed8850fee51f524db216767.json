{"ast":null,"code":"/**\n * Copyright (c) 2013 Sam Decrock https://github.com/SamDecrock/\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar url = require('url');\nvar httpreq = require('httpreq');\nvar ntlm = require('./ntlm');\nvar _ = require('underscore');\nvar http = require('http');\nvar https = require('https');\nexports.method = function (method, options, finalCallback) {\n  if (!options.workstation) options.workstation = '';\n  if (!options.domain) options.domain = '';\n\n  // extract non-ntlm-options:\n  var httpreqOptions = _.omit(options, 'url', 'username', 'password', 'workstation', 'domain');\n\n  // is https?\n  var isHttps = false;\n  var reqUrl = url.parse(options.url);\n  if (reqUrl.protocol == 'https:') isHttps = true;\n\n  // set keepaliveAgent (http or https):\n  var keepaliveAgent;\n  if (isHttps) {\n    keepaliveAgent = new https.Agent({\n      keepAlive: true\n    });\n  } else {\n    keepaliveAgent = new http.Agent({\n      keepAlive: true\n    });\n  }\n\n  // build type1 request:\n\n  function sendType1Message(callback) {\n    var type1msg = ntlm.createType1Message(options);\n    var type1options = {\n      headers: {\n        'Connection': 'keep-alive',\n        'Authorization': type1msg\n      },\n      timeout: options.timeout || 0,\n      agent: keepaliveAgent,\n      allowRedirects: false // don't redirect in httpreq, because http could change to https which means we need to change the keepaliveAgent\n    };\n\n    // pass along other options:\n    type1options = _.extend({}, _.omit(httpreqOptions, 'headers', 'body'), type1options);\n\n    // send type1 message to server:\n    httpreq[method](options.url, type1options, callback);\n  }\n  function sendType3Message(res, callback) {\n    // catch redirect here:\n    if (res.headers.location) {\n      options.url = res.headers.location;\n      return exports[method](options, finalCallback);\n    }\n    if (!res.headers['www-authenticate']) return callback(new Error('www-authenticate not found on response of second request'));\n\n    // parse type2 message from server:\n    var type2msg = ntlm.parseType2Message(res.headers['www-authenticate'], callback); //callback only happens on errors\n    if (!type2msg) return; // if callback returned an error, the parse-function returns with null\n\n    // create type3 message:\n    var type3msg = ntlm.createType3Message(type2msg, options);\n\n    // build type3 request:\n    var type3options = {\n      headers: {\n        'Connection': 'Close',\n        'Authorization': type3msg\n      },\n      allowRedirects: false,\n      agent: keepaliveAgent\n    };\n\n    // pass along other options:\n    type3options.headers = _.extend(type3options.headers, httpreqOptions.headers);\n    type3options = _.extend(type3options, _.omit(httpreqOptions, 'headers'));\n\n    // send type3 message to server:\n    httpreq[method](options.url, type3options, callback);\n  }\n  sendType1Message(function (err, res) {\n    if (err) return finalCallback(err);\n    setImmediate(function () {\n      // doesn't work without setImmediate()\n      sendType3Message(res, finalCallback);\n    });\n  });\n};\n['get', 'put', 'patch', 'post', 'delete', 'options'].forEach(function (method) {\n  exports[method] = exports.method.bind(exports, method);\n});\nexports.ntlm = ntlm; //if you want to use the NTML functions yourself","map":{"version":3,"names":["url","require","httpreq","ntlm","_","http","https","exports","method","options","finalCallback","workstation","domain","httpreqOptions","omit","isHttps","reqUrl","parse","protocol","keepaliveAgent","Agent","keepAlive","sendType1Message","callback","type1msg","createType1Message","type1options","headers","timeout","agent","allowRedirects","extend","sendType3Message","res","location","Error","type2msg","parseType2Message","type3msg","createType3Message","type3options","err","setImmediate","forEach","bind"],"sources":["/Users/Qusai.Qishta/node_modules/httpntlm/httpntlm.js"],"sourcesContent":["/**\n * Copyright (c) 2013 Sam Decrock https://github.com/SamDecrock/\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar url = require('url');\nvar httpreq = require('httpreq');\nvar ntlm = require('./ntlm');\nvar _ = require('underscore');\nvar http = require('http');\nvar https = require('https');\n\nexports.method = function(method, options, finalCallback){\n\tif(!options.workstation) options.workstation = '';\n\tif(!options.domain) options.domain = '';\n\n\t// extract non-ntlm-options:\n\tvar httpreqOptions = _.omit(options, 'url', 'username', 'password', 'workstation', 'domain');\n\n\t// is https?\n\tvar isHttps = false;\n\tvar reqUrl = url.parse(options.url);\n\tif(reqUrl.protocol == 'https:') isHttps = true;\n\n\t// set keepaliveAgent (http or https):\n\tvar keepaliveAgent;\n\n\tif(isHttps){\n\t\tkeepaliveAgent = new https.Agent({keepAlive: true});\n\t}else{\n\t\tkeepaliveAgent = new http.Agent({keepAlive: true});\n\t}\n\n\t// build type1 request:\n\n\tfunction sendType1Message (callback) {\n\t\tvar type1msg = ntlm.createType1Message(options);\n\n\t\tvar type1options = {\n\t\t\theaders:{\n\t\t\t\t'Connection' : 'keep-alive',\n\t\t\t\t'Authorization': type1msg\n\t\t\t},\n\t\t\ttimeout: options.timeout || 0,\n\t\t\tagent: keepaliveAgent,\n\t\t\tallowRedirects: false // don't redirect in httpreq, because http could change to https which means we need to change the keepaliveAgent\n\t\t};\n\n\t\t// pass along other options:\n\t\ttype1options = _.extend({}, _.omit(httpreqOptions, 'headers', 'body'), type1options);\n\n\t\t// send type1 message to server:\n\t\thttpreq[method](options.url, type1options, callback);\n\t}\n\n\tfunction sendType3Message (res, callback) {\n\t\t// catch redirect here:\n\t\tif(res.headers.location) {\n\t\t\toptions.url = res.headers.location;\n\t\t\treturn exports[method](options, finalCallback);\n\t\t}\n\n\n\t\tif(!res.headers['www-authenticate'])\n\t\t\treturn callback(new Error('www-authenticate not found on response of second request'));\n\n\t\t// parse type2 message from server:\n\t\tvar type2msg = ntlm.parseType2Message(res.headers['www-authenticate'], callback); //callback only happens on errors\n\t\tif(!type2msg) return; // if callback returned an error, the parse-function returns with null\n\n\t\t// create type3 message:\n\t\tvar type3msg = ntlm.createType3Message(type2msg, options);\n\n\t\t// build type3 request:\n\t\tvar type3options = {\n\t\t\theaders: {\n\t\t\t\t'Connection': 'Close',\n\t\t\t\t'Authorization': type3msg\n\t\t\t},\n\t\t\tallowRedirects: false,\n\t\t\tagent: keepaliveAgent\n\t\t};\n\n\t\t// pass along other options:\n\t\ttype3options.headers = _.extend(type3options.headers, httpreqOptions.headers);\n\t\ttype3options = _.extend(type3options, _.omit(httpreqOptions, 'headers'));\n\n\t\t// send type3 message to server:\n\t\thttpreq[method](options.url, type3options, callback);\n\t}\n\n\n\tsendType1Message(function (err, res) {\n\t\tif(err) return finalCallback(err);\n\t\tsetImmediate(function () { // doesn't work without setImmediate()\n\t\t\tsendType3Message(res, finalCallback);\n\t\t});\n\t});\n\n};\n\n['get', 'put', 'patch', 'post', 'delete', 'options'].forEach(function(method){\n\texports[method] = exports.method.bind(exports, method);\n});\n\nexports.ntlm = ntlm; //if you want to use the NTML functions yourself\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}