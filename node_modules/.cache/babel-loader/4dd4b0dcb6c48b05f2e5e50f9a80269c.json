{"ast":null,"code":"var _ = require('../util').lodash,\n  semver = require('semver'),\n  PropertyBase = require('./property-base').PropertyBase,\n  Version;\n\n/**\n * @typedef {Object|String} Version.definition\n */\n_.inherit(\n/**\n * Defines a Version.\n *\n * @constructor\n * @extends {PropertyBase}\n * @param {Version.definition} definition -\n */\nVersion = function PostmanPropertyVersion(definition) {\n  // in case definition object is missing, there is no point moving forward\n  if (!definition) {\n    return;\n  }\n\n  // call the setter to process the version string and assign it to this object\n  this.set(definition);\n}, PropertyBase);\n_.assign(Version.prototype, /** @lends Version.prototype */{\n  /**\n   * Set the version value as string or object with separate components of version\n   *\n   * @draft\n   * @param {object|string} value -\n   */\n  set(value) {\n    // extract the version logic and in case it failes and value passed is an object, we use that assuming parsed\n    // value has been sent.\n    var ver = semver.parse(value) || value || {};\n    _.assign(this, /** @lends Version.prototype */{\n      /**\n       * The raw URL string. If {@link Version#set} is called with a string parameter, the string is saved here\n       * before parsing various Version components.\n       *\n       * @type {String}\n       */\n      raw: ver.raw,\n      /**\n       * @type {String}\n       */\n      major: ver.major,\n      /**\n       * @type {String}\n       */\n      minor: ver.minor,\n      /**\n       * @type {String}\n       */\n      patch: ver.patch,\n      /**\n       * @type {String}\n       */\n      prerelease: ver.prerelease && ver.prerelease.join && ver.prerelease.join() || ver.prerelease,\n      /**\n       * @type {String}\n       */\n      build: ver.build && ver.build.join && ver.build.join() || ver.build,\n      /**\n       * @type {String}\n       */\n      string: ver.version\n    });\n  },\n  toString() {\n    // TODO: is this enough? should we build the semver back up?\n    return this.string || this.raw;\n  }\n});\n_.assign(Version, /** @lends Version */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'Version'\n});\nmodule.exports = {\n  Version\n};","map":{"version":3,"names":["_","require","lodash","semver","PropertyBase","Version","inherit","PostmanPropertyVersion","definition","set","assign","prototype","value","ver","parse","raw","major","minor","patch","prerelease","join","build","string","version","toString","_postman_propertyName","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/version.js"],"sourcesContent":["var _ = require('../util').lodash,\n    semver = require('semver'),\n    PropertyBase = require('./property-base').PropertyBase,\n\n    Version;\n\n/**\n * @typedef {Object|String} Version.definition\n */\n_.inherit((\n\n    /**\n     * Defines a Version.\n     *\n     * @constructor\n     * @extends {PropertyBase}\n     * @param {Version.definition} definition -\n     */\n    Version = function PostmanPropertyVersion (definition) {\n        // in case definition object is missing, there is no point moving forward\n        if (!definition) { return; }\n\n        // call the setter to process the version string and assign it to this object\n        this.set(definition);\n    }), PropertyBase);\n\n_.assign(Version.prototype, /** @lends Version.prototype */ {\n    /**\n     * Set the version value as string or object with separate components of version\n     *\n     * @draft\n     * @param {object|string} value -\n     */\n    set (value) {\n        // extract the version logic and in case it failes and value passed is an object, we use that assuming parsed\n        // value has been sent.\n        var ver = semver.parse(value) || value || {};\n\n        _.assign(this, /** @lends Version.prototype */ {\n            /**\n             * The raw URL string. If {@link Version#set} is called with a string parameter, the string is saved here\n             * before parsing various Version components.\n             *\n             * @type {String}\n             */\n            raw: ver.raw,\n\n            /**\n             * @type {String}\n             */\n            major: ver.major,\n\n            /**\n             * @type {String}\n             */\n            minor: ver.minor,\n\n            /**\n             * @type {String}\n             */\n            patch: ver.patch,\n\n            /**\n             * @type {String}\n             */\n            prerelease: ver.prerelease && ver.prerelease.join && ver.prerelease.join() || ver.prerelease,\n\n            /**\n             * @type {String}\n             */\n            build: ver.build && ver.build.join && ver.build.join() || ver.build,\n\n            /**\n             * @type {String}\n             */\n            string: ver.version\n        });\n    },\n\n    toString () {\n        // TODO: is this enough? should we build the semver back up?\n        return this.string || this.raw;\n    }\n});\n\n_.assign(Version, /** @lends Version */ {\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'Version'\n});\n\nmodule.exports = {\n    Version\n};\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM;EAC7BC,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;EAC1BG,YAAY,GAAGH,OAAO,CAAC,iBAAiB,CAAC,CAACG,YAAY;EAEtDC,OAAO;;AAEX;AACA;AACA;AACAL,CAAC,CAACM,OAAO;AAEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACID,OAAO,GAAG,SAASE,sBAAsB,CAAEC,UAAU,EAAE;EACnD;EACA,IAAI,CAACA,UAAU,EAAE;IAAE;EAAQ;;EAE3B;EACA,IAAI,CAACC,GAAG,CAACD,UAAU,CAAC;AACxB,CAAC,EAAGJ,YAAY,CAAC;AAErBJ,CAAC,CAACU,MAAM,CAACL,OAAO,CAACM,SAAS,EAAE,+BAAgC;EACxD;AACJ;AACA;AACA;AACA;AACA;EACIF,GAAG,CAAEG,KAAK,EAAE;IACR;IACA;IACA,IAAIC,GAAG,GAAGV,MAAM,CAACW,KAAK,CAACF,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC,CAAC;IAE5CZ,CAAC,CAACU,MAAM,CAAC,IAAI,EAAE,+BAAgC;MAC3C;AACZ;AACA;AACA;AACA;AACA;MACYK,GAAG,EAAEF,GAAG,CAACE,GAAG;MAEZ;AACZ;AACA;MACYC,KAAK,EAAEH,GAAG,CAACG,KAAK;MAEhB;AACZ;AACA;MACYC,KAAK,EAAEJ,GAAG,CAACI,KAAK;MAEhB;AACZ;AACA;MACYC,KAAK,EAAEL,GAAG,CAACK,KAAK;MAEhB;AACZ;AACA;MACYC,UAAU,EAAEN,GAAG,CAACM,UAAU,IAAIN,GAAG,CAACM,UAAU,CAACC,IAAI,IAAIP,GAAG,CAACM,UAAU,CAACC,IAAI,EAAE,IAAIP,GAAG,CAACM,UAAU;MAE5F;AACZ;AACA;MACYE,KAAK,EAAER,GAAG,CAACQ,KAAK,IAAIR,GAAG,CAACQ,KAAK,CAACD,IAAI,IAAIP,GAAG,CAACQ,KAAK,CAACD,IAAI,EAAE,IAAIP,GAAG,CAACQ,KAAK;MAEnE;AACZ;AACA;MACYC,MAAM,EAAET,GAAG,CAACU;IAChB,CAAC,CAAC;EACN,CAAC;EAEDC,QAAQ,GAAI;IACR;IACA,OAAO,IAAI,CAACF,MAAM,IAAI,IAAI,CAACP,GAAG;EAClC;AACJ,CAAC,CAAC;AAEFf,CAAC,CAACU,MAAM,CAACL,OAAO,EAAE,qBAAsB;EACpC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIoB,qBAAqB,EAAE;AAC3B,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAG;EACbtB;AACJ,CAAC"},"metadata":{},"sourceType":"script"}