{"ast":null,"code":"/**\n * Implementation of the WHATWG URL Standard.\n *\n * @example\n * const urlEncoder = require('postman-url-encoder')\n *\n * // Encoding URL string to Node.js compatible Url object\n * urlEncoder.toNodeUrl('郵便屋さん.com/foo&bar/{baz}?q=(\"foo\")#`hash`')\n *\n * // Encoding URI component\n * urlEncoder.encode('qüêry štrìng')\n *\n * // Encoding query string object\n * urlEncoder.encodeQueryString({ q1: 'foo', q2: ['bãr', 'baž'] })\n *\n * @module postman-url-encoder\n * @see {@link https://url.spec.whatwg.org}\n */\n\nconst querystring = require('querystring'),\n  legacy = require('./legacy'),\n  parser = require('./parser'),\n  encoder = require('./encoder'),\n  QUERY_ENCODE_SET = require('./encoder/encode-set').QUERY_ENCODE_SET,\n  E = '',\n  COLON = ':',\n  BACK_SLASH = '\\\\',\n  DOUBLE_SLASH = '//',\n  DOUBLE_BACK_SLASH = '\\\\\\\\',\n  STRING = 'string',\n  OBJECT = 'object',\n  FUNCTION = 'function',\n  DEFAULT_PROTOCOL = 'http',\n  LEFT_SQUARE_BRACKET = '[',\n  RIGHT_SQUARE_BRACKET = ']',\n  PATH_SEPARATOR = '/',\n  QUERY_SEPARATOR = '?',\n  PARAMS_SEPARATOR = '&',\n  SEARCH_SEPARATOR = '#',\n  DOMAIN_SEPARATOR = '.',\n  AUTH_CREDENTIALS_SEPARATOR = '@',\n  // @note this regular expression is referred from Node.js URL parser\n  PROTOCOL_RE = /^[a-z0-9.+-]+:(?:\\/\\/|\\\\\\\\)./i,\n  /**\n   * Protocols that always contain a // bit.\n   *\n   * @private\n   * @see {@link https://github.com/nodejs/node/blob/v10.17.0/lib/url.js#L91}\n   */\n  SLASHED_PROTOCOLS = {\n    'file:': true,\n    'ftp:': true,\n    'gopher:': true,\n    'http:': true,\n    'https:': true,\n    'ws:': true,\n    'wss:': true\n  };\n\n/**\n * Returns stringified URL from Url object but only includes parts till given\n * part name.\n *\n * @example\n * var url = 'http://postman.com/foo?q=v#hash';\n * getUrlTill(toNodeUrl(url), 'host')\n * // returns 'http://postman.com'\n *\n * @private\n * @param {Object} url base URL\n * @param {String} [urlPart='query'] one of ['host', 'pathname', 'query']\n */\nfunction getUrlTill(url, urlPart) {\n  let result = '';\n  if (url.protocol) {\n    result += url.protocol + DOUBLE_SLASH;\n  }\n  if (url.auth) {\n    result += url.auth + AUTH_CREDENTIALS_SEPARATOR;\n  }\n  result += url.host || E;\n  if (urlPart === 'host') {\n    return result;\n  }\n  result += url.pathname;\n  if (urlPart === 'pathname') {\n    return result;\n  }\n\n  // urlPart must be query at this point\n  return result + (url.search || E);\n}\n\n/**\n * Percent-encode the given string using QUERY_ENCODE_SET.\n *\n * @deprecated since version 2.0, use {@link encodeQueryParam} instead.\n *\n * @example\n * // returns 'foo%20%22%23%26%27%3C%3D%3E%20bar'\n * encode('foo \"#&\\'<=> bar')\n *\n * // returns ''\n * encode(['foobar'])\n *\n * @param {String} value String to percent-encode\n * @returns {String} Percent-encoded string\n */\nfunction encode(value) {\n  return encoder.percentEncode(value, QUERY_ENCODE_SET);\n}\n\n/**\n * Percent-encode the URL query string or x-www-form-urlencoded body object\n * according to RFC3986.\n *\n * @example\n * // returns 'q1=foo&q2=bar&q2=baz'\n * encodeQueryString({ q1: 'foo', q2: ['bar', 'baz'] })\n *\n * @param {Object} query Object representing query or urlencoded body\n * @returns {String} Percent-encoded string\n */\nfunction encodeQueryString(query) {\n  if (!(query && typeof query === OBJECT)) {\n    return E;\n  }\n\n  // rely upon faster querystring module\n  query = querystring.stringify(query);\n\n  // encode characters not encoded by querystring.stringify() according to RFC3986.\n  return query.replace(/[!'()*]/g, function (c) {\n    return encoder.percentEncodeCharCode(c.charCodeAt(0));\n  });\n}\n\n/**\n * Converts PostmanUrl / URL string into Node.js compatible Url object.\n *\n * @example <caption>Using URL string</caption>\n * toNodeUrl('郵便屋さん.com/foo&bar/{baz}?q=(\"foo\")#`hash`')\n * // returns\n * // {\n * //     protocol: 'http:',\n * //     slashes: true,\n * //     auth: null,\n * //     host: 'xn--48jwgn17gdel797d.com',\n * //     port: null,\n * //     hostname: 'xn--48jwgn17gdel797d.com',\n * //     hash: '#%60hash%60',\n * //     search: '?q=(%22foo%22)',\n * //     query: 'q=(%22foo%22)',\n * //     pathname: '/foo&bar/%7Bbaz%7D',\n * //     path: '/foo&bar/%7Bbaz%7D?q=(%22foo%22)',\n * //     href: 'http://xn--48jwgn17gdel797d.com/foo&bar/%7Bbaz%7D?q=(%22foo%22)#%60hash%60'\n * //  }\n *\n * @example <caption>Using PostmanUrl instance</caption>\n * toNodeUrl(new sdk.Url({\n *     host: 'example.com',\n *     query: [{ key: 'foo', value: 'bar & baz' }]\n * }))\n *\n * @param {PostmanUrl|String} url URL string or PostmanUrl object\n * @param {Boolean} disableEncoding Turn encoding off\n * @returns {Url} Node.js like parsed and encoded object\n */\nfunction toNodeUrl(url, disableEncoding) {\n  let nodeUrl = {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: null,\n      path: null,\n      href: E\n    },\n    port,\n    hostname,\n    pathname,\n    authUser,\n    queryParams,\n    authPassword;\n\n  // Check if PostmanUrl instance and prepare segments\n  if (url && url.constructor && url.constructor._postman_propertyName === 'Url') {\n    // @note getPath() always adds a leading '/', similar to Node.js API\n    pathname = url.getPath();\n    hostname = url.getHost().toLowerCase();\n    if (url.query && url.query.count()) {\n      queryParams = url.getQueryString({\n        ignoreDisabled: true\n      });\n      queryParams = disableEncoding ? queryParams : encoder.encodeQueryParam(queryParams);\n\n      // either all the params are disabled or a single param is like { key: '' } (http://localhost?)\n      // in that case, query separator ? must be included in the raw URL.\n      // @todo Add helper in SDK to handle this\n      if (queryParams === E) {\n        // check if there's any enabled param, if so, set queryString to empty string\n        // otherwise (all disabled), it will be set as undefined\n        queryParams = url.query.find(function (param) {\n          return !(param && param.disabled);\n        }) && E;\n      }\n    }\n    if (url.auth) {\n      authUser = url.auth.user;\n      authPassword = url.auth.password;\n    }\n  }\n  // Parser URL string and prepare segments\n  else if (typeof url === STRING) {\n    url = parser.parse(url);\n    pathname = PATH_SEPARATOR + (url.path || []).join(PATH_SEPARATOR);\n    hostname = (url.host || []).join(DOMAIN_SEPARATOR).toLowerCase();\n    queryParams = url.query && (queryParams = url.query.join(PARAMS_SEPARATOR)) && (disableEncoding ? queryParams : encoder.encodeQueryParam(queryParams));\n    authUser = (url.auth || [])[0];\n    authPassword = (url.auth || [])[1];\n  }\n  // bail out with empty URL object for invalid input\n  else {\n    return nodeUrl;\n  }\n\n  // @todo Add helper in SDK to normalize port\n  // eslint-disable-next-line no-eq-null, eqeqeq\n  if (!(url.port == null) && typeof url.port.toString === FUNCTION) {\n    port = url.port.toString();\n  }\n\n  // #protocol\n  nodeUrl.protocol = typeof url.protocol === STRING ? url.protocol.toLowerCase() : DEFAULT_PROTOCOL;\n  nodeUrl.protocol += COLON;\n\n  // #slashes\n  nodeUrl.slashes = SLASHED_PROTOCOLS[nodeUrl.protocol] || false;\n\n  // #href = protocol://\n  nodeUrl.href = nodeUrl.protocol + DOUBLE_SLASH;\n\n  // #auth\n  if (url.auth) {\n    if (typeof authUser === STRING) {\n      nodeUrl.auth = disableEncoding ? authUser : encoder.encodeUserInfo(authUser);\n    }\n    if (typeof authPassword === STRING) {\n      !nodeUrl.auth && (nodeUrl.auth = E);\n      nodeUrl.auth += COLON + (disableEncoding ? authPassword : encoder.encodeUserInfo(authPassword));\n    }\n    if (typeof nodeUrl.auth === STRING) {\n      // #href = protocol://user:password@\n      nodeUrl.href += nodeUrl.auth + AUTH_CREDENTIALS_SEPARATOR;\n    }\n  }\n\n  // #host, #hostname\n  nodeUrl.host = nodeUrl.hostname = hostname = encoder.encodeHost(hostname); // @note always encode hostname\n\n  // #href = protocol://user:password@host.name\n  nodeUrl.href += nodeUrl.hostname;\n\n  // #port\n  if (typeof port === STRING) {\n    nodeUrl.port = port;\n\n    // #host = (#hostname):(#port)\n    nodeUrl.host = nodeUrl.hostname + COLON + port;\n\n    // #href = protocol://user:password@host.name:port\n    nodeUrl.href += COLON + port;\n  }\n\n  // #path, #pathname\n  nodeUrl.path = nodeUrl.pathname = disableEncoding ? pathname : encoder.encodePath(pathname);\n\n  // #href = protocol://user:password@host.name:port/p/a/t/h\n  nodeUrl.href += nodeUrl.pathname;\n  if (typeof queryParams === STRING) {\n    // #query\n    nodeUrl.query = queryParams;\n\n    // #search\n    nodeUrl.search = QUERY_SEPARATOR + nodeUrl.query;\n\n    // #path = (#pathname)?(#search)\n    nodeUrl.path = nodeUrl.pathname + nodeUrl.search;\n\n    // #href = protocol://user:password@host.name:port/p/a/t/h?q=query\n    nodeUrl.href += nodeUrl.search;\n  }\n  if (typeof url.hash === STRING) {\n    // #hash\n    nodeUrl.hash = SEARCH_SEPARATOR + (disableEncoding ? url.hash : encoder.encodeFragment(url.hash));\n\n    // #href = protocol://user:password@host.name:port/p/a/t/h?q=query#hash\n    nodeUrl.href += nodeUrl.hash;\n  }\n\n  // Finally apply Node.js shenanigans\n  // # Remove square brackets from IPv6 #hostname\n  // Refer: https://github.com/nodejs/node/blob/v12.18.3/lib/url.js#L399\n  // Refer: https://github.com/nodejs/node/blob/v12.18.3/lib/internal/url.js#L1273\n  if (hostname[0] === LEFT_SQUARE_BRACKET && hostname[hostname.length - 1] === RIGHT_SQUARE_BRACKET) {\n    nodeUrl.hostname = hostname.slice(1, -1);\n  }\n  return nodeUrl;\n}\n\n/**\n * Resolves a relative URL with respect to given base URL.\n * This is a replacement method for Node's url.resolve() which is compatible\n * with URL object generated by toNodeUrl().\n *\n * @example\n * // returns 'http://postman.com/baz'\n * resolveNodeUrl('http://postman.com/foo/bar', '/baz')\n *\n * @param {Object|String} base URL string or toNodeUrl() object\n * @param {String} relative Relative URL to resolve\n * @returns {String} Resolved URL\n */\nfunction resolveNodeUrl(base, relative) {\n  // normalize arguments\n  typeof base === STRING && (base = toNodeUrl(base));\n  typeof relative !== STRING && (relative = E);\n\n  // bail out if base is not an object\n  if (!(base && typeof base === OBJECT)) {\n    return relative;\n  }\n  let i,\n    ii,\n    index,\n    baseHref,\n    relative_0,\n    relative_01,\n    basePathname,\n    requiredProps = ['protocol', 'auth', 'host', 'pathname', 'search', 'href'];\n\n  // bail out if base is not like Node url object\n  for (i = 0, ii = requiredProps.length; i < ii; i++) {\n    if (!Object.hasOwnProperty.call(base, requiredProps[i])) {\n      return relative;\n    }\n  }\n\n  // cache base.href and base.pathname\n  baseHref = base.href;\n  basePathname = base.pathname;\n\n  // cache relative's first two chars\n  relative_0 = relative.slice(0, 1);\n  relative_01 = relative.slice(0, 2);\n\n  // @note relative can be one of\n  // #1 empty string\n  // #2 protocol relative, starts with // or \\\\\n  // #3 path relative, starts with / or \\\n  // #4 just query or hash, starts with ? or #\n  // #5 absolute URL, starts with :// or :\\\\\n  // #6 free from path, with or without query and hash\n\n  // #1 empty string\n  if (!relative) {\n    // return base as it is if there is no hash\n    if ((index = baseHref.indexOf(SEARCH_SEPARATOR)) === -1) {\n      return baseHref;\n    }\n\n    // else, return base without the hash\n    return baseHref.slice(0, index);\n  }\n\n  // #2 protocol relative, starts with // or \\\\\n  // @note \\\\ is not converted to //\n  if (relative_01 === DOUBLE_SLASH || relative_01 === DOUBLE_BACK_SLASH) {\n    return base.protocol + relative;\n  }\n\n  // #3 path relative, starts with / or \\\n  // @note \\(s) are not converted to /\n  if (relative_0 === PATH_SEPARATOR || relative_0 === BACK_SLASH) {\n    return getUrlTill(base, 'host') + relative;\n  }\n\n  // #4 just hash, starts with #\n  if (relative_0 === SEARCH_SEPARATOR) {\n    return getUrlTill(base, 'query') + relative;\n  }\n\n  // #4 just query, starts with ?\n  if (relative_0 === QUERY_SEPARATOR) {\n    return getUrlTill(base, 'pathname') + relative;\n  }\n\n  // #5 absolute URL, starts with :// or :\\\\\n  // @note :\\\\ is not converted to ://\n  if (PROTOCOL_RE.test(relative)) {\n    return relative;\n  }\n\n  // #6 free from path, with or without query and hash\n  // remove last path segment form base path\n  basePathname = basePathname.slice(0, basePathname.lastIndexOf(PATH_SEPARATOR) + 1);\n  return getUrlTill(base, 'host') + basePathname + relative;\n}\n\n/**\n * Converts URL string into Node.js compatible Url object using the v1 encoder.\n *\n * @deprecated since version 2.0\n *\n * @param {String} url URL string\n * @returns {Url} Node.js compatible Url object\n */\nfunction toLegacyNodeUrl(url) {\n  return legacy.toNodeUrl(url);\n}\nmodule.exports = {\n  encode,\n  toNodeUrl,\n  resolveNodeUrl,\n  toLegacyNodeUrl,\n  encodeQueryString\n};","map":{"version":3,"names":["querystring","require","legacy","parser","encoder","QUERY_ENCODE_SET","E","COLON","BACK_SLASH","DOUBLE_SLASH","DOUBLE_BACK_SLASH","STRING","OBJECT","FUNCTION","DEFAULT_PROTOCOL","LEFT_SQUARE_BRACKET","RIGHT_SQUARE_BRACKET","PATH_SEPARATOR","QUERY_SEPARATOR","PARAMS_SEPARATOR","SEARCH_SEPARATOR","DOMAIN_SEPARATOR","AUTH_CREDENTIALS_SEPARATOR","PROTOCOL_RE","SLASHED_PROTOCOLS","getUrlTill","url","urlPart","result","protocol","auth","host","pathname","search","encode","value","percentEncode","encodeQueryString","query","stringify","replace","c","percentEncodeCharCode","charCodeAt","toNodeUrl","disableEncoding","nodeUrl","slashes","port","hostname","hash","path","href","authUser","queryParams","authPassword","constructor","_postman_propertyName","getPath","getHost","toLowerCase","count","getQueryString","ignoreDisabled","encodeQueryParam","find","param","disabled","user","password","parse","join","toString","encodeUserInfo","encodeHost","encodePath","encodeFragment","length","slice","resolveNodeUrl","base","relative","i","ii","index","baseHref","relative_0","relative_01","basePathname","requiredProps","Object","hasOwnProperty","call","indexOf","test","lastIndexOf","toLegacyNodeUrl","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-url-encoder/index.js"],"sourcesContent":["/**\n * Implementation of the WHATWG URL Standard.\n *\n * @example\n * const urlEncoder = require('postman-url-encoder')\n *\n * // Encoding URL string to Node.js compatible Url object\n * urlEncoder.toNodeUrl('郵便屋さん.com/foo&bar/{baz}?q=(\"foo\")#`hash`')\n *\n * // Encoding URI component\n * urlEncoder.encode('qüêry štrìng')\n *\n * // Encoding query string object\n * urlEncoder.encodeQueryString({ q1: 'foo', q2: ['bãr', 'baž'] })\n *\n * @module postman-url-encoder\n * @see {@link https://url.spec.whatwg.org}\n */\n\nconst querystring = require('querystring'),\n\n    legacy = require('./legacy'),\n    parser = require('./parser'),\n    encoder = require('./encoder'),\n    QUERY_ENCODE_SET = require('./encoder/encode-set').QUERY_ENCODE_SET,\n\n    E = '',\n    COLON = ':',\n    BACK_SLASH = '\\\\',\n    DOUBLE_SLASH = '//',\n    DOUBLE_BACK_SLASH = '\\\\\\\\',\n    STRING = 'string',\n    OBJECT = 'object',\n    FUNCTION = 'function',\n    DEFAULT_PROTOCOL = 'http',\n    LEFT_SQUARE_BRACKET = '[',\n    RIGHT_SQUARE_BRACKET = ']',\n\n    PATH_SEPARATOR = '/',\n    QUERY_SEPARATOR = '?',\n    PARAMS_SEPARATOR = '&',\n    SEARCH_SEPARATOR = '#',\n    DOMAIN_SEPARATOR = '.',\n    AUTH_CREDENTIALS_SEPARATOR = '@',\n\n    // @note this regular expression is referred from Node.js URL parser\n    PROTOCOL_RE = /^[a-z0-9.+-]+:(?:\\/\\/|\\\\\\\\)./i,\n\n    /**\n     * Protocols that always contain a // bit.\n     *\n     * @private\n     * @see {@link https://github.com/nodejs/node/blob/v10.17.0/lib/url.js#L91}\n     */\n    SLASHED_PROTOCOLS = {\n        'file:': true,\n        'ftp:': true,\n        'gopher:': true,\n        'http:': true,\n        'https:': true,\n        'ws:': true,\n        'wss:': true\n    };\n\n/**\n * Returns stringified URL from Url object but only includes parts till given\n * part name.\n *\n * @example\n * var url = 'http://postman.com/foo?q=v#hash';\n * getUrlTill(toNodeUrl(url), 'host')\n * // returns 'http://postman.com'\n *\n * @private\n * @param {Object} url base URL\n * @param {String} [urlPart='query'] one of ['host', 'pathname', 'query']\n */\nfunction getUrlTill (url, urlPart) {\n    let result = '';\n\n    if (url.protocol) {\n        result += url.protocol + DOUBLE_SLASH;\n    }\n\n    if (url.auth) {\n        result += url.auth + AUTH_CREDENTIALS_SEPARATOR;\n    }\n\n    result += url.host || E;\n\n    if (urlPart === 'host') { return result; }\n\n    result += url.pathname;\n\n    if (urlPart === 'pathname') { return result; }\n\n    // urlPart must be query at this point\n    return result + (url.search || E);\n}\n\n/**\n * Percent-encode the given string using QUERY_ENCODE_SET.\n *\n * @deprecated since version 2.0, use {@link encodeQueryParam} instead.\n *\n * @example\n * // returns 'foo%20%22%23%26%27%3C%3D%3E%20bar'\n * encode('foo \"#&\\'<=> bar')\n *\n * // returns ''\n * encode(['foobar'])\n *\n * @param {String} value String to percent-encode\n * @returns {String} Percent-encoded string\n */\nfunction encode (value) {\n    return encoder.percentEncode(value, QUERY_ENCODE_SET);\n}\n\n/**\n * Percent-encode the URL query string or x-www-form-urlencoded body object\n * according to RFC3986.\n *\n * @example\n * // returns 'q1=foo&q2=bar&q2=baz'\n * encodeQueryString({ q1: 'foo', q2: ['bar', 'baz'] })\n *\n * @param {Object} query Object representing query or urlencoded body\n * @returns {String} Percent-encoded string\n */\nfunction encodeQueryString (query) {\n    if (!(query && typeof query === OBJECT)) {\n        return E;\n    }\n\n    // rely upon faster querystring module\n    query = querystring.stringify(query);\n\n    // encode characters not encoded by querystring.stringify() according to RFC3986.\n    return query.replace(/[!'()*]/g, function (c) {\n        return encoder.percentEncodeCharCode(c.charCodeAt(0));\n    });\n}\n\n/**\n * Converts PostmanUrl / URL string into Node.js compatible Url object.\n *\n * @example <caption>Using URL string</caption>\n * toNodeUrl('郵便屋さん.com/foo&bar/{baz}?q=(\"foo\")#`hash`')\n * // returns\n * // {\n * //     protocol: 'http:',\n * //     slashes: true,\n * //     auth: null,\n * //     host: 'xn--48jwgn17gdel797d.com',\n * //     port: null,\n * //     hostname: 'xn--48jwgn17gdel797d.com',\n * //     hash: '#%60hash%60',\n * //     search: '?q=(%22foo%22)',\n * //     query: 'q=(%22foo%22)',\n * //     pathname: '/foo&bar/%7Bbaz%7D',\n * //     path: '/foo&bar/%7Bbaz%7D?q=(%22foo%22)',\n * //     href: 'http://xn--48jwgn17gdel797d.com/foo&bar/%7Bbaz%7D?q=(%22foo%22)#%60hash%60'\n * //  }\n *\n * @example <caption>Using PostmanUrl instance</caption>\n * toNodeUrl(new sdk.Url({\n *     host: 'example.com',\n *     query: [{ key: 'foo', value: 'bar & baz' }]\n * }))\n *\n * @param {PostmanUrl|String} url URL string or PostmanUrl object\n * @param {Boolean} disableEncoding Turn encoding off\n * @returns {Url} Node.js like parsed and encoded object\n */\nfunction toNodeUrl (url, disableEncoding) {\n    let nodeUrl = {\n            protocol: null,\n            slashes: null,\n            auth: null,\n            host: null,\n            port: null,\n            hostname: null,\n            hash: null,\n            search: null,\n            query: null,\n            pathname: null,\n            path: null,\n            href: E\n        },\n        port,\n        hostname,\n        pathname,\n        authUser,\n        queryParams,\n        authPassword;\n\n    // Check if PostmanUrl instance and prepare segments\n    if (url && url.constructor && url.constructor._postman_propertyName === 'Url') {\n        // @note getPath() always adds a leading '/', similar to Node.js API\n        pathname = url.getPath();\n        hostname = url.getHost().toLowerCase();\n\n        if (url.query && url.query.count()) {\n            queryParams = url.getQueryString({ ignoreDisabled: true });\n            queryParams = disableEncoding ? queryParams : encoder.encodeQueryParam(queryParams);\n\n            // either all the params are disabled or a single param is like { key: '' } (http://localhost?)\n            // in that case, query separator ? must be included in the raw URL.\n            // @todo Add helper in SDK to handle this\n            if (queryParams === E) {\n                // check if there's any enabled param, if so, set queryString to empty string\n                // otherwise (all disabled), it will be set as undefined\n                queryParams = url.query.find(function (param) { return !(param && param.disabled); }) && E;\n            }\n        }\n\n        if (url.auth) {\n            authUser = url.auth.user;\n            authPassword = url.auth.password;\n        }\n    }\n    // Parser URL string and prepare segments\n    else if (typeof url === STRING) {\n        url = parser.parse(url);\n\n        pathname = PATH_SEPARATOR + (url.path || []).join(PATH_SEPARATOR);\n        hostname = (url.host || []).join(DOMAIN_SEPARATOR).toLowerCase();\n        queryParams = url.query && (queryParams = url.query.join(PARAMS_SEPARATOR)) &&\n            (disableEncoding ? queryParams : encoder.encodeQueryParam(queryParams));\n        authUser = (url.auth || [])[0];\n        authPassword = (url.auth || [])[1];\n    }\n    // bail out with empty URL object for invalid input\n    else {\n        return nodeUrl;\n    }\n\n    // @todo Add helper in SDK to normalize port\n    // eslint-disable-next-line no-eq-null, eqeqeq\n    if (!(url.port == null) && typeof url.port.toString === FUNCTION) {\n        port = url.port.toString();\n    }\n\n    // #protocol\n    nodeUrl.protocol = (typeof url.protocol === STRING) ? url.protocol.toLowerCase() : DEFAULT_PROTOCOL;\n    nodeUrl.protocol += COLON;\n\n    // #slashes\n    nodeUrl.slashes = SLASHED_PROTOCOLS[nodeUrl.protocol] || false;\n\n    // #href = protocol://\n    nodeUrl.href = nodeUrl.protocol + DOUBLE_SLASH;\n\n    // #auth\n    if (url.auth) {\n        if (typeof authUser === STRING) {\n            nodeUrl.auth = disableEncoding ? authUser : encoder.encodeUserInfo(authUser);\n        }\n\n        if (typeof authPassword === STRING) {\n            !nodeUrl.auth && (nodeUrl.auth = E);\n            nodeUrl.auth += COLON + (disableEncoding ? authPassword : encoder.encodeUserInfo(authPassword));\n        }\n\n        if (typeof nodeUrl.auth === STRING) {\n            // #href = protocol://user:password@\n            nodeUrl.href += nodeUrl.auth + AUTH_CREDENTIALS_SEPARATOR;\n        }\n    }\n\n    // #host, #hostname\n    nodeUrl.host = nodeUrl.hostname = hostname = encoder.encodeHost(hostname); // @note always encode hostname\n\n    // #href = protocol://user:password@host.name\n    nodeUrl.href += nodeUrl.hostname;\n\n    // #port\n    if (typeof port === STRING) {\n        nodeUrl.port = port;\n\n        // #host = (#hostname):(#port)\n        nodeUrl.host = nodeUrl.hostname + COLON + port;\n\n        // #href = protocol://user:password@host.name:port\n        nodeUrl.href += COLON + port;\n    }\n\n    // #path, #pathname\n    nodeUrl.path = nodeUrl.pathname = disableEncoding ? pathname : encoder.encodePath(pathname);\n\n    // #href = protocol://user:password@host.name:port/p/a/t/h\n    nodeUrl.href += nodeUrl.pathname;\n\n    if (typeof queryParams === STRING) {\n        // #query\n        nodeUrl.query = queryParams;\n\n        // #search\n        nodeUrl.search = QUERY_SEPARATOR + nodeUrl.query;\n\n        // #path = (#pathname)?(#search)\n        nodeUrl.path = nodeUrl.pathname + nodeUrl.search;\n\n        // #href = protocol://user:password@host.name:port/p/a/t/h?q=query\n        nodeUrl.href += nodeUrl.search;\n    }\n\n    if (typeof url.hash === STRING) {\n        // #hash\n        nodeUrl.hash = SEARCH_SEPARATOR + (disableEncoding ? url.hash : encoder.encodeFragment(url.hash));\n\n        // #href = protocol://user:password@host.name:port/p/a/t/h?q=query#hash\n        nodeUrl.href += nodeUrl.hash;\n    }\n\n    // Finally apply Node.js shenanigans\n    // # Remove square brackets from IPv6 #hostname\n    // Refer: https://github.com/nodejs/node/blob/v12.18.3/lib/url.js#L399\n    // Refer: https://github.com/nodejs/node/blob/v12.18.3/lib/internal/url.js#L1273\n    if (hostname[0] === LEFT_SQUARE_BRACKET && hostname[hostname.length - 1] === RIGHT_SQUARE_BRACKET) {\n        nodeUrl.hostname = hostname.slice(1, -1);\n    }\n\n    return nodeUrl;\n}\n\n/**\n * Resolves a relative URL with respect to given base URL.\n * This is a replacement method for Node's url.resolve() which is compatible\n * with URL object generated by toNodeUrl().\n *\n * @example\n * // returns 'http://postman.com/baz'\n * resolveNodeUrl('http://postman.com/foo/bar', '/baz')\n *\n * @param {Object|String} base URL string or toNodeUrl() object\n * @param {String} relative Relative URL to resolve\n * @returns {String} Resolved URL\n */\nfunction resolveNodeUrl (base, relative) {\n    // normalize arguments\n    typeof base === STRING && (base = toNodeUrl(base));\n    typeof relative !== STRING && (relative = E);\n\n    // bail out if base is not an object\n    if (!(base && typeof base === OBJECT)) {\n        return relative;\n    }\n\n    let i,\n        ii,\n        index,\n        baseHref,\n        relative_0,\n        relative_01,\n        basePathname,\n        requiredProps = ['protocol', 'auth', 'host', 'pathname', 'search', 'href'];\n\n    // bail out if base is not like Node url object\n    for (i = 0, ii = requiredProps.length; i < ii; i++) {\n        if (!Object.hasOwnProperty.call(base, requiredProps[i])) {\n            return relative;\n        }\n    }\n\n    // cache base.href and base.pathname\n    baseHref = base.href;\n    basePathname = base.pathname;\n\n    // cache relative's first two chars\n    relative_0 = relative.slice(0, 1);\n    relative_01 = relative.slice(0, 2);\n\n    // @note relative can be one of\n    // #1 empty string\n    // #2 protocol relative, starts with // or \\\\\n    // #3 path relative, starts with / or \\\n    // #4 just query or hash, starts with ? or #\n    // #5 absolute URL, starts with :// or :\\\\\n    // #6 free from path, with or without query and hash\n\n    // #1 empty string\n    if (!relative) {\n        // return base as it is if there is no hash\n        if ((index = baseHref.indexOf(SEARCH_SEPARATOR)) === -1) {\n            return baseHref;\n        }\n\n        // else, return base without the hash\n        return baseHref.slice(0, index);\n    }\n\n    // #2 protocol relative, starts with // or \\\\\n    // @note \\\\ is not converted to //\n    if (relative_01 === DOUBLE_SLASH || relative_01 === DOUBLE_BACK_SLASH) {\n        return base.protocol + relative;\n    }\n\n    // #3 path relative, starts with / or \\\n    // @note \\(s) are not converted to /\n    if (relative_0 === PATH_SEPARATOR || relative_0 === BACK_SLASH) {\n        return getUrlTill(base, 'host') + relative;\n    }\n\n    // #4 just hash, starts with #\n    if (relative_0 === SEARCH_SEPARATOR) {\n        return getUrlTill(base, 'query') + relative;\n    }\n\n    // #4 just query, starts with ?\n    if (relative_0 === QUERY_SEPARATOR) {\n        return getUrlTill(base, 'pathname') + relative;\n    }\n\n    // #5 absolute URL, starts with :// or :\\\\\n    // @note :\\\\ is not converted to ://\n    if (PROTOCOL_RE.test(relative)) {\n        return relative;\n    }\n\n    // #6 free from path, with or without query and hash\n    // remove last path segment form base path\n    basePathname = basePathname.slice(0, basePathname.lastIndexOf(PATH_SEPARATOR) + 1);\n\n    return getUrlTill(base, 'host') + basePathname + relative;\n}\n\n/**\n * Converts URL string into Node.js compatible Url object using the v1 encoder.\n *\n * @deprecated since version 2.0\n *\n * @param {String} url URL string\n * @returns {Url} Node.js compatible Url object\n */\nfunction toLegacyNodeUrl (url) {\n    return legacy.toNodeUrl(url);\n}\n\nmodule.exports = {\n    encode,\n    toNodeUrl,\n    resolveNodeUrl,\n    toLegacyNodeUrl,\n    encodeQueryString\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}