{"ast":null,"code":"var _ = require('lodash').noConflict(),\n  regexes = {\n    fold: /\\r\\n([ \\t])/g,\n    trim: /^\\s*(.*\\S)?\\s*$/,\n    // eslint-disable-line security/detect-unsafe-regex\n    header: /^((\\/\\/\\s*)?\\S+):(.*)$/gm // eslint-disable-line security/detect-unsafe-regex\n  },\n  headersCommentPrefix = '//';\nmodule.exports = {\n  authMap: {\n    apikeyAuth: 'apikey',\n    basicAuth: 'basic',\n    bearerAuth: 'bearer',\n    digestAuth: 'digest',\n    hawkAuth: 'hawk',\n    oAuth1: 'oauth1',\n    oAuth2: 'oauth2',\n    ntlmAuth: 'ntlm',\n    awsSigV4: 'awsv4',\n    normal: null\n  },\n  /**\n   * Parses a string of headers to an object.\n   *\n   * @param {String} data - A string of newline concatenated header key-value pairs.\n   * @param {?Boolean} [legacy] - A flag to indicate whether the parsing is being done for v1 normalization or v1 to\n   * v2 conversion.\n   * @returns {Object[]|*} - The parsed list of header key-value pair objects.\n   * @private\n   */\n  parseHeaders: function (data, legacy) {\n    if (!data) {\n      return;\n    }\n    var head,\n      headers = [],\n      statusValue = !legacy,\n      match = regexes.header.exec(data),\n      property = legacy ? 'enabled' : 'disabled';\n    data = data.toString().replace(regexes.fold, '$1');\n    while (match) {\n      head = {\n        key: match[1],\n        value: match[3].replace(regexes.trim, '$1')\n      };\n      if (_.startsWith(head.key, headersCommentPrefix)) {\n        head[property] = statusValue;\n        head.key = head.key.replace(headersCommentPrefix, '').trim();\n      }\n      headers.push(head);\n      match = regexes.header.exec(data);\n    }\n    return headers;\n  }\n};","map":{"version":3,"names":["_","require","noConflict","regexes","fold","trim","header","headersCommentPrefix","module","exports","authMap","apikeyAuth","basicAuth","bearerAuth","digestAuth","hawkAuth","oAuth1","oAuth2","ntlmAuth","awsSigV4","normal","parseHeaders","data","legacy","head","headers","statusValue","match","exec","property","toString","replace","key","value","startsWith","push"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection-transformer/lib/common/v1.js"],"sourcesContent":["var _ = require('lodash').noConflict(),\n\n    regexes = {\n        fold: /\\r\\n([ \\t])/g,\n        trim: /^\\s*(.*\\S)?\\s*$/, // eslint-disable-line security/detect-unsafe-regex\n        header: /^((\\/\\/\\s*)?\\S+):(.*)$/gm // eslint-disable-line security/detect-unsafe-regex\n    },\n    headersCommentPrefix = '//';\n\nmodule.exports = {\n    authMap: {\n        apikeyAuth: 'apikey',\n        basicAuth: 'basic',\n        bearerAuth: 'bearer',\n        digestAuth: 'digest',\n        hawkAuth: 'hawk',\n        oAuth1: 'oauth1',\n        oAuth2: 'oauth2',\n        ntlmAuth: 'ntlm',\n        awsSigV4: 'awsv4',\n        normal: null\n    },\n\n    /**\n     * Parses a string of headers to an object.\n     *\n     * @param {String} data - A string of newline concatenated header key-value pairs.\n     * @param {?Boolean} [legacy] - A flag to indicate whether the parsing is being done for v1 normalization or v1 to\n     * v2 conversion.\n     * @returns {Object[]|*} - The parsed list of header key-value pair objects.\n     * @private\n     */\n    parseHeaders: function (data, legacy) {\n        if (!data) { return; }\n\n        var head,\n            headers = [],\n            statusValue = !legacy,\n            match = regexes.header.exec(data),\n            property = legacy ? 'enabled' : 'disabled';\n\n        data = data.toString().replace(regexes.fold, '$1');\n\n        while (match) {\n            head = {\n                key: match[1],\n                value: match[3].replace(regexes.trim, '$1')\n            };\n\n            if (_.startsWith(head.key, headersCommentPrefix)) {\n                head[property] = statusValue;\n                head.key = head.key.replace(headersCommentPrefix, '').trim();\n            }\n\n            headers.push(head);\n            match = regexes.header.exec(data);\n        }\n\n        return headers;\n    }\n};\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC,CAACC,UAAU,EAAE;EAElCC,OAAO,GAAG;IACNC,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE,iBAAiB;IAAE;IACzBC,MAAM,EAAE,0BAA0B,CAAC;EACvC,CAAC;EACDC,oBAAoB,GAAG,IAAI;AAE/BC,MAAM,CAACC,OAAO,GAAG;EACbC,OAAO,EAAE;IACLC,UAAU,EAAE,QAAQ;IACpBC,SAAS,EAAE,OAAO;IAClBC,UAAU,EAAE,QAAQ;IACpBC,UAAU,EAAE,QAAQ;IACpBC,QAAQ,EAAE,MAAM;IAChBC,MAAM,EAAE,QAAQ;IAChBC,MAAM,EAAE,QAAQ;IAChBC,QAAQ,EAAE,MAAM;IAChBC,QAAQ,EAAE,OAAO;IACjBC,MAAM,EAAE;EACZ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,YAAY,EAAE,UAAUC,IAAI,EAAEC,MAAM,EAAE;IAClC,IAAI,CAACD,IAAI,EAAE;MAAE;IAAQ;IAErB,IAAIE,IAAI;MACJC,OAAO,GAAG,EAAE;MACZC,WAAW,GAAG,CAACH,MAAM;MACrBI,KAAK,GAAGxB,OAAO,CAACG,MAAM,CAACsB,IAAI,CAACN,IAAI,CAAC;MACjCO,QAAQ,GAAGN,MAAM,GAAG,SAAS,GAAG,UAAU;IAE9CD,IAAI,GAAGA,IAAI,CAACQ,QAAQ,EAAE,CAACC,OAAO,CAAC5B,OAAO,CAACC,IAAI,EAAE,IAAI,CAAC;IAElD,OAAOuB,KAAK,EAAE;MACVH,IAAI,GAAG;QACHQ,GAAG,EAAEL,KAAK,CAAC,CAAC,CAAC;QACbM,KAAK,EAAEN,KAAK,CAAC,CAAC,CAAC,CAACI,OAAO,CAAC5B,OAAO,CAACE,IAAI,EAAE,IAAI;MAC9C,CAAC;MAED,IAAIL,CAAC,CAACkC,UAAU,CAACV,IAAI,CAACQ,GAAG,EAAEzB,oBAAoB,CAAC,EAAE;QAC9CiB,IAAI,CAACK,QAAQ,CAAC,GAAGH,WAAW;QAC5BF,IAAI,CAACQ,GAAG,GAAGR,IAAI,CAACQ,GAAG,CAACD,OAAO,CAACxB,oBAAoB,EAAE,EAAE,CAAC,CAACF,IAAI,EAAE;MAChE;MAEAoB,OAAO,CAACU,IAAI,CAACX,IAAI,CAAC;MAClBG,KAAK,GAAGxB,OAAO,CAACG,MAAM,CAACsB,IAAI,CAACN,IAAI,CAAC;IACrC;IAEA,OAAOG,OAAO;EAClB;AACJ,CAAC"},"metadata":{},"sourceType":"script"}