{"ast":null,"code":"var _ = require('lodash'),\n  Requester = require('./requester').Requester,\n  RequestCookieJar = require('postman-request').jar,\n  STRING = 'string',\n  FUNCTION = 'function',\n  RequesterPool; // fn\n\nRequesterPool = function (options, callback) {\n  var self = this,\n    extendedRootCA,\n    fileResolver = options && options.fileResolver;\n  _.assign(self.options = {}, {\n    timeout: _.min([_.get(options, 'timeout.request'), _.get(options, 'timeout.global')]),\n    // validated later inside requester\n    timings: _.get(options, 'requester.timings', true),\n    verbose: _.get(options, 'requester.verbose', false),\n    keepAlive: _.get(options, 'requester.keepAlive', true),\n    agents: _.get(options, 'requester.agents'),\n    // http(s).Agent instances\n    cookieJar: _.get(options, 'requester.cookieJar'),\n    // default set later in this constructor\n    strictSSL: _.get(options, 'requester.strictSSL'),\n    maxResponseSize: _.get(options, 'requester.maxResponseSize'),\n    // @todo drop support in v8\n    useWhatWGUrlParser: _.get(options, 'requester.useWhatWGUrlParser', false),\n    insecureHTTPParser: _.get(options, 'requester.insecureHTTPParser'),\n    followRedirects: _.get(options, 'requester.followRedirects', true),\n    followOriginalHttpMethod: _.get(options, 'requester.followOriginalHttpMethod'),\n    maxRedirects: _.get(options, 'requester.maxRedirects'),\n    implicitCacheControl: _.get(options, 'requester.implicitCacheControl', true),\n    implicitTraceHeader: _.get(options, 'requester.implicitTraceHeader', true),\n    systemHeaders: _.get(options, 'requester.systemHeaders', {}),\n    removeRefererHeaderOnRedirect: _.get(options, 'requester.removeRefererHeaderOnRedirect'),\n    ignoreProxyEnvironmentVariables: _.get(options, 'ignoreProxyEnvironmentVariables'),\n    network: _.get(options, 'network', {})\n  });\n\n  // create a cookie jar if one is not provided\n  if (!self.options.cookieJar) {\n    self.options.cookieJar = RequestCookieJar();\n  }\n  if (fileResolver && typeof fileResolver.readFile === FUNCTION && typeof (extendedRootCA = _.get(options, 'requester.extendedRootCA')) === STRING) {\n    // eslint-disable-next-line security/detect-non-literal-fs-filename\n    fileResolver.readFile(extendedRootCA, function (err, caCerts) {\n      if (err) {\n        // @todo trigger console error\n      } else {\n        // set extendedRootCA option\n        self.options.extendedRootCA = caCerts;\n      }\n      return callback();\n    });\n  } else {\n    return callback();\n  }\n};\nRequesterPool.prototype.create = function (trace, callback) {\n  return Requester.create(trace, this.options, callback);\n};\nmodule.exports.RequesterPool = RequesterPool;","map":{"version":3,"names":["_","require","Requester","RequestCookieJar","jar","STRING","FUNCTION","RequesterPool","options","callback","self","extendedRootCA","fileResolver","assign","timeout","min","get","timings","verbose","keepAlive","agents","cookieJar","strictSSL","maxResponseSize","useWhatWGUrlParser","insecureHTTPParser","followRedirects","followOriginalHttpMethod","maxRedirects","implicitCacheControl","implicitTraceHeader","systemHeaders","removeRefererHeaderOnRedirect","ignoreProxyEnvironmentVariables","network","readFile","err","caCerts","prototype","create","trace","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-runtime/lib/requester/requester-pool.js"],"sourcesContent":["var _ = require('lodash'),\n    Requester = require('./requester').Requester,\n    RequestCookieJar = require('postman-request').jar,\n\n    STRING = 'string',\n    FUNCTION = 'function',\n\n    RequesterPool; // fn\n\nRequesterPool = function (options, callback) {\n    var self = this,\n        extendedRootCA,\n        fileResolver = options && options.fileResolver;\n\n    _.assign((self.options = {}), {\n        timeout: _.min([\n            _.get(options, 'timeout.request'),\n            _.get(options, 'timeout.global')\n        ]), // validated later inside requester\n        timings: _.get(options, 'requester.timings', true),\n        verbose: _.get(options, 'requester.verbose', false),\n        keepAlive: _.get(options, 'requester.keepAlive', true),\n        agents: _.get(options, 'requester.agents'), // http(s).Agent instances\n        cookieJar: _.get(options, 'requester.cookieJar'), // default set later in this constructor\n        strictSSL: _.get(options, 'requester.strictSSL'),\n        maxResponseSize: _.get(options, 'requester.maxResponseSize'),\n        // @todo drop support in v8\n        useWhatWGUrlParser: _.get(options, 'requester.useWhatWGUrlParser', false),\n        insecureHTTPParser: _.get(options, 'requester.insecureHTTPParser'),\n        followRedirects: _.get(options, 'requester.followRedirects', true),\n        followOriginalHttpMethod: _.get(options, 'requester.followOriginalHttpMethod'),\n        maxRedirects: _.get(options, 'requester.maxRedirects'),\n        implicitCacheControl: _.get(options, 'requester.implicitCacheControl', true),\n        implicitTraceHeader: _.get(options, 'requester.implicitTraceHeader', true),\n        systemHeaders: _.get(options, 'requester.systemHeaders', {}),\n        removeRefererHeaderOnRedirect: _.get(options, 'requester.removeRefererHeaderOnRedirect'),\n        ignoreProxyEnvironmentVariables: _.get(options, 'ignoreProxyEnvironmentVariables'),\n        network: _.get(options, 'network', {})\n    });\n\n    // create a cookie jar if one is not provided\n    if (!self.options.cookieJar) {\n        self.options.cookieJar = RequestCookieJar();\n    }\n\n    if (fileResolver && typeof fileResolver.readFile === FUNCTION &&\n        typeof (extendedRootCA = _.get(options, 'requester.extendedRootCA')) === STRING) {\n        // eslint-disable-next-line security/detect-non-literal-fs-filename\n        fileResolver.readFile(extendedRootCA, function (err, caCerts) {\n            if (err) {\n                // @todo trigger console error\n            }\n            else {\n                // set extendedRootCA option\n                self.options.extendedRootCA = caCerts;\n            }\n\n            return callback();\n        });\n    }\n    else {\n        return callback();\n    }\n};\n\nRequesterPool.prototype.create = function (trace, callback) {\n    return Requester.create(trace, this.options, callback);\n};\n\nmodule.exports.RequesterPool = RequesterPool;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}