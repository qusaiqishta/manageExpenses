{"ast":null,"code":"var _ = require('../util').lodash,\n  Property = require('./property').Property,\n  Script = require('./script').Script,\n  Event;\n\n/**\n * @typedef Event.definition\n * @property {String} listen The event-name that this script will be called for. Usually either \"test\" or \"prerequest\"\n * @property {Script|String} script A {@link Script} instance that will be executed on this event. In case of a\n * string, a new {@link Script} is created.\n * @example <caption>Constructing an event</caption>\n * var Event = require('postman-collection').Event,\n *     rawEvent = {\n *         listen: 'test',\n *         script: 'tests[\"response code is 401\"] = responseCode.code === 401'\n *     },\n *     myEvent;\n * myEvent = new Event(rawEvent);\n */\n_.inherit(\n/**\n * A Postman event definition that refers to an event to be listened to and a script reference or definition to be\n * executed.\n *\n * @constructor\n * @extends {Property}\n *\n * @param {Event.definition} definition Pass the initial definition of the event as the options parameter.\n */\nEvent = function PostmanEvent(definition) {\n  // this constructor is intended to inherit and as such the super constructor is required to be executed\n  Event.super_.call(this, definition);\n  // set initial values of this event\n  definition && this.update(definition);\n}, Property);\n_.assign(Event.prototype, /** @lends Event.prototype */{\n  /**\n   * Update an event.\n   *\n   * @param {Event.definition} definition -\n   */\n  update(definition) {\n    if (!definition) {\n      return;\n    }\n    var result,\n      script = definition.script;\n    if (Script.isScript(script)) {\n      result = script;\n    } else if (_.isArray(script) || _.isString(script)) {\n      result = new Script({\n        exec: script\n      });\n    } else if (_.isObject(script)) {\n      result = new Script(script);\n    }\n    _.mergeDefined(this, /** @lends Event.prototype */{\n      /**\n       * Name of the event that this instance is intended to listen to.\n       *\n       * @type {String}\n       */\n      listen: _.isString(definition.listen) ? definition.listen.toLowerCase() : undefined,\n      /**\n       * The script that is to be executed when this event is triggered.\n       *\n       * @type {Script}\n       */\n      script: result\n    });\n  }\n});\n_.assign(Event, /** @lends Event */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'Event'\n});\nmodule.exports = {\n  Event\n};","map":{"version":3,"names":["_","require","lodash","Property","Script","Event","inherit","PostmanEvent","definition","super_","call","update","assign","prototype","result","script","isScript","isArray","isString","exec","isObject","mergeDefined","listen","toLowerCase","undefined","_postman_propertyName","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/event.js"],"sourcesContent":["var _ = require('../util').lodash,\n    Property = require('./property').Property,\n    Script = require('./script').Script,\n\n    Event;\n\n/**\n * @typedef Event.definition\n * @property {String} listen The event-name that this script will be called for. Usually either \"test\" or \"prerequest\"\n * @property {Script|String} script A {@link Script} instance that will be executed on this event. In case of a\n * string, a new {@link Script} is created.\n * @example <caption>Constructing an event</caption>\n * var Event = require('postman-collection').Event,\n *     rawEvent = {\n *         listen: 'test',\n *         script: 'tests[\"response code is 401\"] = responseCode.code === 401'\n *     },\n *     myEvent;\n * myEvent = new Event(rawEvent);\n */\n_.inherit((\n\n    /**\n     * A Postman event definition that refers to an event to be listened to and a script reference or definition to be\n     * executed.\n     *\n     * @constructor\n     * @extends {Property}\n     *\n     * @param {Event.definition} definition Pass the initial definition of the event as the options parameter.\n     */\n    Event = function PostmanEvent (definition) {\n        // this constructor is intended to inherit and as such the super constructor is required to be executed\n        Event.super_.call(this, definition);\n        // set initial values of this event\n        definition && this.update(definition);\n    }), Property);\n\n_.assign(Event.prototype, /** @lends Event.prototype */ {\n    /**\n     * Update an event.\n     *\n     * @param {Event.definition} definition -\n     */\n    update (definition) {\n        if (!definition) {\n            return;\n        }\n\n        var result,\n            script = definition.script;\n\n        if (Script.isScript(script)) {\n            result = script;\n        }\n        else if (_.isArray(script) || _.isString(script)) {\n            result = new Script({ exec: script });\n        }\n        else if (_.isObject(script)) {\n            result = new Script(script);\n        }\n\n        _.mergeDefined(this, /** @lends Event.prototype */ {\n            /**\n             * Name of the event that this instance is intended to listen to.\n             *\n             * @type {String}\n             */\n            listen: _.isString(definition.listen) ? definition.listen.toLowerCase() : undefined,\n\n            /**\n             * The script that is to be executed when this event is triggered.\n             *\n             * @type {Script}\n             */\n            script: result\n        });\n    }\n});\n\n_.assign(Event, /** @lends Event */ {\n\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'Event'\n});\n\nmodule.exports = {\n    Event\n};\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM;EAC7BC,QAAQ,GAAGF,OAAO,CAAC,YAAY,CAAC,CAACE,QAAQ;EACzCC,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC,CAACG,MAAM;EAEnCC,KAAK;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,CAAC,CAACM,OAAO;AAEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACID,KAAK,GAAG,SAASE,YAAY,CAAEC,UAAU,EAAE;EACvC;EACAH,KAAK,CAACI,MAAM,CAACC,IAAI,CAAC,IAAI,EAAEF,UAAU,CAAC;EACnC;EACAA,UAAU,IAAI,IAAI,CAACG,MAAM,CAACH,UAAU,CAAC;AACzC,CAAC,EAAGL,QAAQ,CAAC;AAEjBH,CAAC,CAACY,MAAM,CAACP,KAAK,CAACQ,SAAS,EAAE,6BAA8B;EACpD;AACJ;AACA;AACA;AACA;EACIF,MAAM,CAAEH,UAAU,EAAE;IAChB,IAAI,CAACA,UAAU,EAAE;MACb;IACJ;IAEA,IAAIM,MAAM;MACNC,MAAM,GAAGP,UAAU,CAACO,MAAM;IAE9B,IAAIX,MAAM,CAACY,QAAQ,CAACD,MAAM,CAAC,EAAE;MACzBD,MAAM,GAAGC,MAAM;IACnB,CAAC,MACI,IAAIf,CAAC,CAACiB,OAAO,CAACF,MAAM,CAAC,IAAIf,CAAC,CAACkB,QAAQ,CAACH,MAAM,CAAC,EAAE;MAC9CD,MAAM,GAAG,IAAIV,MAAM,CAAC;QAAEe,IAAI,EAAEJ;MAAO,CAAC,CAAC;IACzC,CAAC,MACI,IAAIf,CAAC,CAACoB,QAAQ,CAACL,MAAM,CAAC,EAAE;MACzBD,MAAM,GAAG,IAAIV,MAAM,CAACW,MAAM,CAAC;IAC/B;IAEAf,CAAC,CAACqB,YAAY,CAAC,IAAI,EAAE,6BAA8B;MAC/C;AACZ;AACA;AACA;AACA;MACYC,MAAM,EAAEtB,CAAC,CAACkB,QAAQ,CAACV,UAAU,CAACc,MAAM,CAAC,GAAGd,UAAU,CAACc,MAAM,CAACC,WAAW,EAAE,GAAGC,SAAS;MAEnF;AACZ;AACA;AACA;AACA;MACYT,MAAM,EAAED;IACZ,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEFd,CAAC,CAACY,MAAM,CAACP,KAAK,EAAE,mBAAoB;EAEhC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIoB,qBAAqB,EAAE;AAC3B,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAG;EACbtB;AACJ,CAAC"},"metadata":{},"sourceType":"script"}