{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar AST = {\n  // Public API used to evaluate derived attributes regarding AST nodes\n  helpers: {\n    // a mustache is definitely a helper if:\n    // * it is an eligible helper, and\n    // * it has at least one parameter or hash segment\n    helperExpression: function helperExpression(node) {\n      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);\n    },\n    scopedId: function scopedId(path) {\n      return /^\\.|this\\b/.test(path.original);\n    },\n    // an ID is simple if it only has one part, and that part is not\n    // `..` or `this`.\n    simpleId: function simpleId(path) {\n      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;\n    }\n  }\n};\n\n// Must be exported as an object rather than the root of the module as the jison lexer\n// must modify the object to operate properly.\nexports['default'] = AST;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;AAAA,IAAIA,GAAG,GAAG;;EAERC,OAAO,EAAE;;;;IAIPC,gBAAgB,EAAE,0BAASC,IAAI,EAAE;MAC/B,OACEA,IAAI,CAACC,IAAI,KAAK,eAAe,IAC5B,CAACD,IAAI,CAACC,IAAI,KAAK,mBAAmB,IACjCD,IAAI,CAACC,IAAI,KAAK,gBAAgB,KAC9B,CAAC,EAAED,IAAK,CAACE,MAAM,IAAIF,IAAI,CAACE,MAAM,CAACC,MAAM,IAAKH,IAAI,CAACI,IAAI;KAExD;IAEDC,QAAQ,EAAE,kBAASC,IAAI,EAAE;MACvB,OAAO,YAAY,CAACC,IAAI,CAACD,IAAI,CAACE,QAAQ,CAAC;KACxC;;;IAIDC,QAAQ,EAAE,kBAASH,IAAI,EAAE;MACvB,OACEA,IAAI,CAACI,KAAK,CAACP,MAAM,KAAK,CAAC,IAAI,CAACN,GAAG,CAACC,OAAO,CAACO,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACA,IAAI,CAACK,KAAK;;;CAI5E;;;;qBAIcd,GAAG","names":["AST","helpers","helperExpression","node","type","params","length","hash","scopedId","path","test","original","simpleId","parts","depth"],"sources":["../../../../lib/handlebars/compiler/ast.js"],"sourcesContent":["let AST = {\n  // Public API used to evaluate derived attributes regarding AST nodes\n  helpers: {\n    // a mustache is definitely a helper if:\n    // * it is an eligible helper, and\n    // * it has at least one parameter or hash segment\n    helperExpression: function(node) {\n      return (\n        node.type === 'SubExpression' ||\n        ((node.type === 'MustacheStatement' ||\n          node.type === 'BlockStatement') &&\n          !!((node.params && node.params.length) || node.hash))\n      );\n    },\n\n    scopedId: function(path) {\n      return /^\\.|this\\b/.test(path.original);\n    },\n\n    // an ID is simple if it only has one part, and that part is not\n    // `..` or `this`.\n    simpleId: function(path) {\n      return (\n        path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth\n      );\n    }\n  }\n};\n\n// Must be exported as an object rather than the root of the module as the jison lexer\n// must modify the object to operate properly.\nexport default AST;\n"]},"metadata":{},"sourceType":"script"}