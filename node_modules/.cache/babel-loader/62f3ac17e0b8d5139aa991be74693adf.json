{"ast":null,"code":"const _stringWidth = require('string-width');\nconst _defaultFormatValue = require('./format-value');\nconst _defaultFormatBar = require('./format-bar');\nconst _defaultFormatTime = require('./format-time');\n\n// generic formatter\nmodule.exports = function defaultFormatter(options, params, payload) {\n  // copy format string\n  let s = options.format;\n\n  // custom time format set ?\n  const formatTime = options.formatTime || _defaultFormatTime;\n\n  // custom value format set ?\n  const formatValue = options.formatValue || _defaultFormatValue;\n\n  // custom bar format set ?\n  const formatBar = options.formatBar || _defaultFormatBar;\n\n  // calculate progress in percent\n  const percentage = Math.floor(params.progress * 100) + '';\n\n  // bar stopped and stopTime set ?\n  const stopTime = params.stopTime || Date.now();\n\n  // calculate elapsed time\n  const elapsedTime = Math.round((stopTime - params.startTime) / 1000);\n\n  // merges data from payload and calculated\n  const context = Object.assign({}, payload, {\n    bar: formatBar(params.progress, options),\n    percentage: formatValue(percentage, options, 'percentage'),\n    total: formatValue(params.total, options, 'total'),\n    value: formatValue(params.value, options, 'value'),\n    eta: formatValue(params.eta, options, 'eta'),\n    eta_formatted: formatTime(params.eta, options, 5),\n    duration: formatValue(elapsedTime, options, 'duration'),\n    duration_formatted: formatTime(elapsedTime, options, 1)\n  });\n\n  // assign placeholder tokens\n  s = s.replace(/\\{(\\w+)\\}/g, function (match, key) {\n    // key exists within payload/context\n    if (typeof context[key] !== 'undefined') {\n      return context[key];\n    }\n\n    // no changes to unknown values\n    return match;\n  });\n\n  // calculate available whitespace (2 characters margin of error)\n  const fullMargin = Math.max(0, params.maxWidth - _stringWidth(s) - 2);\n  const halfMargin = Math.floor(fullMargin / 2);\n\n  // distribute available whitespace according to position\n  switch (options.align) {\n    // fill start-of-line with whitespaces\n    case 'right':\n      s = fullMargin > 0 ? ' '.repeat(fullMargin) + s : s;\n      break;\n\n    // distribute whitespaces to left+right\n    case 'center':\n      s = halfMargin > 0 ? ' '.repeat(halfMargin) + s : s;\n      break;\n\n    // default: left align, no additional whitespaces\n    case 'left':\n    default:\n      break;\n  }\n  return s;\n};","map":{"version":3,"names":["_stringWidth","require","_defaultFormatValue","_defaultFormatBar","_defaultFormatTime","module","exports","defaultFormatter","options","params","payload","s","format","formatTime","formatValue","formatBar","percentage","Math","floor","progress","stopTime","Date","now","elapsedTime","round","startTime","context","Object","assign","bar","total","value","eta","eta_formatted","duration","duration_formatted","replace","match","key","fullMargin","max","maxWidth","halfMargin","align","repeat"],"sources":["/Users/Qusai.Qishta/node_modules/cli-progress/lib/formatter.js"],"sourcesContent":["const _stringWidth = require('string-width');\nconst _defaultFormatValue = require('./format-value');\nconst _defaultFormatBar = require('./format-bar');\nconst _defaultFormatTime = require('./format-time');\n\n// generic formatter\nmodule.exports = function defaultFormatter(options, params, payload){\n\n    // copy format string\n    let s = options.format;\n\n    // custom time format set ?\n    const formatTime = options.formatTime || _defaultFormatTime;\n    \n    // custom value format set ?\n    const formatValue = options.formatValue || _defaultFormatValue;\n\n    // custom bar format set ?\n    const formatBar = options.formatBar || _defaultFormatBar;\n\n    // calculate progress in percent\n    const percentage =  Math.floor(params.progress*100) + '';\n\n    // bar stopped and stopTime set ?\n    const stopTime = params.stopTime || Date.now();\n\n    // calculate elapsed time\n    const elapsedTime = Math.round((stopTime - params.startTime)/1000);\n\n    // merges data from payload and calculated\n    const context = Object.assign({}, payload, {\n        bar:                    formatBar(params.progress, options),\n\n        percentage:             formatValue(percentage, options, 'percentage'),\n        total:                  formatValue(params.total, options, 'total'),\n        value:                  formatValue(params.value, options, 'value'),\n\n        eta:                    formatValue(params.eta, options, 'eta'),\n        eta_formatted:          formatTime(params.eta, options, 5),\n        \n        duration:               formatValue(elapsedTime, options, 'duration'),\n        duration_formatted:     formatTime(elapsedTime, options, 1)\n    });\n\n    // assign placeholder tokens\n    s = s.replace(/\\{(\\w+)\\}/g, function(match, key){\n        // key exists within payload/context\n        if (typeof context[key] !== 'undefined') {\n            return context[key];\n        }\n\n        // no changes to unknown values\n        return match;\n    });\n\n    // calculate available whitespace (2 characters margin of error)\n    const fullMargin = Math.max(0, params.maxWidth - _stringWidth(s) -2);\n    const halfMargin = Math.floor(fullMargin / 2);\n\n    // distribute available whitespace according to position\n    switch (options.align) {\n\n        // fill start-of-line with whitespaces\n        case 'right':\n            s = (fullMargin > 0) ? ' '.repeat(fullMargin) + s : s;\n            break;\n\n        // distribute whitespaces to left+right\n        case 'center':\n            s = (halfMargin > 0) ? ' '.repeat(halfMargin) + s : s;\n            break;\n\n        // default: left align, no additional whitespaces\n        case 'left':\n        default:\n            break;\n    }\n\n    return s;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}