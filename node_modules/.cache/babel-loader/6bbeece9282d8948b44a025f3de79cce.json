{"ast":null,"code":"/**!\n * Originally written by:\n * https://github.com/sindresorhus/parse-json\n */\nvar fallback = require('../vendor/parse'),\n  bomb = require('./bomb'),\n  FALLBACK_MODE = 'json',\n  ERROR_NAME = 'JSONError',\n  parse; // fn\n\n/**\n * Accept a string as JSON and return an object.\n * @private\n *\n * @param {String} str The input stringified JSON object to be parsed.\n * @param {Function=} [reviver] A customizer function to be used within the fallback (BOM friendly) JSON parser.\n * @param {Boolean=} [strict] Set to true to treat the occurrence of BOM as a fatal error.\n *\n * @returns {Object} The parsed JSON object constructed from str\n * @throws {SyntaxError} If `str` is not a valid JSON\n * @throws {SyntaxError} In `strict` mode if `str` contains BOM\n */\nparse = function (str, reviver, strict) {\n  var bomMarkerIndex = bomb.indexOfBOM(str);\n  if (bomMarkerIndex) {\n    if (strict) {\n      throw SyntaxError('Unexpected byte order mark found in first ' + bomMarkerIndex + ' character(s)');\n    }\n    // clean up BOM if not strict\n    str = str.slice(bomMarkerIndex);\n  }\n  try {\n    // first try and use normal JSON.parse as this is faster\n    return JSON.parse(str, reviver);\n  } catch (err) {\n    // if JSON.parse fails, we try using a more verbose parser\n    fallback.parse(str, {\n      mode: FALLBACK_MODE,\n      reviver: reviver\n    });\n\n    // if there was an error in this catch block, `fallback.parse` should raise same error. hence this `throw`\n    // will never get executed. if it does not, we still throw original error.\n    throw err;\n  }\n};\nmodule.exports = {\n  parse: function (str, reviver, relaxed) {\n    if (typeof reviver === 'boolean' && relaxed === null) {\n      relaxed = reviver;\n      reviver = null;\n    }\n    try {\n      return parse(str, reviver, relaxed);\n    }\n    // we do this simply to set the error name and as such making it more identifiable\n    catch (err) {\n      err.name = ERROR_NAME;\n      throw err;\n    }\n  },\n  stringify: function () {\n    try {\n      // eslint-disable-next-line prefer-spread\n      return JSON.stringify.apply(JSON, arguments);\n    }\n    // we do this simply to set the error name and as such making it more identifiable\n    catch (err) {\n      err.name = ERROR_NAME;\n      throw err;\n    }\n  }\n};","map":{"version":3,"names":["fallback","require","bomb","FALLBACK_MODE","ERROR_NAME","parse","str","reviver","strict","bomMarkerIndex","indexOfBOM","SyntaxError","slice","JSON","err","mode","module","exports","relaxed","name","stringify","apply","arguments"],"sources":["/Users/Qusai.Qishta/node_modules/liquid-json/lib/index.js"],"sourcesContent":["/**!\n * Originally written by:\n * https://github.com/sindresorhus/parse-json\n */\nvar fallback = require('../vendor/parse'),\n    bomb = require('./bomb'),\n    FALLBACK_MODE = 'json',\n    ERROR_NAME = 'JSONError',\n\n    parse; // fn\n\n/**\n * Accept a string as JSON and return an object.\n * @private\n *\n * @param {String} str The input stringified JSON object to be parsed.\n * @param {Function=} [reviver] A customizer function to be used within the fallback (BOM friendly) JSON parser.\n * @param {Boolean=} [strict] Set to true to treat the occurrence of BOM as a fatal error.\n *\n * @returns {Object} The parsed JSON object constructed from str\n * @throws {SyntaxError} If `str` is not a valid JSON\n * @throws {SyntaxError} In `strict` mode if `str` contains BOM\n */\nparse = function (str, reviver, strict) {\n    var bomMarkerIndex = bomb.indexOfBOM(str);\n\n    if (bomMarkerIndex) {\n        if (strict) {\n            throw SyntaxError('Unexpected byte order mark found in first ' + bomMarkerIndex + ' character(s)');\n        }\n        // clean up BOM if not strict\n        str = str.slice(bomMarkerIndex);\n    }\n\n    try { // first try and use normal JSON.parse as this is faster\n        return JSON.parse(str, reviver);\n    }\n    catch (err) { // if JSON.parse fails, we try using a more verbose parser\n        fallback.parse(str, {\n            mode: FALLBACK_MODE,\n            reviver: reviver\n        });\n\n        // if there was an error in this catch block, `fallback.parse` should raise same error. hence this `throw`\n        // will never get executed. if it does not, we still throw original error.\n        throw err;\n    }\n};\n\nmodule.exports = {\n    parse: function (str, reviver, relaxed) {\n        if ((typeof reviver === 'boolean') && (relaxed === null)) {\n            relaxed = reviver;\n            reviver = null;\n        }\n\n        try {\n            return parse(str, reviver, relaxed);\n        }\n        // we do this simply to set the error name and as such making it more identifiable\n        catch (err) {\n            err.name = ERROR_NAME;\n            throw err;\n        }\n    },\n\n    stringify: function () {\n        try {\n            // eslint-disable-next-line prefer-spread\n            return JSON.stringify.apply(JSON, arguments);\n        }\n        // we do this simply to set the error name and as such making it more identifiable\n        catch (err) {\n            err.name = ERROR_NAME;\n            throw err;\n        }\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,iBAAiB,CAAC;EACrCC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;EACxBE,aAAa,GAAG,MAAM;EACtBC,UAAU,GAAG,WAAW;EAExBC,KAAK,CAAC,CAAC;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,KAAK,GAAG,UAAUC,GAAG,EAAEC,OAAO,EAAEC,MAAM,EAAE;EACpC,IAAIC,cAAc,GAAGP,IAAI,CAACQ,UAAU,CAACJ,GAAG,CAAC;EAEzC,IAAIG,cAAc,EAAE;IAChB,IAAID,MAAM,EAAE;MACR,MAAMG,WAAW,CAAC,4CAA4C,GAAGF,cAAc,GAAG,eAAe,CAAC;IACtG;IACA;IACAH,GAAG,GAAGA,GAAG,CAACM,KAAK,CAACH,cAAc,CAAC;EACnC;EAEA,IAAI;IAAE;IACF,OAAOI,IAAI,CAACR,KAAK,CAACC,GAAG,EAAEC,OAAO,CAAC;EACnC,CAAC,CACD,OAAOO,GAAG,EAAE;IAAE;IACVd,QAAQ,CAACK,KAAK,CAACC,GAAG,EAAE;MAChBS,IAAI,EAAEZ,aAAa;MACnBI,OAAO,EAAEA;IACb,CAAC,CAAC;;IAEF;IACA;IACA,MAAMO,GAAG;EACb;AACJ,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAG;EACbZ,KAAK,EAAE,UAAUC,GAAG,EAAEC,OAAO,EAAEW,OAAO,EAAE;IACpC,IAAK,OAAOX,OAAO,KAAK,SAAS,IAAMW,OAAO,KAAK,IAAK,EAAE;MACtDA,OAAO,GAAGX,OAAO;MACjBA,OAAO,GAAG,IAAI;IAClB;IAEA,IAAI;MACA,OAAOF,KAAK,CAACC,GAAG,EAAEC,OAAO,EAAEW,OAAO,CAAC;IACvC;IACA;IACA,OAAOJ,GAAG,EAAE;MACRA,GAAG,CAACK,IAAI,GAAGf,UAAU;MACrB,MAAMU,GAAG;IACb;EACJ,CAAC;EAEDM,SAAS,EAAE,YAAY;IACnB,IAAI;MACA;MACA,OAAOP,IAAI,CAACO,SAAS,CAACC,KAAK,CAACR,IAAI,EAAES,SAAS,CAAC;IAChD;IACA;IACA,OAAOR,GAAG,EAAE;MACRA,GAAG,CAACK,IAAI,GAAGf,UAAU;MACrB,MAAMU,GAAG;IACb;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"script"}