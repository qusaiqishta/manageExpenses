{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UTF_32LE = exports.UTF_32BE = exports.UTF_16LE = exports.UTF_16BE = void 0;\nconst match_1 = __importDefault(require(\"../match\"));\nclass UTF_16BE {\n  name() {\n    return 'UTF-16BE';\n  }\n  match(det) {\n    const input = det.rawInput;\n    if (input.length >= 2 && (input[0] & 0xff) == 0xfe && (input[1] & 0xff) == 0xff) {\n      return (0, match_1.default)(det, this, 100);\n    }\n    return null;\n  }\n}\nexports.UTF_16BE = UTF_16BE;\nclass UTF_16LE {\n  name() {\n    return 'UTF-16LE';\n  }\n  match(det) {\n    const input = det.rawInput;\n    if (input.length >= 2 && (input[0] & 0xff) == 0xff && (input[1] & 0xff) == 0xfe) {\n      if (input.length >= 4 && input[2] == 0x00 && input[3] == 0x00) {\n        return null;\n      }\n      return (0, match_1.default)(det, this, 100);\n    }\n    return null;\n  }\n}\nexports.UTF_16LE = UTF_16LE;\nclass UTF_32 {\n  name() {\n    return 'UTF-32';\n  }\n  getChar(input, index) {\n    return -1;\n  }\n  match(det) {\n    let numValid = 0,\n      numInvalid = 0,\n      hasBOM = false,\n      confidence = 0;\n    const limit = det.rawLen / 4 * 4;\n    const input = det.rawInput;\n    if (limit == 0) {\n      return null;\n    }\n    if (this.getChar(input, 0) == 0x0000feff) {\n      hasBOM = true;\n    }\n    for (let i = 0; i < limit; i += 4) {\n      const ch = this.getChar(input, i);\n      if (ch < 0 || ch >= 0x10ffff || ch >= 0xd800 && ch <= 0xdfff) {\n        numInvalid += 1;\n      } else {\n        numValid += 1;\n      }\n    }\n    if (hasBOM && numInvalid == 0) {\n      confidence = 100;\n    } else if (hasBOM && numValid > numInvalid * 10) {\n      confidence = 80;\n    } else if (numValid > 3 && numInvalid == 0) {\n      confidence = 100;\n    } else if (numValid > 0 && numInvalid == 0) {\n      confidence = 80;\n    } else if (numValid > numInvalid * 10) {\n      confidence = 25;\n    }\n    return confidence == 0 ? null : (0, match_1.default)(det, this, confidence);\n  }\n}\nclass UTF_32BE extends UTF_32 {\n  name() {\n    return 'UTF-32BE';\n  }\n  getChar(input, index) {\n    return (input[index + 0] & 0xff) << 24 | (input[index + 1] & 0xff) << 16 | (input[index + 2] & 0xff) << 8 | input[index + 3] & 0xff;\n  }\n}\nexports.UTF_32BE = UTF_32BE;\nclass UTF_32LE extends UTF_32 {\n  name() {\n    return 'UTF-32LE';\n  }\n  getChar(input, index) {\n    return (input[index + 3] & 0xff) << 24 | (input[index + 2] & 0xff) << 16 | (input[index + 1] & 0xff) << 8 | input[index + 0] & 0xff;\n  }\n}\nexports.UTF_32LE = UTF_32LE;","map":{"version":3,"mappings":"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","names":["UTF_16BE","name","match","det","input","rawInput","length","exports","UTF_16LE","UTF_32","getChar","index","numValid","numInvalid","hasBOM","confidence","limit","rawLen","i","ch","UTF_32BE","UTF_32LE"],"sourceRoot":"","sources":["../../src/encoding/unicode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}