{"ast":null,"code":"// utility to merge defaults\nfunction mergeOption(v, defaultValue) {\n  if (typeof v === 'undefined' || v === null) {\n    return defaultValue;\n  } else {\n    return v;\n  }\n}\nmodule.exports = {\n  // set global options\n  parse: function parse(rawOptions, preset) {\n    // options storage\n    const options = {};\n\n    // merge preset\n    const opt = Object.assign({}, preset, rawOptions);\n\n    // the max update rate in fps (redraw will only triggered on value change)\n    options.throttleTime = 1000 / mergeOption(opt.fps, 10);\n\n    // the output stream to write on\n    options.stream = mergeOption(opt.stream, process.stderr);\n\n    // external terminal provided ?\n    options.terminal = mergeOption(opt.terminal, null);\n\n    // clear on finish ?\n    options.clearOnComplete = mergeOption(opt.clearOnComplete, false);\n\n    // stop on finish ?\n    options.stopOnComplete = mergeOption(opt.stopOnComplete, false);\n\n    // size of the progressbar in chars\n    options.barsize = mergeOption(opt.barsize, 40);\n\n    // position of the progress bar - 'left' (default), 'right' or 'center'\n    options.align = mergeOption(opt.align, 'left');\n\n    // hide the cursor ?\n    options.hideCursor = mergeOption(opt.hideCursor, false);\n\n    // disable linewrapping ?\n    options.linewrap = mergeOption(opt.linewrap, false);\n\n    // pre-render bar strings (performance)\n    options.barCompleteString = new Array(options.barsize + 1).join(opt.barCompleteChar || '=');\n    options.barIncompleteString = new Array(options.barsize + 1).join(opt.barIncompleteChar || '-');\n\n    // glue sequence (control chars) between bar elements ?\n    options.barGlue = mergeOption(opt.barGlue, '');\n\n    // the bar format\n    options.format = mergeOption(opt.format, 'progress [{bar}] {percentage}% | ETA: {eta}s | {value}/{total}');\n\n    // external time-format provided ?\n    options.formatTime = mergeOption(opt.formatTime, null);\n\n    // external value-format provided ?\n    options.formatValue = mergeOption(opt.formatValue, null);\n\n    // external bar-format provided ?\n    options.formatBar = mergeOption(opt.formatBar, null);\n\n    // the number of results to average ETA over\n    options.etaBufferLength = mergeOption(opt.etaBuffer, 10);\n\n    // automatic eta updates based on fps\n    options.etaAsynchronousUpdate = mergeOption(opt.etaAsynchronousUpdate, false);\n\n    // allow synchronous updates ?\n    options.synchronousUpdate = mergeOption(opt.synchronousUpdate, true);\n\n    // notty mode\n    options.noTTYOutput = mergeOption(opt.noTTYOutput, false);\n\n    // schedule - 2s\n    options.notTTYSchedule = mergeOption(opt.notTTYSchedule, 2000);\n\n    // emptyOnZero - false\n    options.emptyOnZero = mergeOption(opt.emptyOnZero, false);\n\n    // force bar redraw even if progress did not change\n    options.forceRedraw = mergeOption(opt.forceRedraw, false);\n\n    // automated padding to fixed width ?\n    options.autopadding = mergeOption(opt.autopadding, false);\n\n    // autopadding character - empty in case autopadding is disabled\n    options.autopaddingChar = options.autopadding ? mergeOption(opt.autopaddingChar, '   ') : '';\n    return options;\n  }\n};","map":{"version":3,"names":["mergeOption","v","defaultValue","module","exports","parse","rawOptions","preset","options","opt","Object","assign","throttleTime","fps","stream","process","stderr","terminal","clearOnComplete","stopOnComplete","barsize","align","hideCursor","linewrap","barCompleteString","Array","join","barCompleteChar","barIncompleteString","barIncompleteChar","barGlue","format","formatTime","formatValue","formatBar","etaBufferLength","etaBuffer","etaAsynchronousUpdate","synchronousUpdate","noTTYOutput","notTTYSchedule","emptyOnZero","forceRedraw","autopadding","autopaddingChar"],"sources":["/Users/Qusai.Qishta/node_modules/cli-progress/lib/options.js"],"sourcesContent":["// utility to merge defaults\nfunction mergeOption(v, defaultValue){\n    if (typeof v === 'undefined' || v === null){\n        return defaultValue;\n    }else{\n        return v;\n    }\n}\n\nmodule.exports = {\n    // set global options\n    parse: function parse(rawOptions, preset){\n\n        // options storage\n        const options = {};\n\n        // merge preset\n        const opt = Object.assign({}, preset, rawOptions);\n\n        // the max update rate in fps (redraw will only triggered on value change)\n        options.throttleTime = 1000 / (mergeOption(opt.fps, 10));\n\n        // the output stream to write on\n        options.stream = mergeOption(opt.stream, process.stderr);\n\n        // external terminal provided ?\n        options.terminal = mergeOption(opt.terminal, null);\n\n        // clear on finish ?\n        options.clearOnComplete = mergeOption(opt.clearOnComplete, false);\n\n        // stop on finish ?\n        options.stopOnComplete = mergeOption(opt.stopOnComplete, false);\n\n        // size of the progressbar in chars\n        options.barsize = mergeOption(opt.barsize, 40);\n\n        // position of the progress bar - 'left' (default), 'right' or 'center'\n        options.align = mergeOption(opt.align, 'left');\n\n        // hide the cursor ?\n        options.hideCursor = mergeOption(opt.hideCursor, false);\n\n        // disable linewrapping ?\n        options.linewrap = mergeOption(opt.linewrap, false);\n\n        // pre-render bar strings (performance)\n        options.barCompleteString = (new Array(options.barsize + 1 ).join(opt.barCompleteChar || '='));\n        options.barIncompleteString = (new Array(options.barsize + 1 ).join(opt.barIncompleteChar || '-'));\n\n        // glue sequence (control chars) between bar elements ?\n        options.barGlue = mergeOption(opt.barGlue, '');\n\n        // the bar format\n        options.format = mergeOption(opt.format, 'progress [{bar}] {percentage}% | ETA: {eta}s | {value}/{total}');\n\n        // external time-format provided ?\n        options.formatTime = mergeOption(opt.formatTime, null);\n\n        // external value-format provided ?\n        options.formatValue = mergeOption(opt.formatValue, null);\n\n        // external bar-format provided ?\n        options.formatBar = mergeOption(opt.formatBar, null);\n\n        // the number of results to average ETA over\n        options.etaBufferLength = mergeOption(opt.etaBuffer, 10);\n\n        // automatic eta updates based on fps\n        options.etaAsynchronousUpdate = mergeOption(opt.etaAsynchronousUpdate, false);\n\n        // allow synchronous updates ?\n        options.synchronousUpdate = mergeOption(opt.synchronousUpdate, true);\n\n        // notty mode\n        options.noTTYOutput = mergeOption(opt.noTTYOutput, false);\n\n        // schedule - 2s\n        options.notTTYSchedule = mergeOption(opt.notTTYSchedule, 2000);\n        \n        // emptyOnZero - false\n        options.emptyOnZero = mergeOption(opt.emptyOnZero, false);\n\n        // force bar redraw even if progress did not change\n        options.forceRedraw = mergeOption(opt.forceRedraw, false);\n\n        // automated padding to fixed width ?\n        options.autopadding = mergeOption(opt.autopadding, false);\n\n        // autopadding character - empty in case autopadding is disabled\n        options.autopaddingChar = options.autopadding ? mergeOption(opt.autopaddingChar, '   ') : '';\n\n        return options;\n    }\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}