{"ast":null,"code":"// ETA calculation\nclass ETA {\n  constructor(length, initTime, initValue) {\n    // size of eta buffer\n    this.etaBufferLength = length || 100;\n\n    // eta buffer with initial values\n    this.valueBuffer = [initValue];\n    this.timeBuffer = [initTime];\n\n    // eta time value\n    this.eta = '0';\n  }\n\n  // add new values to calculation buffer\n  update(time, value, total) {\n    this.valueBuffer.push(value);\n    this.timeBuffer.push(time);\n\n    // trigger recalculation\n    this.calculate(total - value);\n  }\n\n  // fetch estimated time\n  getTime() {\n    return this.eta;\n  }\n\n  // eta calculation - request number of remaining events\n  calculate(remaining) {\n    // get number of samples in eta buffer\n    const currentBufferSize = this.valueBuffer.length;\n    const buffer = Math.min(this.etaBufferLength, currentBufferSize);\n    const v_diff = this.valueBuffer[currentBufferSize - 1] - this.valueBuffer[currentBufferSize - buffer];\n    const t_diff = this.timeBuffer[currentBufferSize - 1] - this.timeBuffer[currentBufferSize - buffer];\n\n    // get progress per ms\n    const vt_rate = v_diff / t_diff;\n\n    // strip past elements\n    this.valueBuffer = this.valueBuffer.slice(-this.etaBufferLength);\n    this.timeBuffer = this.timeBuffer.slice(-this.etaBufferLength);\n\n    // eq: vt_rate *x = total\n    const eta = Math.ceil(remaining / vt_rate / 1000);\n\n    // check values\n    if (isNaN(eta)) {\n      this.eta = 'NULL';\n\n      // +/- Infinity --- NaN already handled\n    } else if (!isFinite(eta)) {\n      this.eta = 'INF';\n\n      // > 10M s ? - set upper display limit ~115days (1e7/60/60/24)\n    } else if (eta > 1e7) {\n      this.eta = 'INF';\n\n      // negative ?\n    } else if (eta < 0) {\n      this.eta = 0;\n    } else {\n      // assign\n      this.eta = eta;\n    }\n  }\n}\nmodule.exports = ETA;","map":{"version":3,"names":["ETA","constructor","length","initTime","initValue","etaBufferLength","valueBuffer","timeBuffer","eta","update","time","value","total","push","calculate","getTime","remaining","currentBufferSize","buffer","Math","min","v_diff","t_diff","vt_rate","slice","ceil","isNaN","isFinite","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/cli-progress/lib/eta.js"],"sourcesContent":["\n// ETA calculation\nclass ETA{\n\n    constructor(length, initTime, initValue){\n        // size of eta buffer\n        this.etaBufferLength = length || 100;\n\n        // eta buffer with initial values\n        this.valueBuffer = [initValue];\n        this.timeBuffer = [initTime];\n\n        // eta time value\n        this.eta = '0';\n    }\n\n    // add new values to calculation buffer\n    update(time, value, total){\n        this.valueBuffer.push(value);\n        this.timeBuffer.push(time);\n\n        // trigger recalculation\n        this.calculate(total-value);\n    }\n\n    // fetch estimated time\n    getTime(){\n        return this.eta;\n    }\n\n    // eta calculation - request number of remaining events\n    calculate(remaining){\n        // get number of samples in eta buffer\n        const currentBufferSize = this.valueBuffer.length;\n        const buffer = Math.min(this.etaBufferLength, currentBufferSize);\n\n        const v_diff = this.valueBuffer[currentBufferSize - 1] - this.valueBuffer[currentBufferSize - buffer];\n        const t_diff = this.timeBuffer[currentBufferSize - 1] - this.timeBuffer[currentBufferSize - buffer];\n\n        // get progress per ms\n        const vt_rate = v_diff/t_diff;\n\n        // strip past elements\n        this.valueBuffer = this.valueBuffer.slice(-this.etaBufferLength);\n        this.timeBuffer  = this.timeBuffer.slice(-this.etaBufferLength);\n\n        // eq: vt_rate *x = total\n        const eta = Math.ceil(remaining/vt_rate/1000);\n\n        // check values\n        if (isNaN(eta)){\n            this.eta = 'NULL';\n\n        // +/- Infinity --- NaN already handled\n        }else if (!isFinite(eta)){\n            this.eta = 'INF';\n\n        // > 10M s ? - set upper display limit ~115days (1e7/60/60/24)\n        }else if (eta > 1e7){\n            this.eta = 'INF';\n\n        // negative ?\n        }else if (eta < 0){\n            this.eta = 0;\n\n        }else{\n            // assign\n            this.eta = eta;\n        }\n    }\n}\n\nmodule.exports = ETA;"],"mappings":"AACA;AACA,MAAMA,GAAG;EAELC,WAAW,CAACC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAC;IACpC;IACA,IAAI,CAACC,eAAe,GAAGH,MAAM,IAAI,GAAG;;IAEpC;IACA,IAAI,CAACI,WAAW,GAAG,CAACF,SAAS,CAAC;IAC9B,IAAI,CAACG,UAAU,GAAG,CAACJ,QAAQ,CAAC;;IAE5B;IACA,IAAI,CAACK,GAAG,GAAG,GAAG;EAClB;;EAEA;EACAC,MAAM,CAACC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAC;IACtB,IAAI,CAACN,WAAW,CAACO,IAAI,CAACF,KAAK,CAAC;IAC5B,IAAI,CAACJ,UAAU,CAACM,IAAI,CAACH,IAAI,CAAC;;IAE1B;IACA,IAAI,CAACI,SAAS,CAACF,KAAK,GAACD,KAAK,CAAC;EAC/B;;EAEA;EACAI,OAAO,GAAE;IACL,OAAO,IAAI,CAACP,GAAG;EACnB;;EAEA;EACAM,SAAS,CAACE,SAAS,EAAC;IAChB;IACA,MAAMC,iBAAiB,GAAG,IAAI,CAACX,WAAW,CAACJ,MAAM;IACjD,MAAMgB,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACf,eAAe,EAAEY,iBAAiB,CAAC;IAEhE,MAAMI,MAAM,GAAG,IAAI,CAACf,WAAW,CAACW,iBAAiB,GAAG,CAAC,CAAC,GAAG,IAAI,CAACX,WAAW,CAACW,iBAAiB,GAAGC,MAAM,CAAC;IACrG,MAAMI,MAAM,GAAG,IAAI,CAACf,UAAU,CAACU,iBAAiB,GAAG,CAAC,CAAC,GAAG,IAAI,CAACV,UAAU,CAACU,iBAAiB,GAAGC,MAAM,CAAC;;IAEnG;IACA,MAAMK,OAAO,GAAGF,MAAM,GAACC,MAAM;;IAE7B;IACA,IAAI,CAAChB,WAAW,GAAG,IAAI,CAACA,WAAW,CAACkB,KAAK,CAAC,CAAC,IAAI,CAACnB,eAAe,CAAC;IAChE,IAAI,CAACE,UAAU,GAAI,IAAI,CAACA,UAAU,CAACiB,KAAK,CAAC,CAAC,IAAI,CAACnB,eAAe,CAAC;;IAE/D;IACA,MAAMG,GAAG,GAAGW,IAAI,CAACM,IAAI,CAACT,SAAS,GAACO,OAAO,GAAC,IAAI,CAAC;;IAE7C;IACA,IAAIG,KAAK,CAAClB,GAAG,CAAC,EAAC;MACX,IAAI,CAACA,GAAG,GAAG,MAAM;;MAErB;IACA,CAAC,MAAK,IAAI,CAACmB,QAAQ,CAACnB,GAAG,CAAC,EAAC;MACrB,IAAI,CAACA,GAAG,GAAG,KAAK;;MAEpB;IACA,CAAC,MAAK,IAAIA,GAAG,GAAG,GAAG,EAAC;MAChB,IAAI,CAACA,GAAG,GAAG,KAAK;;MAEpB;IACA,CAAC,MAAK,IAAIA,GAAG,GAAG,CAAC,EAAC;MACd,IAAI,CAACA,GAAG,GAAG,CAAC;IAEhB,CAAC,MAAI;MACD;MACA,IAAI,CAACA,GAAG,GAAGA,GAAG;IAClB;EACJ;AACJ;AAEAoB,MAAM,CAACC,OAAO,GAAG7B,GAAG"},"metadata":{},"sourceType":"script"}