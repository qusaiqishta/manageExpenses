{"ast":null,"code":"var _ = require('lodash'),\n  sdk = require('postman-collection'),\n  createAuthInterface = require('./auth-interface'),\n  AUTH_TYPE_PROP = '__auth_type',\n  AuthLoader,\n  authorizeRequest;\n\n/**\n * This object manages loading and finding Handlers for auth.\n *\n * @type AuthLoader\n */\nAuthLoader = {\n  /**\n   * Houses list of available Authentication handlers.\n   *\n   * @property {Object}\n   */\n  handlers: {},\n  /**\n   * Finds the Handler for an Auth type.\n   *\n   * @param {String} name -\n   *\n   * @returns {AuthHandler}\n   */\n  getHandler: function (name) {\n    return AuthLoader.handlers[name];\n  },\n  /**\n   * Adds a Handler for use with given Auth type.\n   *\n   * @param {Object} Handler -\n   * @param {String} name -\n   */\n  addHandler: function (Handler, name) {\n    if (!_.isFunction(Handler.init)) {\n      throw new Error('The handler for \"' + name + '\" does not have an \"init\" function, which is necessary');\n    }\n    if (!_.isFunction(Handler.pre)) {\n      throw new Error('The handler for \"' + name + '\" does not have a \"pre\" function, which is necessary');\n    }\n    if (!_.isFunction(Handler.post)) {\n      throw new Error('The handler for \"' + name + '\" does not have a \"post\" function, which is necessary');\n    }\n    if (!_.isFunction(Handler.sign)) {\n      throw new Error('The handler for \"' + name + '\" does not have a \"sign\" function, which is necessary');\n    }\n    Object.defineProperty(Handler, AUTH_TYPE_PROP, {\n      value: name,\n      configurable: false,\n      enumerable: false,\n      writable: false\n    });\n    AuthLoader.handlers[name] = Handler;\n  },\n  /**\n   * Removes the Handler for the Auth type.\n   *\n   * @param {String} name -\n   */\n  removeHandler: function (name) {\n    AuthLoader.handlers[name] && delete AuthLoader.handlers[name];\n  }\n};\n\n// Create a Handler from each Signer that the SDK provides. Basically, we augment the signers with extra\n// helper functions which take over the job of preparing a request for signing.\n_.forEach({\n  noauth: require('./noauth'),\n  awsv4: require('./aws4'),\n  basic: require('./basic'),\n  bearer: require('./bearer'),\n  digest: require('./digest'),\n  hawk: require('./hawk'),\n  oauth1: require('./oauth1'),\n  oauth2: require('./oauth2'),\n  ntlm: require('./ntlm'),\n  apikey: require('./apikey'),\n  edgegrid: require('./edgegrid')\n}, AuthLoader.addHandler);\n\n/**\n * Creates a copy of request, with the appropriate auth headers or parameters added.\n *\n * @note This function does not take care of resolving variables.\n *\n * @param {Request} request -\n * @param {Function} done -\n *\n * @returns {Request}\n */\nauthorizeRequest = function (request, done) {\n  if (!request.auth) {\n    return done();\n  }\n  var clonedReq = new sdk.Request(request.toJSON()),\n    auth = clonedReq.auth,\n    authInterface = createAuthInterface(auth),\n    handler = AuthLoader.getHandler(auth.type);\n  if (handler) {\n    handler.sign(authInterface, clonedReq, function () {\n      return done(null, clonedReq);\n    });\n  } else {\n    return done(new Error('runtime~authorizeRequest: could not find handler for auth type ' + auth.type));\n  }\n};\nmodule.exports = {\n  AuthLoader,\n  authorizeRequest\n};\n\n// Interface\n/**\n * Interface for implementing auth handlers\n *\n * @interface AuthHandlerInterface\n */\n\n// Interface functions\n/**\n * Defines the behaviour of an Auth Handler. This way the handler allows to statically analyse\n * any changes the Handler will make ahead of time.\n *\n * @member {AuthHandlerInterface~AuthManifest} AuthHandlerInterface#manifest\n */\n\n/**\n * This hook decides whether all the required parameters are present in the auth or not.\n * What happens next is dependent upon how the `done` callback is called.\n * Check {@link AuthHandlerInterface~authPreHookCallback} for all the possible ways the callback can be called.\n *\n * @function\n * @name AuthHandlerInterface#pre\n *\n * @param {AuthInterface} auth\n * @param {AuthHandlerInterface~authPreHookCallback} done\n * Callback function which takes error, success, and request as arguments\n */\n\n/**\n * This hook is called with the response from the intermediate request, which was requested from the\n * [pre]{@link AuthHandlerInterface#pre} hook.\n * Here the `auth` can be modified using the response. After this [pre]{@link AuthHandlerInterface#pre} hook will be\n * called again to verify the required parameters.\n *\n * @function\n * @name AuthHandlerInterface#init\n *\n * @param {AuthInterface} auth\n * @param {Response} response\n * @param {AuthHandlerInterface~authInitHookCallback} done Callback function which takes error as the only argument\n */\n\n/**\n * This hook signs the `request` using the `auth`.\n *\n * @function\n * @name AuthHandlerInterface#sign\n *\n * @param {AuthInterface} auth\n * @param {Request} request\n * @param {AuthHandlerInterface~authSignHookCallback} done Callback function which takes error as the only argument\n */\n\n/**\n * This hook is called after the request is made. It receives the response using which it can determine whether\n * it was a failure or success. It can also modify the `auth` and ask to replay the `request`.\n * For this it has to call the [done]{@link AuthHandlerInterface~authPostHookCallback} callback with `success` as false.\n *\n * @function\n * @name AuthHandlerInterface#post\n *\n * @param {AuthInterface} auth\n * @param {Response} response\n * @param {AuthHandlerInterface~authPostHookCallback} done Callback function which takes error and success as arguments\n */\n\n// Callbacks\n/**\n * This callback is called in the `pre` hook of the auth handler\n * Depending on what parameters are passed in this callback, one of the following flows will be executed:\n * 1. return (err): The request will be stopped and the error will be bubbled up\n * 2. return (null, true): The request will be signed and sent\n * 3. return (null, false): The request will be sent without being signed\n * 4. return (null, false, `request`):\n *  - send the intermediate request\n *  - invoke the auth's [init]{@link AuthHandlerInterface#init} hook with the response of the intermediate request\n *  - invoke the auth's [pre]{@link AuthHandlerInterface#pre} hook\n *\n * @callback AuthHandlerInterface~authPreHookCallback\n * @param {?Error} err\n * @param {Boolean} success Defines whether the [pre]{@link AuthHandlerInterface#pre} hook was successful.\n * @param {Request~definition|String} [request] It can be either request definition or request URL\n */\n\n/**\n * This callback is called in the `init` hook of the auth handler\n *\n * @callback AuthHandlerInterface~authInitHookCallback\n * @param {?Error} err\n */\n\n/**\n * This callback is called in the `sign` hook of the auth handler\n *\n * @callback AuthHandlerInterface~authSignHookCallback\n * @param {?Error} err\n */\n\n/**\n * This callback is called in the `post` hook of the auth handler\n *\n * @callback AuthHandlerInterface~authPostHookCallback\n * @param {?Error} err\n * @param {Boolean} success Defines whether the request was successful or not. If not, it will be replayed.\n */\n\n/**\n * Structure of an Auth Manifest. See {@link AuthHandlerInterface#manifest} for description.\n *\n * @typedef {Object} AuthHandlerInterface~AuthManifest\n *\n * @property {Object} info\n * @property {String} info.name\n * @property {String} info.version\n * @property {Array<Object>} updates\n */","map":{"version":3,"names":["_","require","sdk","createAuthInterface","AUTH_TYPE_PROP","AuthLoader","authorizeRequest","handlers","getHandler","name","addHandler","Handler","isFunction","init","Error","pre","post","sign","Object","defineProperty","value","configurable","enumerable","writable","removeHandler","forEach","noauth","awsv4","basic","bearer","digest","hawk","oauth1","oauth2","ntlm","apikey","edgegrid","request","done","auth","clonedReq","Request","toJSON","authInterface","handler","type","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-runtime/lib/authorizer/index.js"],"sourcesContent":["var _ = require('lodash'),\n    sdk = require('postman-collection'),\n\n    createAuthInterface = require('./auth-interface'),\n\n    AUTH_TYPE_PROP = '__auth_type',\n\n    AuthLoader,\n    authorizeRequest;\n\n/**\n * This object manages loading and finding Handlers for auth.\n *\n * @type AuthLoader\n */\nAuthLoader = {\n    /**\n     * Houses list of available Authentication handlers.\n     *\n     * @property {Object}\n     */\n    handlers: {},\n\n    /**\n     * Finds the Handler for an Auth type.\n     *\n     * @param {String} name -\n     *\n     * @returns {AuthHandler}\n     */\n    getHandler: function (name) {\n        return AuthLoader.handlers[name];\n    },\n\n    /**\n     * Adds a Handler for use with given Auth type.\n     *\n     * @param {Object} Handler -\n     * @param {String} name -\n     */\n    addHandler: function (Handler, name) {\n        if (!_.isFunction(Handler.init)) {\n            throw new Error('The handler for \"' + name + '\" does not have an \"init\" function, which is necessary');\n        }\n\n        if (!_.isFunction(Handler.pre)) {\n            throw new Error('The handler for \"' + name + '\" does not have a \"pre\" function, which is necessary');\n        }\n\n        if (!_.isFunction(Handler.post)) {\n            throw new Error('The handler for \"' + name + '\" does not have a \"post\" function, which is necessary');\n        }\n\n        if (!_.isFunction(Handler.sign)) {\n            throw new Error('The handler for \"' + name + '\" does not have a \"sign\" function, which is necessary');\n        }\n\n        Object.defineProperty(Handler, AUTH_TYPE_PROP, {\n            value: name,\n            configurable: false,\n            enumerable: false,\n            writable: false\n        });\n\n        AuthLoader.handlers[name] = Handler;\n    },\n\n    /**\n     * Removes the Handler for the Auth type.\n     *\n     * @param {String} name -\n     */\n    removeHandler: function (name) {\n        AuthLoader.handlers[name] && (delete AuthLoader.handlers[name]);\n    }\n};\n\n// Create a Handler from each Signer that the SDK provides. Basically, we augment the signers with extra\n// helper functions which take over the job of preparing a request for signing.\n_.forEach({\n    noauth: require('./noauth'),\n    awsv4: require('./aws4'),\n    basic: require('./basic'),\n    bearer: require('./bearer'),\n    digest: require('./digest'),\n    hawk: require('./hawk'),\n    oauth1: require('./oauth1'),\n    oauth2: require('./oauth2'),\n    ntlm: require('./ntlm'),\n    apikey: require('./apikey'),\n    edgegrid: require('./edgegrid')\n}, AuthLoader.addHandler);\n\n/**\n * Creates a copy of request, with the appropriate auth headers or parameters added.\n *\n * @note This function does not take care of resolving variables.\n *\n * @param {Request} request -\n * @param {Function} done -\n *\n * @returns {Request}\n */\nauthorizeRequest = function (request, done) {\n    if (!request.auth) {\n        return done();\n    }\n\n    var clonedReq = new sdk.Request(request.toJSON()),\n        auth = clonedReq.auth,\n        authInterface = createAuthInterface(auth),\n        handler = AuthLoader.getHandler(auth.type);\n\n    if (handler) {\n        handler.sign(authInterface, clonedReq, function () { return done(null, clonedReq); });\n    }\n    else {\n        return done(new Error('runtime~authorizeRequest: could not find handler for auth type ' + auth.type));\n    }\n};\n\nmodule.exports = {\n    AuthLoader,\n    authorizeRequest\n};\n\n// Interface\n/**\n * Interface for implementing auth handlers\n *\n * @interface AuthHandlerInterface\n */\n\n// Interface functions\n/**\n * Defines the behaviour of an Auth Handler. This way the handler allows to statically analyse\n * any changes the Handler will make ahead of time.\n *\n * @member {AuthHandlerInterface~AuthManifest} AuthHandlerInterface#manifest\n */\n\n/**\n * This hook decides whether all the required parameters are present in the auth or not.\n * What happens next is dependent upon how the `done` callback is called.\n * Check {@link AuthHandlerInterface~authPreHookCallback} for all the possible ways the callback can be called.\n *\n * @function\n * @name AuthHandlerInterface#pre\n *\n * @param {AuthInterface} auth\n * @param {AuthHandlerInterface~authPreHookCallback} done\n * Callback function which takes error, success, and request as arguments\n */\n\n/**\n * This hook is called with the response from the intermediate request, which was requested from the\n * [pre]{@link AuthHandlerInterface#pre} hook.\n * Here the `auth` can be modified using the response. After this [pre]{@link AuthHandlerInterface#pre} hook will be\n * called again to verify the required parameters.\n *\n * @function\n * @name AuthHandlerInterface#init\n *\n * @param {AuthInterface} auth\n * @param {Response} response\n * @param {AuthHandlerInterface~authInitHookCallback} done Callback function which takes error as the only argument\n */\n\n/**\n * This hook signs the `request` using the `auth`.\n *\n * @function\n * @name AuthHandlerInterface#sign\n *\n * @param {AuthInterface} auth\n * @param {Request} request\n * @param {AuthHandlerInterface~authSignHookCallback} done Callback function which takes error as the only argument\n */\n\n/**\n * This hook is called after the request is made. It receives the response using which it can determine whether\n * it was a failure or success. It can also modify the `auth` and ask to replay the `request`.\n * For this it has to call the [done]{@link AuthHandlerInterface~authPostHookCallback} callback with `success` as false.\n *\n * @function\n * @name AuthHandlerInterface#post\n *\n * @param {AuthInterface} auth\n * @param {Response} response\n * @param {AuthHandlerInterface~authPostHookCallback} done Callback function which takes error and success as arguments\n */\n\n\n// Callbacks\n/**\n * This callback is called in the `pre` hook of the auth handler\n * Depending on what parameters are passed in this callback, one of the following flows will be executed:\n * 1. return (err): The request will be stopped and the error will be bubbled up\n * 2. return (null, true): The request will be signed and sent\n * 3. return (null, false): The request will be sent without being signed\n * 4. return (null, false, `request`):\n *  - send the intermediate request\n *  - invoke the auth's [init]{@link AuthHandlerInterface#init} hook with the response of the intermediate request\n *  - invoke the auth's [pre]{@link AuthHandlerInterface#pre} hook\n *\n * @callback AuthHandlerInterface~authPreHookCallback\n * @param {?Error} err\n * @param {Boolean} success Defines whether the [pre]{@link AuthHandlerInterface#pre} hook was successful.\n * @param {Request~definition|String} [request] It can be either request definition or request URL\n */\n\n/**\n * This callback is called in the `init` hook of the auth handler\n *\n * @callback AuthHandlerInterface~authInitHookCallback\n * @param {?Error} err\n */\n\n/**\n * This callback is called in the `sign` hook of the auth handler\n *\n * @callback AuthHandlerInterface~authSignHookCallback\n * @param {?Error} err\n */\n\n/**\n * This callback is called in the `post` hook of the auth handler\n *\n * @callback AuthHandlerInterface~authPostHookCallback\n * @param {?Error} err\n * @param {Boolean} success Defines whether the request was successful or not. If not, it will be replayed.\n */\n\n/**\n * Structure of an Auth Manifest. See {@link AuthHandlerInterface#manifest} for description.\n *\n * @typedef {Object} AuthHandlerInterface~AuthManifest\n *\n * @property {Object} info\n * @property {String} info.name\n * @property {String} info.version\n * @property {Array<Object>} updates\n */\n"],"mappings":"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AAOF,IAAI,CAAC,IAAIxB,KAAK,CAAC,iEAAiE,GAAGyB,IAAI,CAACM,IAAI,CAAC,CAAC;EACzG;AACJ,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EACb1C,UAAU;EACVC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}