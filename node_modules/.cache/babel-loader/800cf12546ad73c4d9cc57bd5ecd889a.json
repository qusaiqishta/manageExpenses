{"ast":null,"code":"/**\n * Copyright (c) 2013 Sam Decrock https://github.com/SamDecrock/\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar crypto = require('crypto');\nvar flags = {\n  NTLM_NegotiateUnicode: 0x00000001,\n  NTLM_NegotiateOEM: 0x00000002,\n  NTLM_RequestTarget: 0x00000004,\n  NTLM_Unknown9: 0x00000008,\n  NTLM_NegotiateSign: 0x00000010,\n  NTLM_NegotiateSeal: 0x00000020,\n  NTLM_NegotiateDatagram: 0x00000040,\n  NTLM_NegotiateLanManagerKey: 0x00000080,\n  NTLM_Unknown8: 0x00000100,\n  NTLM_NegotiateNTLM: 0x00000200,\n  NTLM_NegotiateNTOnly: 0x00000400,\n  NTLM_Anonymous: 0x00000800,\n  NTLM_NegotiateOemDomainSupplied: 0x00001000,\n  NTLM_NegotiateOemWorkstationSupplied: 0x00002000,\n  NTLM_Unknown6: 0x00004000,\n  NTLM_NegotiateAlwaysSign: 0x00008000,\n  NTLM_TargetTypeDomain: 0x00010000,\n  NTLM_TargetTypeServer: 0x00020000,\n  NTLM_TargetTypeShare: 0x00040000,\n  NTLM_NegotiateExtendedSecurity: 0x00080000,\n  NTLM_NegotiateIdentify: 0x00100000,\n  NTLM_Unknown5: 0x00200000,\n  NTLM_RequestNonNTSessionKey: 0x00400000,\n  NTLM_NegotiateTargetInfo: 0x00800000,\n  NTLM_Unknown4: 0x01000000,\n  NTLM_NegotiateVersion: 0x02000000,\n  NTLM_Unknown3: 0x04000000,\n  NTLM_Unknown2: 0x08000000,\n  NTLM_Unknown1: 0x10000000,\n  NTLM_Negotiate128: 0x20000000,\n  NTLM_NegotiateKeyExchange: 0x40000000,\n  NTLM_Negotiate56: 0x80000000\n};\nvar typeflags = {\n  NTLM_TYPE1_FLAGS: flags.NTLM_NegotiateUnicode + flags.NTLM_NegotiateOEM + flags.NTLM_RequestTarget + flags.NTLM_NegotiateNTLM + flags.NTLM_NegotiateOemDomainSupplied + flags.NTLM_NegotiateOemWorkstationSupplied + flags.NTLM_NegotiateAlwaysSign + flags.NTLM_NegotiateExtendedSecurity + flags.NTLM_NegotiateVersion + flags.NTLM_Negotiate128 + flags.NTLM_Negotiate56,\n  NTLM_TYPE2_FLAGS: flags.NTLM_NegotiateUnicode + flags.NTLM_RequestTarget + flags.NTLM_NegotiateNTLM + flags.NTLM_NegotiateAlwaysSign + flags.NTLM_NegotiateExtendedSecurity + flags.NTLM_NegotiateTargetInfo + flags.NTLM_NegotiateVersion + flags.NTLM_Negotiate128 + flags.NTLM_Negotiate56\n};\nfunction createType1Message(options) {\n  var domain = escape(options.domain.toUpperCase());\n  var workstation = escape(options.workstation.toUpperCase());\n  var protocol = 'NTLMSSP\\0';\n  var BODY_LENGTH = 40;\n  var type1flags = typeflags.NTLM_TYPE1_FLAGS;\n  if (!domain || domain === '') type1flags = type1flags - flags.NTLM_NegotiateOemDomainSupplied;\n  var pos = 0;\n  var buf = new Buffer(BODY_LENGTH + domain.length + workstation.length);\n  buf.write(protocol, pos, protocol.length);\n  pos += protocol.length; // protocol\n  buf.writeUInt32LE(1, pos);\n  pos += 4; // type 1\n  buf.writeUInt32LE(type1flags, pos);\n  pos += 4; // TYPE1 flag\n\n  buf.writeUInt16LE(domain.length, pos);\n  pos += 2; // domain length\n  buf.writeUInt16LE(domain.length, pos);\n  pos += 2; // domain max length\n  buf.writeUInt32LE(BODY_LENGTH + workstation.length, pos);\n  pos += 4; // domain buffer offset\n\n  buf.writeUInt16LE(workstation.length, pos);\n  pos += 2; // workstation length\n  buf.writeUInt16LE(workstation.length, pos);\n  pos += 2; // workstation max length\n  buf.writeUInt32LE(BODY_LENGTH, pos);\n  pos += 4; // workstation buffer offset\n\n  buf.writeUInt8(5, pos);\n  pos += 1; //ProductMajorVersion\n  buf.writeUInt8(1, pos);\n  pos += 1; //ProductMinorVersion\n  buf.writeUInt16LE(2600, pos);\n  pos += 2; //ProductBuild\n\n  buf.writeUInt8(0, pos);\n  pos += 1; //VersionReserved1\n  buf.writeUInt8(0, pos);\n  pos += 1; //VersionReserved2\n  buf.writeUInt8(0, pos);\n  pos += 1; //VersionReserved3\n  buf.writeUInt8(15, pos);\n  pos += 1; //NTLMRevisionCurrent\n\n  // length checks is to fix issue #46 and possibly #57\n  if (workstation.length != 0) buf.write(workstation, pos, workstation.length, 'ascii');\n  pos += workstation.length; // workstation string\n  if (domain.length != 0) buf.write(domain, pos, domain.length, 'ascii');\n  pos += domain.length; // domain string\n\n  return 'NTLM ' + buf.toString('base64');\n}\nfunction parseType2Message(rawmsg, callback) {\n  var match = rawmsg.match(/NTLM (.+)?/);\n  if (!match || !match[1]) {\n    callback(new Error(\"Couldn't find NTLM in the message type2 comming from the server\"));\n    return null;\n  }\n  var buf = new Buffer(match[1], 'base64');\n  var msg = {};\n  msg.signature = buf.slice(0, 8);\n  msg.type = buf.readInt16LE(8);\n  if (msg.type != 2) {\n    callback(new Error(\"Server didn't return a type 2 message\"));\n    return null;\n  }\n  msg.targetNameLen = buf.readInt16LE(12);\n  msg.targetNameMaxLen = buf.readInt16LE(14);\n  msg.targetNameOffset = buf.readInt32LE(16);\n  msg.targetName = buf.slice(msg.targetNameOffset, msg.targetNameOffset + msg.targetNameMaxLen);\n  msg.negotiateFlags = buf.readInt32LE(20);\n  msg.serverChallenge = buf.slice(24, 32);\n  msg.reserved = buf.slice(32, 40);\n  if (msg.negotiateFlags & flags.NTLM_NegotiateTargetInfo) {\n    msg.targetInfoLen = buf.readInt16LE(40);\n    msg.targetInfoMaxLen = buf.readInt16LE(42);\n    msg.targetInfoOffset = buf.readInt32LE(44);\n    msg.targetInfo = buf.slice(msg.targetInfoOffset, msg.targetInfoOffset + msg.targetInfoLen);\n  }\n  return msg;\n}\nfunction createType3Message(msg2, options) {\n  var nonce = msg2.serverChallenge;\n  var username = options.username;\n  var password = options.password;\n  var lm_password = options.lm_password;\n  var nt_password = options.nt_password;\n  var negotiateFlags = msg2.negotiateFlags;\n  var isUnicode = negotiateFlags & flags.NTLM_NegotiateUnicode;\n  var isNegotiateExtendedSecurity = negotiateFlags & flags.NTLM_NegotiateExtendedSecurity;\n  var BODY_LENGTH = 72;\n  var domainName = escape(options.domain.toUpperCase());\n  var workstation = escape(options.workstation.toUpperCase());\n  var workstationBytes, domainNameBytes, usernameBytes, encryptedRandomSessionKeyBytes;\n  var encryptedRandomSessionKey = \"\";\n  if (isUnicode) {\n    workstationBytes = new Buffer(workstation, 'utf16le');\n    domainNameBytes = new Buffer(domainName, 'utf16le');\n    usernameBytes = new Buffer(username, 'utf16le');\n    encryptedRandomSessionKeyBytes = new Buffer(encryptedRandomSessionKey, 'utf16le');\n  } else {\n    workstationBytes = new Buffer(workstation, 'ascii');\n    domainNameBytes = new Buffer(domainName, 'ascii');\n    usernameBytes = new Buffer(username, 'ascii');\n    encryptedRandomSessionKeyBytes = new Buffer(encryptedRandomSessionKey, 'ascii');\n  }\n  var lmChallengeResponse = calc_resp(lm_password != null ? lm_password : create_LM_hashed_password_v1(password), nonce);\n  var ntChallengeResponse = calc_resp(nt_password != null ? nt_password : create_NT_hashed_password_v1(password), nonce);\n  if (isNegotiateExtendedSecurity) {\n    var pwhash = nt_password != null ? nt_password : create_NT_hashed_password_v1(password);\n    var clientChallenge = \"\";\n    for (var i = 0; i < 8; i++) {\n      clientChallenge += String.fromCharCode(Math.floor(Math.random() * 256));\n    }\n    var clientChallengeBytes = new Buffer(clientChallenge, 'ascii');\n    var challenges = ntlm2sr_calc_resp(pwhash, nonce, clientChallengeBytes);\n    lmChallengeResponse = challenges.lmChallengeResponse;\n    ntChallengeResponse = challenges.ntChallengeResponse;\n  }\n  var signature = 'NTLMSSP\\0';\n  var pos = 0;\n  var buf = new Buffer(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length + ntChallengeResponse.length + encryptedRandomSessionKeyBytes.length);\n  buf.write(signature, pos, signature.length);\n  pos += signature.length;\n  buf.writeUInt32LE(3, pos);\n  pos += 4; // type 1\n\n  buf.writeUInt16LE(lmChallengeResponse.length, pos);\n  pos += 2; // LmChallengeResponseLen\n  buf.writeUInt16LE(lmChallengeResponse.length, pos);\n  pos += 2; // LmChallengeResponseMaxLen\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length, pos);\n  pos += 4; // LmChallengeResponseOffset\n\n  buf.writeUInt16LE(ntChallengeResponse.length, pos);\n  pos += 2; // NtChallengeResponseLen\n  buf.writeUInt16LE(ntChallengeResponse.length, pos);\n  pos += 2; // NtChallengeResponseMaxLen\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length, pos);\n  pos += 4; // NtChallengeResponseOffset\n\n  buf.writeUInt16LE(domainNameBytes.length, pos);\n  pos += 2; // DomainNameLen\n  buf.writeUInt16LE(domainNameBytes.length, pos);\n  pos += 2; // DomainNameMaxLen\n  buf.writeUInt32LE(BODY_LENGTH, pos);\n  pos += 4; // DomainNameOffset\n\n  buf.writeUInt16LE(usernameBytes.length, pos);\n  pos += 2; // UserNameLen\n  buf.writeUInt16LE(usernameBytes.length, pos);\n  pos += 2; // UserNameMaxLen\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length, pos);\n  pos += 4; // UserNameOffset\n\n  buf.writeUInt16LE(workstationBytes.length, pos);\n  pos += 2; // WorkstationLen\n  buf.writeUInt16LE(workstationBytes.length, pos);\n  pos += 2; // WorkstationMaxLen\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length, pos);\n  pos += 4; // WorkstationOffset\n\n  buf.writeUInt16LE(encryptedRandomSessionKeyBytes.length, pos);\n  pos += 2; // EncryptedRandomSessionKeyLen\n  buf.writeUInt16LE(encryptedRandomSessionKeyBytes.length, pos);\n  pos += 2; // EncryptedRandomSessionKeyMaxLen\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length + ntChallengeResponse.length, pos);\n  pos += 4; // EncryptedRandomSessionKeyOffset\n\n  buf.writeUInt32LE(typeflags.NTLM_TYPE2_FLAGS, pos);\n  pos += 4; // NegotiateFlags\n\n  buf.writeUInt8(5, pos);\n  pos++; // ProductMajorVersion\n  buf.writeUInt8(1, pos);\n  pos++; // ProductMinorVersion\n  buf.writeUInt16LE(2600, pos);\n  pos += 2; // ProductBuild\n  buf.writeUInt8(0, pos);\n  pos++; // VersionReserved1\n  buf.writeUInt8(0, pos);\n  pos++; // VersionReserved2\n  buf.writeUInt8(0, pos);\n  pos++; // VersionReserved3\n  buf.writeUInt8(15, pos);\n  pos++; // NTLMRevisionCurrent\n\n  domainNameBytes.copy(buf, pos);\n  pos += domainNameBytes.length;\n  usernameBytes.copy(buf, pos);\n  pos += usernameBytes.length;\n  workstationBytes.copy(buf, pos);\n  pos += workstationBytes.length;\n  lmChallengeResponse.copy(buf, pos);\n  pos += lmChallengeResponse.length;\n  ntChallengeResponse.copy(buf, pos);\n  pos += ntChallengeResponse.length;\n  encryptedRandomSessionKeyBytes.copy(buf, pos);\n  pos += encryptedRandomSessionKeyBytes.length;\n  return 'NTLM ' + buf.toString('base64');\n}\nfunction create_LM_hashed_password_v1(password) {\n  // fix the password length to 14 bytes\n  password = password.toUpperCase();\n  var passwordBytes = new Buffer(password, 'ascii');\n  var passwordBytesPadded = new Buffer(14);\n  passwordBytesPadded.fill(\"\\0\");\n  var sourceEnd = 14;\n  if (passwordBytes.length < 14) sourceEnd = passwordBytes.length;\n  passwordBytes.copy(passwordBytesPadded, 0, 0, sourceEnd);\n\n  // split into 2 parts of 7 bytes:\n  var firstPart = passwordBytesPadded.slice(0, 7);\n  var secondPart = passwordBytesPadded.slice(7);\n  function encrypt(buf) {\n    var key = insertZerosEvery7Bits(buf);\n    var des = crypto.createCipheriv('DES-ECB', key, '');\n    return des.update(\"KGS!@#$%\"); // page 57 in [MS-NLMP]);\n  }\n\n  var firstPartEncrypted = encrypt(firstPart);\n  var secondPartEncrypted = encrypt(secondPart);\n  return Buffer.concat([firstPartEncrypted, secondPartEncrypted]);\n}\nfunction insertZerosEvery7Bits(buf) {\n  var binaryArray = bytes2binaryArray(buf);\n  var newBinaryArray = [];\n  for (var i = 0; i < binaryArray.length; i++) {\n    newBinaryArray.push(binaryArray[i]);\n    if ((i + 1) % 7 === 0) {\n      newBinaryArray.push(0);\n    }\n  }\n  return binaryArray2bytes(newBinaryArray);\n}\nfunction bytes2binaryArray(buf) {\n  var hex2binary = {\n    0: [0, 0, 0, 0],\n    1: [0, 0, 0, 1],\n    2: [0, 0, 1, 0],\n    3: [0, 0, 1, 1],\n    4: [0, 1, 0, 0],\n    5: [0, 1, 0, 1],\n    6: [0, 1, 1, 0],\n    7: [0, 1, 1, 1],\n    8: [1, 0, 0, 0],\n    9: [1, 0, 0, 1],\n    A: [1, 0, 1, 0],\n    B: [1, 0, 1, 1],\n    C: [1, 1, 0, 0],\n    D: [1, 1, 0, 1],\n    E: [1, 1, 1, 0],\n    F: [1, 1, 1, 1]\n  };\n  var hexString = buf.toString('hex').toUpperCase();\n  var array = [];\n  for (var i = 0; i < hexString.length; i++) {\n    var hexchar = hexString.charAt(i);\n    array = array.concat(hex2binary[hexchar]);\n  }\n  return array;\n}\nfunction binaryArray2bytes(array) {\n  var binary2hex = {\n    '0000': 0,\n    '0001': 1,\n    '0010': 2,\n    '0011': 3,\n    '0100': 4,\n    '0101': 5,\n    '0110': 6,\n    '0111': 7,\n    '1000': 8,\n    '1001': 9,\n    '1010': 'A',\n    '1011': 'B',\n    '1100': 'C',\n    '1101': 'D',\n    '1110': 'E',\n    '1111': 'F'\n  };\n  var bufArray = [];\n  for (var i = 0; i < array.length; i += 8) {\n    if (i + 7 > array.length) break;\n    var binString1 = '' + array[i] + '' + array[i + 1] + '' + array[i + 2] + '' + array[i + 3];\n    var binString2 = '' + array[i + 4] + '' + array[i + 5] + '' + array[i + 6] + '' + array[i + 7];\n    var hexchar1 = binary2hex[binString1];\n    var hexchar2 = binary2hex[binString2];\n    var buf = new Buffer(hexchar1 + '' + hexchar2, 'hex');\n    bufArray.push(buf);\n  }\n  return Buffer.concat(bufArray);\n}\nfunction create_NT_hashed_password_v1(password) {\n  var buf = new Buffer(password, 'utf16le');\n  var md4 = crypto.createHash('md4');\n  md4.update(buf);\n  return new Buffer(md4.digest());\n}\nfunction calc_resp(password_hash, server_challenge) {\n  // padding with zeros to make the hash 21 bytes long\n  var passHashPadded = new Buffer(21);\n  passHashPadded.fill(\"\\0\");\n  password_hash.copy(passHashPadded, 0, 0, password_hash.length);\n  var resArray = [];\n  var des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(0, 7)), '');\n  resArray.push(des.update(server_challenge.slice(0, 8)));\n  des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(7, 14)), '');\n  resArray.push(des.update(server_challenge.slice(0, 8)));\n  des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(14, 21)), '');\n  resArray.push(des.update(server_challenge.slice(0, 8)));\n  return Buffer.concat(resArray);\n}\nfunction ntlm2sr_calc_resp(responseKeyNT, serverChallenge, clientChallenge) {\n  // padding with zeros to make the hash 16 bytes longer\n  var lmChallengeResponse = new Buffer(clientChallenge.length + 16);\n  lmChallengeResponse.fill(\"\\0\");\n  clientChallenge.copy(lmChallengeResponse, 0, 0, clientChallenge.length);\n  var buf = Buffer.concat([serverChallenge, clientChallenge]);\n  var md5 = crypto.createHash('md5');\n  md5.update(buf);\n  var sess = md5.digest();\n  var ntChallengeResponse = calc_resp(responseKeyNT, sess.slice(0, 8));\n  return {\n    lmChallengeResponse: lmChallengeResponse,\n    ntChallengeResponse: ntChallengeResponse\n  };\n}\nexports.createType1Message = createType1Message;\nexports.parseType2Message = parseType2Message;\nexports.createType3Message = createType3Message;\nexports.create_NT_hashed_password = create_NT_hashed_password_v1;\nexports.create_LM_hashed_password = create_LM_hashed_password_v1;","map":{"version":3,"names":["crypto","require","flags","NTLM_NegotiateUnicode","NTLM_NegotiateOEM","NTLM_RequestTarget","NTLM_Unknown9","NTLM_NegotiateSign","NTLM_NegotiateSeal","NTLM_NegotiateDatagram","NTLM_NegotiateLanManagerKey","NTLM_Unknown8","NTLM_NegotiateNTLM","NTLM_NegotiateNTOnly","NTLM_Anonymous","NTLM_NegotiateOemDomainSupplied","NTLM_NegotiateOemWorkstationSupplied","NTLM_Unknown6","NTLM_NegotiateAlwaysSign","NTLM_TargetTypeDomain","NTLM_TargetTypeServer","NTLM_TargetTypeShare","NTLM_NegotiateExtendedSecurity","NTLM_NegotiateIdentify","NTLM_Unknown5","NTLM_RequestNonNTSessionKey","NTLM_NegotiateTargetInfo","NTLM_Unknown4","NTLM_NegotiateVersion","NTLM_Unknown3","NTLM_Unknown2","NTLM_Unknown1","NTLM_Negotiate128","NTLM_NegotiateKeyExchange","NTLM_Negotiate56","typeflags","NTLM_TYPE1_FLAGS","NTLM_TYPE2_FLAGS","createType1Message","options","domain","escape","toUpperCase","workstation","protocol","BODY_LENGTH","type1flags","pos","buf","Buffer","length","write","writeUInt32LE","writeUInt16LE","writeUInt8","toString","parseType2Message","rawmsg","callback","match","Error","msg","signature","slice","type","readInt16LE","targetNameLen","targetNameMaxLen","targetNameOffset","readInt32LE","targetName","negotiateFlags","serverChallenge","reserved","targetInfoLen","targetInfoMaxLen","targetInfoOffset","targetInfo","createType3Message","msg2","nonce","username","password","lm_password","nt_password","isUnicode","isNegotiateExtendedSecurity","domainName","workstationBytes","domainNameBytes","usernameBytes","encryptedRandomSessionKeyBytes","encryptedRandomSessionKey","lmChallengeResponse","calc_resp","create_LM_hashed_password_v1","ntChallengeResponse","create_NT_hashed_password_v1","pwhash","clientChallenge","i","String","fromCharCode","Math","floor","random","clientChallengeBytes","challenges","ntlm2sr_calc_resp","copy","passwordBytes","passwordBytesPadded","fill","sourceEnd","firstPart","secondPart","encrypt","key","insertZerosEvery7Bits","des","createCipheriv","update","firstPartEncrypted","secondPartEncrypted","concat","binaryArray","bytes2binaryArray","newBinaryArray","push","binaryArray2bytes","hex2binary","A","B","C","D","E","F","hexString","array","hexchar","charAt","binary2hex","bufArray","binString1","binString2","hexchar1","hexchar2","md4","createHash","digest","password_hash","server_challenge","passHashPadded","resArray","responseKeyNT","md5","sess","exports","create_NT_hashed_password","create_LM_hashed_password"],"sources":["/Users/Qusai.Qishta/node_modules/httpntlm/ntlm.js"],"sourcesContent":["/**\n * Copyright (c) 2013 Sam Decrock https://github.com/SamDecrock/\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar crypto = require('crypto');\n\nvar flags = {\n\tNTLM_NegotiateUnicode                :  0x00000001,\n\tNTLM_NegotiateOEM                    :  0x00000002,\n\tNTLM_RequestTarget                   :  0x00000004,\n\tNTLM_Unknown9                        :  0x00000008,\n\tNTLM_NegotiateSign                   :  0x00000010,\n\tNTLM_NegotiateSeal                   :  0x00000020,\n\tNTLM_NegotiateDatagram               :  0x00000040,\n\tNTLM_NegotiateLanManagerKey          :  0x00000080,\n\tNTLM_Unknown8                        :  0x00000100,\n\tNTLM_NegotiateNTLM                   :  0x00000200,\n\tNTLM_NegotiateNTOnly                 :  0x00000400,\n\tNTLM_Anonymous                       :  0x00000800,\n\tNTLM_NegotiateOemDomainSupplied      :  0x00001000,\n\tNTLM_NegotiateOemWorkstationSupplied :  0x00002000,\n\tNTLM_Unknown6                        :  0x00004000,\n\tNTLM_NegotiateAlwaysSign             :  0x00008000,\n\tNTLM_TargetTypeDomain                :  0x00010000,\n\tNTLM_TargetTypeServer                :  0x00020000,\n\tNTLM_TargetTypeShare                 :  0x00040000,\n\tNTLM_NegotiateExtendedSecurity       :  0x00080000,\n\tNTLM_NegotiateIdentify               :  0x00100000,\n\tNTLM_Unknown5                        :  0x00200000,\n\tNTLM_RequestNonNTSessionKey          :  0x00400000,\n\tNTLM_NegotiateTargetInfo             :  0x00800000,\n\tNTLM_Unknown4                        :  0x01000000,\n\tNTLM_NegotiateVersion                :  0x02000000,\n\tNTLM_Unknown3                        :  0x04000000,\n\tNTLM_Unknown2                        :  0x08000000,\n\tNTLM_Unknown1                        :  0x10000000,\n\tNTLM_Negotiate128                    :  0x20000000,\n\tNTLM_NegotiateKeyExchange            :  0x40000000,\n\tNTLM_Negotiate56                     :  0x80000000\n};\nvar typeflags = {\n\tNTLM_TYPE1_FLAGS : \t  flags.NTLM_NegotiateUnicode\n\t\t\t\t\t\t+ flags.NTLM_NegotiateOEM\n\t\t\t\t\t\t+ flags.NTLM_RequestTarget\n\t\t\t\t\t\t+ flags.NTLM_NegotiateNTLM\n\t\t\t\t\t\t+ flags.NTLM_NegotiateOemDomainSupplied\n\t\t\t\t\t\t+ flags.NTLM_NegotiateOemWorkstationSupplied\n\t\t\t\t\t\t+ flags.NTLM_NegotiateAlwaysSign\n\t\t\t\t\t\t+ flags.NTLM_NegotiateExtendedSecurity\n\t\t\t\t\t\t+ flags.NTLM_NegotiateVersion\n\t\t\t\t\t\t+ flags.NTLM_Negotiate128\n\t\t\t\t\t\t+ flags.NTLM_Negotiate56,\n\n\tNTLM_TYPE2_FLAGS :    flags.NTLM_NegotiateUnicode\n\t\t\t\t\t\t+ flags.NTLM_RequestTarget\n\t\t\t\t\t\t+ flags.NTLM_NegotiateNTLM\n\t\t\t\t\t\t+ flags.NTLM_NegotiateAlwaysSign\n\t\t\t\t\t\t+ flags.NTLM_NegotiateExtendedSecurity\n\t\t\t\t\t\t+ flags.NTLM_NegotiateTargetInfo\n\t\t\t\t\t\t+ flags.NTLM_NegotiateVersion\n\t\t\t\t\t\t+ flags.NTLM_Negotiate128\n\t\t\t\t\t\t+ flags.NTLM_Negotiate56\n};\n\nfunction createType1Message(options){\n\tvar domain = escape(options.domain.toUpperCase());\n\tvar workstation = escape(options.workstation.toUpperCase());\n\tvar protocol = 'NTLMSSP\\0';\n\n\tvar BODY_LENGTH = 40;\n\n\tvar type1flags = typeflags.NTLM_TYPE1_FLAGS;\n\tif(!domain || domain === '')\n\t\ttype1flags = type1flags - flags.NTLM_NegotiateOemDomainSupplied;\n\n\tvar pos = 0;\n\tvar buf = new Buffer(BODY_LENGTH + domain.length + workstation.length);\n\n\n\tbuf.write(protocol, pos, protocol.length); pos += protocol.length; // protocol\n\tbuf.writeUInt32LE(1, pos); pos += 4;          // type 1\n\tbuf.writeUInt32LE(type1flags, pos); pos += 4; // TYPE1 flag\n\n\tbuf.writeUInt16LE(domain.length, pos); pos += 2; // domain length\n\tbuf.writeUInt16LE(domain.length, pos); pos += 2; // domain max length\n\tbuf.writeUInt32LE(BODY_LENGTH + workstation.length, pos); pos += 4; // domain buffer offset\n\n\tbuf.writeUInt16LE(workstation.length, pos); pos += 2; // workstation length\n\tbuf.writeUInt16LE(workstation.length, pos); pos += 2; // workstation max length\n\tbuf.writeUInt32LE(BODY_LENGTH, pos); pos += 4; // workstation buffer offset\n\n\tbuf.writeUInt8(5, pos); pos += 1;      //ProductMajorVersion\n\tbuf.writeUInt8(1, pos); pos += 1;      //ProductMinorVersion\n\tbuf.writeUInt16LE(2600, pos); pos += 2; //ProductBuild\n\n\tbuf.writeUInt8(0 , pos); pos += 1; //VersionReserved1\n\tbuf.writeUInt8(0 , pos); pos += 1; //VersionReserved2\n\tbuf.writeUInt8(0 , pos); pos += 1; //VersionReserved3\n\tbuf.writeUInt8(15, pos); pos += 1; //NTLMRevisionCurrent\n\n\n\t// length checks is to fix issue #46 and possibly #57\n\tif(workstation.length !=0) buf.write(workstation, pos, workstation.length, 'ascii'); pos += workstation.length; // workstation string\n\tif(domain.length !=0)      buf.write(domain     , pos, domain.length     , 'ascii'); pos += domain.length; // domain string\n\n\treturn 'NTLM ' + buf.toString('base64');\n}\n\nfunction parseType2Message(rawmsg, callback){\n\tvar match = rawmsg.match(/NTLM (.+)?/);\n\tif(!match || !match[1]) {\n\t\tcallback(new Error(\"Couldn't find NTLM in the message type2 comming from the server\"));\n\t\treturn null;\n\t}\n\n\tvar buf = new Buffer(match[1], 'base64');\n\n\tvar msg = {};\n\n\tmsg.signature = buf.slice(0, 8);\n\tmsg.type = buf.readInt16LE(8);\n\n\tif(msg.type != 2) {\n\t\tcallback(new Error(\"Server didn't return a type 2 message\"));\n\t\treturn null;\n\t}\n\n\tmsg.targetNameLen = buf.readInt16LE(12);\n\tmsg.targetNameMaxLen = buf.readInt16LE(14);\n\tmsg.targetNameOffset = buf.readInt32LE(16);\n\tmsg.targetName  = buf.slice(msg.targetNameOffset, msg.targetNameOffset + msg.targetNameMaxLen);\n\n    msg.negotiateFlags = buf.readInt32LE(20);\n    msg.serverChallenge = buf.slice(24, 32);\n    msg.reserved = buf.slice(32, 40);\n\n    if(msg.negotiateFlags & flags.NTLM_NegotiateTargetInfo){\n    \tmsg.targetInfoLen = buf.readInt16LE(40);\n    \tmsg.targetInfoMaxLen = buf.readInt16LE(42);\n    \tmsg.targetInfoOffset = buf.readInt32LE(44);\n    \tmsg.targetInfo = buf.slice(msg.targetInfoOffset, msg.targetInfoOffset + msg.targetInfoLen);\n    }\n\treturn msg;\n}\n\nfunction createType3Message(msg2, options){\n\tvar nonce = msg2.serverChallenge;\n\tvar username = options.username;\n\tvar password = options.password;\n\tvar lm_password = options.lm_password;\n\tvar nt_password = options.nt_password;\n\tvar negotiateFlags = msg2.negotiateFlags;\n\n\tvar isUnicode = negotiateFlags & flags.NTLM_NegotiateUnicode;\n\tvar isNegotiateExtendedSecurity = negotiateFlags & flags.NTLM_NegotiateExtendedSecurity;\n\n\tvar BODY_LENGTH = 72;\n\n\tvar domainName = escape(options.domain.toUpperCase());\n\tvar workstation = escape(options.workstation.toUpperCase());\n\n\tvar workstationBytes, domainNameBytes, usernameBytes, encryptedRandomSessionKeyBytes;\n\n\tvar encryptedRandomSessionKey = \"\";\n\tif(isUnicode){\n\t\tworkstationBytes = new Buffer(workstation, 'utf16le');\n\t\tdomainNameBytes = new Buffer(domainName, 'utf16le');\n\t\tusernameBytes = new Buffer(username, 'utf16le');\n\t\tencryptedRandomSessionKeyBytes = new Buffer(encryptedRandomSessionKey, 'utf16le');\n\t}else{\n\t\tworkstationBytes = new Buffer(workstation, 'ascii');\n\t\tdomainNameBytes = new Buffer(domainName, 'ascii');\n\t\tusernameBytes = new Buffer(username, 'ascii');\n\t\tencryptedRandomSessionKeyBytes = new Buffer(encryptedRandomSessionKey, 'ascii');\n\t}\n\n\tvar lmChallengeResponse = calc_resp((lm_password!=null)?lm_password:create_LM_hashed_password_v1(password), nonce);\n\tvar ntChallengeResponse = calc_resp((nt_password!=null)?nt_password:create_NT_hashed_password_v1(password), nonce);\n\n\tif(isNegotiateExtendedSecurity){\n\t\tvar pwhash = (nt_password!=null)?nt_password:create_NT_hashed_password_v1(password);\n\t \tvar clientChallenge = \"\";\n\t \tfor(var i=0; i < 8; i++){\n\t \t\tclientChallenge += String.fromCharCode( Math.floor(Math.random()*256) );\n\t   \t}\n\t   \tvar clientChallengeBytes = new Buffer(clientChallenge, 'ascii');\n\t    var challenges = ntlm2sr_calc_resp(pwhash, nonce, clientChallengeBytes);\n\t    lmChallengeResponse = challenges.lmChallengeResponse;\n\t    ntChallengeResponse = challenges.ntChallengeResponse;\n\t}\n\n\tvar signature = 'NTLMSSP\\0';\n\n\tvar pos = 0;\n\tvar buf = new Buffer(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length + ntChallengeResponse.length + encryptedRandomSessionKeyBytes.length);\n\n\tbuf.write(signature, pos, signature.length); pos += signature.length;\n\tbuf.writeUInt32LE(3, pos); pos += 4;          // type 1\n\n\tbuf.writeUInt16LE(lmChallengeResponse.length, pos); pos += 2; // LmChallengeResponseLen\n\tbuf.writeUInt16LE(lmChallengeResponse.length, pos); pos += 2; // LmChallengeResponseMaxLen\n\tbuf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length, pos); pos += 4; // LmChallengeResponseOffset\n\n\tbuf.writeUInt16LE(ntChallengeResponse.length, pos); pos += 2; // NtChallengeResponseLen\n\tbuf.writeUInt16LE(ntChallengeResponse.length, pos); pos += 2; // NtChallengeResponseMaxLen\n\tbuf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length, pos); pos += 4; // NtChallengeResponseOffset\n\n\tbuf.writeUInt16LE(domainNameBytes.length, pos); pos += 2; // DomainNameLen\n\tbuf.writeUInt16LE(domainNameBytes.length, pos); pos += 2; // DomainNameMaxLen\n\tbuf.writeUInt32LE(BODY_LENGTH, pos); pos += 4; \t\t\t  // DomainNameOffset\n\n\tbuf.writeUInt16LE(usernameBytes.length, pos); pos += 2; // UserNameLen\n\tbuf.writeUInt16LE(usernameBytes.length, pos); pos += 2; // UserNameMaxLen\n\tbuf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length, pos); pos += 4; // UserNameOffset\n\n\tbuf.writeUInt16LE(workstationBytes.length, pos); pos += 2; // WorkstationLen\n\tbuf.writeUInt16LE(workstationBytes.length, pos); pos += 2; // WorkstationMaxLen\n\tbuf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length, pos); pos += 4; // WorkstationOffset\n\n\tbuf.writeUInt16LE(encryptedRandomSessionKeyBytes.length, pos); pos += 2; // EncryptedRandomSessionKeyLen\n\tbuf.writeUInt16LE(encryptedRandomSessionKeyBytes.length, pos); pos += 2; // EncryptedRandomSessionKeyMaxLen\n\tbuf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length + ntChallengeResponse.length, pos); pos += 4; // EncryptedRandomSessionKeyOffset\n\n\tbuf.writeUInt32LE(typeflags.NTLM_TYPE2_FLAGS, pos); pos += 4; // NegotiateFlags\n\n\tbuf.writeUInt8(5, pos); pos++; // ProductMajorVersion\n\tbuf.writeUInt8(1, pos); pos++; // ProductMinorVersion\n\tbuf.writeUInt16LE(2600, pos); pos += 2; // ProductBuild\n\tbuf.writeUInt8(0, pos); pos++; // VersionReserved1\n\tbuf.writeUInt8(0, pos); pos++; // VersionReserved2\n\tbuf.writeUInt8(0, pos); pos++; // VersionReserved3\n\tbuf.writeUInt8(15, pos); pos++; // NTLMRevisionCurrent\n\n\tdomainNameBytes.copy(buf, pos); pos += domainNameBytes.length;\n\tusernameBytes.copy(buf, pos); pos += usernameBytes.length;\n\tworkstationBytes.copy(buf, pos); pos += workstationBytes.length;\n\tlmChallengeResponse.copy(buf, pos); pos += lmChallengeResponse.length;\n\tntChallengeResponse.copy(buf, pos); pos += ntChallengeResponse.length;\n\tencryptedRandomSessionKeyBytes.copy(buf, pos); pos += encryptedRandomSessionKeyBytes.length;\n\n\treturn 'NTLM ' + buf.toString('base64');\n}\n\nfunction create_LM_hashed_password_v1(password){\n\t// fix the password length to 14 bytes\n\tpassword = password.toUpperCase();\n\tvar passwordBytes = new Buffer(password, 'ascii');\n\n\tvar passwordBytesPadded = new Buffer(14);\n\tpasswordBytesPadded.fill(\"\\0\");\n\tvar sourceEnd = 14;\n\tif(passwordBytes.length < 14) sourceEnd = passwordBytes.length;\n\tpasswordBytes.copy(passwordBytesPadded, 0, 0, sourceEnd);\n\n\t// split into 2 parts of 7 bytes:\n\tvar firstPart = passwordBytesPadded.slice(0,7);\n\tvar secondPart = passwordBytesPadded.slice(7);\n\n\tfunction encrypt(buf){\n\t\tvar key = insertZerosEvery7Bits(buf);\n\t\tvar des = crypto.createCipheriv('DES-ECB', key, '');\n\t\treturn des.update(\"KGS!@#$%\"); // page 57 in [MS-NLMP]);\n\t}\n\n\tvar firstPartEncrypted = encrypt(firstPart);\n\tvar secondPartEncrypted = encrypt(secondPart);\n\n\treturn Buffer.concat([firstPartEncrypted, secondPartEncrypted]);\n}\n\nfunction insertZerosEvery7Bits(buf){\n\tvar binaryArray = bytes2binaryArray(buf);\n\tvar newBinaryArray = [];\n\tfor(var i=0; i<binaryArray.length; i++){\n\t\tnewBinaryArray.push(binaryArray[i]);\n\n\t\tif((i+1)%7 === 0){\n\t\t\tnewBinaryArray.push(0);\n\t\t}\n\t}\n\treturn binaryArray2bytes(newBinaryArray);\n}\n\nfunction bytes2binaryArray(buf){\n\tvar hex2binary = {\n\t\t0: [0,0,0,0],\n\t\t1: [0,0,0,1],\n\t\t2: [0,0,1,0],\n\t\t3: [0,0,1,1],\n\t\t4: [0,1,0,0],\n\t\t5: [0,1,0,1],\n\t\t6: [0,1,1,0],\n\t\t7: [0,1,1,1],\n\t\t8: [1,0,0,0],\n\t\t9: [1,0,0,1],\n\t\tA: [1,0,1,0],\n\t\tB: [1,0,1,1],\n\t\tC: [1,1,0,0],\n\t\tD: [1,1,0,1],\n\t\tE: [1,1,1,0],\n\t\tF: [1,1,1,1]\n\t};\n\n\tvar hexString = buf.toString('hex').toUpperCase();\n\tvar array = [];\n\tfor(var i=0; i<hexString.length; i++){\n   \t\tvar hexchar = hexString.charAt(i);\n   \t\tarray = array.concat(hex2binary[hexchar]);\n   \t}\n   \treturn array;\n}\n\nfunction binaryArray2bytes(array){\n\tvar binary2hex = {\n\t\t'0000': 0,\n\t\t'0001': 1,\n\t\t'0010': 2,\n\t\t'0011': 3,\n\t\t'0100': 4,\n\t\t'0101': 5,\n\t\t'0110': 6,\n\t\t'0111': 7,\n\t\t'1000': 8,\n\t\t'1001': 9,\n\t\t'1010': 'A',\n\t\t'1011': 'B',\n\t\t'1100': 'C',\n\t\t'1101': 'D',\n\t\t'1110': 'E',\n\t\t'1111': 'F'\n\t};\n\n \tvar bufArray = [];\n\n\tfor(var i=0; i<array.length; i +=8 ){\n\t\tif((i+7) > array.length)\n\t\t\tbreak;\n\n\t\tvar binString1 = '' + array[i] + '' + array[i+1] + '' + array[i+2] + '' + array[i+3];\n\t\tvar binString2 = '' + array[i+4] + '' + array[i+5] + '' + array[i+6] + '' + array[i+7];\n   \t\tvar hexchar1 = binary2hex[binString1];\n   \t\tvar hexchar2 = binary2hex[binString2];\n\n   \t\tvar buf = new Buffer(hexchar1 + '' + hexchar2, 'hex');\n   \t\tbufArray.push(buf);\n   \t}\n\n   \treturn Buffer.concat(bufArray);\n}\n\nfunction create_NT_hashed_password_v1(password){\n\tvar buf = new Buffer(password, 'utf16le');\n\tvar md4 = crypto.createHash('md4');\n\tmd4.update(buf);\n\treturn new Buffer(md4.digest());\n}\n\nfunction calc_resp(password_hash, server_challenge){\n    // padding with zeros to make the hash 21 bytes long\n    var passHashPadded = new Buffer(21);\n    passHashPadded.fill(\"\\0\");\n    password_hash.copy(passHashPadded, 0, 0, password_hash.length);\n\n    var resArray = [];\n\n    var des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(0,7)), '');\n    resArray.push( des.update(server_challenge.slice(0,8)) );\n\n    des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(7,14)), '');\n    resArray.push( des.update(server_challenge.slice(0,8)) );\n\n    des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(14,21)), '');\n    resArray.push( des.update(server_challenge.slice(0,8)) );\n\n   \treturn Buffer.concat(resArray);\n}\n\nfunction ntlm2sr_calc_resp(responseKeyNT, serverChallenge, clientChallenge){\n\t// padding with zeros to make the hash 16 bytes longer\n    var lmChallengeResponse = new Buffer(clientChallenge.length + 16);\n    lmChallengeResponse.fill(\"\\0\");\n    clientChallenge.copy(lmChallengeResponse, 0, 0, clientChallenge.length);\n\n    var buf = Buffer.concat([serverChallenge, clientChallenge]);\n    var md5 = crypto.createHash('md5');\n    md5.update(buf);\n    var sess = md5.digest();\n    var ntChallengeResponse = calc_resp(responseKeyNT, sess.slice(0,8));\n\n    return {\n    \tlmChallengeResponse: lmChallengeResponse,\n    \tntChallengeResponse: ntChallengeResponse\n    };\n}\n\nexports.createType1Message = createType1Message;\nexports.parseType2Message = parseType2Message;\nexports.createType3Message = createType3Message;\nexports.create_NT_hashed_password = create_NT_hashed_password_v1;\nexports.create_LM_hashed_password = create_LM_hashed_password_v1;\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}