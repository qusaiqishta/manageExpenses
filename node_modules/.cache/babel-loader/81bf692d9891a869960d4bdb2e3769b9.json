{"ast":null,"code":"'use strict';\n\nconst parseMilliseconds = require('parse-ms');\nconst pluralize = (word, count) => count === 1 ? word : `${word}s`;\nconst SECOND_ROUNDING_EPSILON = 0.0000001;\nmodule.exports = function (milliseconds) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!Number.isFinite(milliseconds)) {\n    throw new TypeError('Expected a finite number');\n  }\n  if (options.colonNotation) {\n    options.compact = false;\n    options.formatSubMilliseconds = false;\n    options.separateMilliseconds = false;\n    options.verbose = false;\n  }\n  if (options.compact) {\n    options.secondsDecimalDigits = 0;\n    options.millisecondsDecimalDigits = 0;\n  }\n  const result = [];\n  const floorDecimals = (value, decimalDigits) => {\n    const flooredInterimValue = Math.floor(value * 10 ** decimalDigits + SECOND_ROUNDING_EPSILON);\n    const flooredValue = Math.round(flooredInterimValue) / 10 ** decimalDigits;\n    return flooredValue.toFixed(decimalDigits);\n  };\n  const add = (value, long, short, valueString) => {\n    if ((result.length === 0 || !options.colonNotation) && value === 0 && !(options.colonNotation && short === 'm')) {\n      return;\n    }\n    valueString = (valueString || value || '0').toString();\n    let prefix;\n    let suffix;\n    if (options.colonNotation) {\n      prefix = result.length > 0 ? ':' : '';\n      suffix = '';\n      const wholeDigits = valueString.includes('.') ? valueString.split('.')[0].length : valueString.length;\n      const minLength = result.length > 0 ? 2 : 1;\n      valueString = '0'.repeat(Math.max(0, minLength - wholeDigits)) + valueString;\n    } else {\n      prefix = '';\n      suffix = options.verbose ? ' ' + pluralize(long, value) : short;\n    }\n    result.push(prefix + valueString + suffix);\n  };\n  const parsed = parseMilliseconds(milliseconds);\n  add(Math.trunc(parsed.days / 365), 'year', 'y');\n  add(parsed.days % 365, 'day', 'd');\n  add(parsed.hours, 'hour', 'h');\n  add(parsed.minutes, 'minute', 'm');\n  if (options.separateMilliseconds || options.formatSubMilliseconds || !options.colonNotation && milliseconds < 1000) {\n    add(parsed.seconds, 'second', 's');\n    if (options.formatSubMilliseconds) {\n      add(parsed.milliseconds, 'millisecond', 'ms');\n      add(parsed.microseconds, 'microsecond', 'µs');\n      add(parsed.nanoseconds, 'nanosecond', 'ns');\n    } else {\n      const millisecondsAndBelow = parsed.milliseconds + parsed.microseconds / 1000 + parsed.nanoseconds / 1e6;\n      const millisecondsDecimalDigits = typeof options.millisecondsDecimalDigits === 'number' ? options.millisecondsDecimalDigits : 0;\n      const roundedMiliseconds = millisecondsAndBelow >= 1 ? Math.round(millisecondsAndBelow) : Math.ceil(millisecondsAndBelow);\n      const millisecondsString = millisecondsDecimalDigits ? millisecondsAndBelow.toFixed(millisecondsDecimalDigits) : roundedMiliseconds;\n      add(Number.parseFloat(millisecondsString, 10), 'millisecond', 'ms', millisecondsString);\n    }\n  } else {\n    const seconds = milliseconds / 1000 % 60;\n    const secondsDecimalDigits = typeof options.secondsDecimalDigits === 'number' ? options.secondsDecimalDigits : 1;\n    const secondsFixed = floorDecimals(seconds, secondsDecimalDigits);\n    const secondsString = options.keepDecimalsOnWholeSeconds ? secondsFixed : secondsFixed.replace(/\\.0+$/, '');\n    add(Number.parseFloat(secondsString, 10), 'second', 's', secondsString);\n  }\n  if (result.length === 0) {\n    return '0' + (options.verbose ? ' milliseconds' : 'ms');\n  }\n  if (options.compact) {\n    return result[0];\n  }\n  if (typeof options.unitCount === 'number') {\n    const separator = options.colonNotation ? '' : ' ';\n    return result.slice(0, Math.max(options.unitCount, 1)).join(separator);\n  }\n  return options.colonNotation ? result.join('') : result.join(' ');\n};","map":{"version":3,"names":["parseMilliseconds","require","pluralize","word","count","SECOND_ROUNDING_EPSILON","module","exports","milliseconds","options","Number","isFinite","TypeError","colonNotation","compact","formatSubMilliseconds","separateMilliseconds","verbose","secondsDecimalDigits","millisecondsDecimalDigits","result","floorDecimals","value","decimalDigits","flooredInterimValue","Math","floor","flooredValue","round","toFixed","add","long","short","valueString","length","toString","prefix","suffix","wholeDigits","includes","split","minLength","repeat","max","push","parsed","trunc","days","hours","minutes","seconds","microseconds","nanoseconds","millisecondsAndBelow","roundedMiliseconds","ceil","millisecondsString","parseFloat","secondsFixed","secondsString","keepDecimalsOnWholeSeconds","replace","unitCount","separator","slice","join"],"sources":["/Users/Qusai.Qishta/node_modules/pretty-ms/index.js"],"sourcesContent":["'use strict';\nconst parseMilliseconds = require('parse-ms');\n\nconst pluralize = (word, count) => count === 1 ? word : `${word}s`;\n\nconst SECOND_ROUNDING_EPSILON = 0.0000001;\n\nmodule.exports = (milliseconds, options = {}) => {\n\tif (!Number.isFinite(milliseconds)) {\n\t\tthrow new TypeError('Expected a finite number');\n\t}\n\n\tif (options.colonNotation) {\n\t\toptions.compact = false;\n\t\toptions.formatSubMilliseconds = false;\n\t\toptions.separateMilliseconds = false;\n\t\toptions.verbose = false;\n\t}\n\n\tif (options.compact) {\n\t\toptions.secondsDecimalDigits = 0;\n\t\toptions.millisecondsDecimalDigits = 0;\n\t}\n\n\tconst result = [];\n\n\tconst floorDecimals = (value, decimalDigits) => {\n\t\tconst flooredInterimValue = Math.floor((value * (10 ** decimalDigits)) + SECOND_ROUNDING_EPSILON);\n\t\tconst flooredValue = Math.round(flooredInterimValue) / (10 ** decimalDigits);\n\t\treturn flooredValue.toFixed(decimalDigits);\n\t};\n\n\tconst add = (value, long, short, valueString) => {\n\t\tif ((result.length === 0 || !options.colonNotation) && value === 0 && !(options.colonNotation && short === 'm')) {\n\t\t\treturn;\n\t\t}\n\n\t\tvalueString = (valueString || value || '0').toString();\n\t\tlet prefix;\n\t\tlet suffix;\n\t\tif (options.colonNotation) {\n\t\t\tprefix = result.length > 0 ? ':' : '';\n\t\t\tsuffix = '';\n\t\t\tconst wholeDigits = valueString.includes('.') ? valueString.split('.')[0].length : valueString.length;\n\t\t\tconst minLength = result.length > 0 ? 2 : 1;\n\t\t\tvalueString = '0'.repeat(Math.max(0, minLength - wholeDigits)) + valueString;\n\t\t} else {\n\t\t\tprefix = '';\n\t\t\tsuffix = options.verbose ? ' ' + pluralize(long, value) : short;\n\t\t}\n\n\t\tresult.push(prefix + valueString + suffix);\n\t};\n\n\tconst parsed = parseMilliseconds(milliseconds);\n\n\tadd(Math.trunc(parsed.days / 365), 'year', 'y');\n\tadd(parsed.days % 365, 'day', 'd');\n\tadd(parsed.hours, 'hour', 'h');\n\tadd(parsed.minutes, 'minute', 'm');\n\n\tif (\n\t\toptions.separateMilliseconds ||\n\t\toptions.formatSubMilliseconds ||\n\t\t(!options.colonNotation && milliseconds < 1000)\n\t) {\n\t\tadd(parsed.seconds, 'second', 's');\n\t\tif (options.formatSubMilliseconds) {\n\t\t\tadd(parsed.milliseconds, 'millisecond', 'ms');\n\t\t\tadd(parsed.microseconds, 'microsecond', 'µs');\n\t\t\tadd(parsed.nanoseconds, 'nanosecond', 'ns');\n\t\t} else {\n\t\t\tconst millisecondsAndBelow =\n\t\t\t\tparsed.milliseconds +\n\t\t\t\t(parsed.microseconds / 1000) +\n\t\t\t\t(parsed.nanoseconds / 1e6);\n\n\t\t\tconst millisecondsDecimalDigits =\n\t\t\t\ttypeof options.millisecondsDecimalDigits === 'number' ?\n\t\t\t\t\toptions.millisecondsDecimalDigits :\n\t\t\t\t\t0;\n\n\t\t\tconst roundedMiliseconds = millisecondsAndBelow >= 1 ?\n\t\t\t\tMath.round(millisecondsAndBelow) :\n\t\t\t\tMath.ceil(millisecondsAndBelow);\n\n\t\t\tconst millisecondsString = millisecondsDecimalDigits ?\n\t\t\t\tmillisecondsAndBelow.toFixed(millisecondsDecimalDigits) :\n\t\t\t\troundedMiliseconds;\n\n\t\t\tadd(\n\t\t\t\tNumber.parseFloat(millisecondsString, 10),\n\t\t\t\t'millisecond',\n\t\t\t\t'ms',\n\t\t\t\tmillisecondsString\n\t\t\t);\n\t\t}\n\t} else {\n\t\tconst seconds = (milliseconds / 1000) % 60;\n\t\tconst secondsDecimalDigits =\n\t\t\ttypeof options.secondsDecimalDigits === 'number' ?\n\t\t\t\toptions.secondsDecimalDigits :\n\t\t\t\t1;\n\t\tconst secondsFixed = floorDecimals(seconds, secondsDecimalDigits);\n\t\tconst secondsString = options.keepDecimalsOnWholeSeconds ?\n\t\t\tsecondsFixed :\n\t\t\tsecondsFixed.replace(/\\.0+$/, '');\n\t\tadd(Number.parseFloat(secondsString, 10), 'second', 's', secondsString);\n\t}\n\n\tif (result.length === 0) {\n\t\treturn '0' + (options.verbose ? ' milliseconds' : 'ms');\n\t}\n\n\tif (options.compact) {\n\t\treturn result[0];\n\t}\n\n\tif (typeof options.unitCount === 'number') {\n\t\tconst separator = options.colonNotation ? '' : ' ';\n\t\treturn result.slice(0, Math.max(options.unitCount, 1)).join(separator);\n\t}\n\n\treturn options.colonNotation ? result.join('') : result.join(' ');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}