{"ast":null,"code":"var _ = require('../util').lodash,\n  PropertyBase = require('./property-base').PropertyBase,\n  __PARENT = '__parent',\n  DEFAULT_INDEX_ATTR = 'id',\n  DEFAULT_INDEXCASE_ATTR = false,\n  DEFAULT_INDEXMULTI_ATTR = false,\n  PropertyList;\n\n/**\n * An item constructed of PropertyList.Type.\n *\n * @typedef {Object} PropertyList.Type\n */\n_.inherit(\n/**\n * @constructor\n * @param {Function} type -\n * @param {Object} parent -\n * @param {Array} populate -\n */\nPropertyList = function PostmanPropertyList(type, parent, populate) {\n  // @todo add this test sometime later\n  // if (!type) {\n  //     throw new Error('postman-collection: cannot initialise a list without a type parameter');\n  // }\n\n  PropertyList.super_.call(this); // call super with appropriate options\n\n  this.setParent(parent); // save reference to parent\n  _.assign(this, /** @lends PropertyList.prototype */{\n    /**\n     * @private\n     * @type {Array}\n     */\n    members: this.members || [],\n    /**\n     * @private\n     * @type {Object}\n     * @note This should not be used, and it's not guaranteed to be in sync with the actual list of members.\n     */\n    reference: this.reference || {},\n    /**\n     * @private\n     * @type {Function}\n     */\n    Type: type\n  });\n\n  // if the type this list holds has its own index key, then use the same\n  _.getOwn(type, '_postman_propertyIndexKey') && (this._postman_listIndexKey = type._postman_propertyIndexKey);\n\n  // if the type has case sensitivity flags, set the same\n  _.getOwn(type, '_postman_propertyIndexCaseInsensitive') && (this._postman_listIndexCaseInsensitive = type._postman_propertyIndexCaseInsensitive);\n\n  // if the type allows multiple values, set the flag\n  _.getOwn(type, '_postman_propertyAllowsMultipleValues') && (this._postman_listAllowsMultipleValues = type._postman_propertyAllowsMultipleValues);\n\n  // prepopulate\n  populate && this.populate(populate);\n}, PropertyBase);\n_.assign(PropertyList.prototype, /** @lends PropertyList.prototype */{\n  /**\n   * Indicates that this element contains a number of other elements.\n   *\n   * @private\n   */\n  _postman_propertyIsList: true,\n  /**\n   * Holds the attribute to index this PropertyList by. Default: 'id'\n   *\n   * @private\n   * @type {String}\n   */\n  _postman_listIndexKey: DEFAULT_INDEX_ATTR,\n  /**\n   * Holds the attribute whether indexing of this list is case sensitive or not\n   *\n   * @private\n   * @type {String}\n   */\n  _postman_listIndexCaseInsensitive: DEFAULT_INDEXCASE_ATTR,\n  /**\n   * Holds the attribute whether exporting the index retains duplicate index items\n   *\n   * @private\n   * @type {String}\n   */\n  _postman_listAllowsMultipleValues: DEFAULT_INDEXMULTI_ATTR,\n  /**\n   * Insert an element at the end of this list. When a reference member specified via second parameter is found, the\n   * member is inserted at an index before the reference member.\n   *\n   * @param {PropertyList.Type} item -\n   * @param {PropertyList.Type|String} [before] -\n   */\n  insert: function (item, before) {\n    if (!_.isObject(item)) {\n      return;\n    } // do not proceed on empty param\n\n    var duplicate = this.indexOf(item),\n      index;\n\n    // remove from previous list\n    PropertyList.isPropertyList(item[__PARENT]) && item[__PARENT] !== this && item[__PARENT].remove(item);\n    // inject the parent reference\n    _.assignHidden(item, __PARENT, this);\n\n    // ensure that we do not double insert things into member array\n    duplicate > -1 && this.members.splice(duplicate, 1);\n    // find the position of the reference element\n    before && (before = this.indexOf(before));\n\n    // inject to the members array ata position or at the end in case no item is there for reference\n    before > -1 ? this.members.splice(before, 0, item) : this.members.push(item);\n\n    // store reference by id, so create the index string. we first ensure that the index value is truthy and then\n    // recheck that the string conversion of the same is truthy as well.\n    if ((index = item[this._postman_listIndexKey]) && (index = String(index))) {\n      // desensitise case, if the property needs it to be\n      this._postman_listIndexCaseInsensitive && (index = index.toLowerCase());\n\n      // if multiple values are allowed, the reference may contain an array of items, mapped to an index.\n      if (this._postman_listAllowsMultipleValues && Object.hasOwnProperty.call(this.reference, index)) {\n        // if the value is not an array, convert it to an array.\n        !_.isArray(this.reference[index]) && (this.reference[index] = [this.reference[index]]);\n\n        // add the item to the array of items corresponding to this index\n        this.reference[index].push(item);\n      } else {\n        this.reference[index] = item;\n      }\n    }\n  },\n  /**\n   * Insert an element at the end of this list. When a reference member specified via second parameter is found, the\n   * member is inserted at an index after the reference member.\n   *\n   * @param {PropertyList.Type} item -\n   * @param {PropertyList.Type|String} [after] -\n   */\n  insertAfter: function (item, after) {\n    // convert item to positional reference\n    return this.insert(item, this.idx(this.indexOf(after) + 1));\n  },\n  /**\n   * Adds or moves an item to the end of this list.\n   *\n   * @param {PropertyList.Type} item -\n   */\n  append: function (item) {\n    return this.insert(item);\n  },\n  /**\n   * Adds or moves an item to the beginning of this list.\n   *\n   * @param {PropertyList.Type} item -\n   */\n  prepend: function (item) {\n    return this.insert(item, this.idx(0));\n  },\n  /**\n   * Add an item or item definition to this list.\n   *\n   * @param {Object|PropertyList.Type} item -\n   * @todo\n   * - remove item from original parent if already it has a parent\n   * - validate that the original parent's constructor matches this parent's constructor\n   */\n  add: function (item) {\n    // do not proceed on empty param, but empty strings are in fact valid.\n    // eslint-disable-next-line lodash/prefer-is-nil\n    if (_.isNull(item) || _.isUndefined(item) || _.isNaN(item)) {\n      return;\n    }\n\n    // create new instance of the item based on the type specified if it is not already\n    this.insert(item.constructor === this.Type ? item :\n    // if the property has a create static function, use it.\n    // eslint-disable-next-line prefer-spread\n    _.has(this.Type, 'create') ? this.Type.create.apply(this.Type, arguments) : new this.Type(item));\n  },\n  /**\n   * Add an item or update an existing item\n   *\n   * @param {PropertyList.Type} item -\n   * @returns {?Boolean}\n   */\n  upsert: function (item) {\n    // do not proceed on empty param, but empty strings are in fact valid.\n    if (_.isNil(item) || _.isNaN(item)) {\n      return null;\n    }\n    var indexer = this._postman_listIndexKey,\n      existing = this.one(item[indexer]);\n    if (existing) {\n      if (!_.isFunction(existing.update)) {\n        throw new Error('collection: unable to upsert into a list of Type that does not support .update()');\n      }\n      existing.update(item);\n      return false;\n    }\n\n    // since there is no existing item, just add a new one\n    this.add(item);\n    return true; // indicate added\n  },\n\n  /**\n   * Removes all elements from the PropertyList for which the predicate returns truthy.\n   *\n   * @param {Function|String|PropertyList.Type} predicate -\n   * @param {Object} context Optional context to bind the predicate to.\n   */\n  remove: function (predicate, context) {\n    var match; // to be used if predicate is an ID\n\n    !context && (context = this);\n    if (_.isString(predicate)) {\n      // if predicate is id, then create a function to remove that\n      // need to take care of case sensitivity as well :/\n      match = this._postman_listIndexCaseInsensitive ? predicate.toLowerCase() : predicate;\n      predicate = function (item) {\n        var id = item[this._postman_listIndexKey];\n        this._postman_listIndexCaseInsensitive && (id = id.toLowerCase());\n        return id === match;\n      }.bind(this);\n    } else if (predicate instanceof this.Type) {\n      // in case an object reference is sent, prepare it for removal using direct reference comparison\n      match = predicate;\n      predicate = function (item) {\n        return item === match;\n      };\n    }\n    _.isFunction(predicate) && _.remove(this.members, function (item) {\n      var index;\n      if (predicate.apply(context, arguments)) {\n        if ((index = item[this._postman_listIndexKey]) && (index = String(index))) {\n          this._postman_listIndexCaseInsensitive && (index = index.toLowerCase());\n          if (this._postman_listAllowsMultipleValues && _.isArray(this.reference[index])) {\n            // since we have an array of multiple values, remove only the value for which the\n            // predicate returned truthy. If the array becomes empty, just delete it.\n            _.remove(this.reference[index], function (each) {\n              return each === item;\n            });\n\n            // If the array becomes empty, remove it\n            /* istanbul ignore next */\n            this.reference[index].length === 0 && delete this.reference[index];\n\n            // If the array contains only one element, remove the array, and assign the element\n            // as the reference value\n            this.reference[index].length === 1 && (this.reference[index] = this.reference[index][0]);\n          } else {\n            delete this.reference[index];\n          }\n        }\n        delete item[__PARENT]; // unlink from its parent\n\n        return true;\n      }\n    }.bind(this));\n  },\n  /**\n   * Removes all items in the list\n   */\n  clear: function () {\n    // we unlink every member from it's parent (assuming this is their parent)\n    this.all().forEach(PropertyList._unlinkItemFromParent);\n    this.members.length = 0; // remove all items from list\n\n    // now we remove all items from index reference\n    Object.keys(this.reference).forEach(function (key) {\n      delete this.reference[key];\n    }.bind(this));\n  },\n  /**\n   * Load one or more items\n   *\n   * @param {Object|Array} items -\n   */\n  populate: function (items) {\n    // if Type supports parsing of string headers then do it before adding it.\n    _.isString(items) && _.isFunction(this.Type.parse) && (items = this.Type.parse(items));\n    // add a single item or an array of items.\n    _.forEach(_.isArray(items) ? items :\n    // if population is not an array, we send this as single item in an array or send each property separately\n    // if the core Type supports Type.create\n    _.isPlainObject(items) && _.has(this.Type, 'create') ? items : [items], this.add.bind(this));\n  },\n  /**\n   * Clears the list and adds new items.\n   *\n   * @param {Object|Array} items -\n   */\n  repopulate: function (items) {\n    this.clear();\n    this.populate(items);\n  },\n  /**\n   * Add or update values from a source list.\n   *\n   * @param {PropertyList|Array} source -\n   * @param {Boolean} [prune=false] Setting this to `true` will cause the extra items from the list to be deleted\n   */\n  assimilate: function (source, prune) {\n    var members = PropertyList.isPropertyList(source) ? source.members : source,\n      list = this,\n      indexer = list._postman_listIndexKey,\n      sourceKeys = {}; // keeps track of added / updated keys for later exclusion\n\n    if (!_.isArray(members)) {\n      return;\n    }\n    members.forEach(function (item) {\n      /* istanbul ignore if */\n      if (!(item && _.has(item, indexer))) {\n        return;\n      }\n      list.upsert(item);\n      sourceKeys[item[indexer]] = true;\n    });\n\n    // now remove any variable that is not in source object\n    // @note - using direct `this.reference` list of keys here so that we can mutate the list while iterating\n    // on it\n    if (prune) {\n      _.forEach(list.reference, function (value, key) {\n        if (_.has(sourceKeys, key)) {\n          return;\n        } // de not delete if source obj has this variable\n        list.remove(key); // use PropertyList functions to remove so that the .members array is cleared too\n      });\n    }\n  },\n\n  /**\n   * Returns a map of all items.\n   *\n   * @returns {Object}\n   */\n  all: function () {\n    return _.clone(this.members);\n  },\n  /**\n   * Get Item in this list by `ID` reference. If multiple values are allowed, the last value is returned.\n   *\n   * @param {String} id -\n   * @returns {PropertyList.Type}\n   */\n  one: function (id) {\n    var val = this.reference[this._postman_listIndexCaseInsensitive ? String(id).toLowerCase() : id];\n    if (this._postman_listAllowsMultipleValues && Array.isArray(val)) {\n      return val.length ? val[val.length - 1] : /* istanbul ignore next */\n      undefined;\n    }\n    return val;\n  },\n  /**\n   * Get the value of an item in this list. This is similar to {@link PropertyList.one} barring the fact that it\n   * returns the value of the underlying type of the list content instead of the item itself.\n   *\n   * @param {String|Function} key -\n   * @returns {PropertyList.Type|*}\n   */\n  get: function (key) {\n    var member = this.one(key);\n    if (!member) {\n      return;\n    } // eslint-disable-line getter-return\n\n    return member.valueOf();\n  },\n  /**\n   * Iterate on each item of this list.\n   *\n   * @param {Function} iterator -\n   * @param {Object} context -\n   */\n  each: function (iterator, context) {\n    _.forEach(this.members, _.isFunction(iterator) ? iterator.bind(context || this.__parent) : iterator);\n  },\n  /**\n   * @param {Function} rule -\n   * @param {Object} context -\n   */\n  filter: function (rule, context) {\n    return _.filter(this.members, _.isFunction(rule) && _.isObject(context) ? rule.bind(context) : rule);\n  },\n  /**\n   * Find an item within the item group\n   *\n   * @param {Function} rule -\n   * @param {Object} [context] -\n   * @returns {Item|ItemGroup}\n   */\n  find: function (rule, context) {\n    return _.find(this.members, _.isFunction(rule) && _.isObject(context) ? rule.bind(context) : rule);\n  },\n  /**\n   * Iterates over the property list.\n   *\n   * @param {Function} iterator Function to call on each item.\n   * @param {Object} context Optional context, defaults to the PropertyList itself.\n   */\n  map: function (iterator, context) {\n    return _.map(this.members, _.isFunction(iterator) ? iterator.bind(context || this) : iterator);\n  },\n  /**\n   * Iterates over the property list and accumulates the result.\n   *\n   * @param {Function} iterator Function to call on each item.\n   * @param {*} accumulator Accumulator initial value\n   * @param {Object} context Optional context, defaults to the PropertyList itself.\n   */\n  reduce: function (iterator, accumulator, context) {\n    return _.reduce(this.members, _.isFunction(iterator) ? iterator.bind(context || this) : /* istanbul ignore next */\n    iterator, accumulator);\n  },\n  /**\n   * Returns the length of the PropertyList\n   *\n   * @returns {Number}\n   */\n  count: function () {\n    return this.members.length;\n  },\n  /**\n   * Get a member of this list by it's index\n   *\n   * @param {Number} index -\n   * @returns {PropertyList.Type}\n   */\n  idx: function (index) {\n    return this.members[index];\n  },\n  /**\n   * Find the index of an item in this list\n   *\n   * @param {String|Object} item -\n   * @returns {Number}\n   */\n  indexOf: function (item) {\n    return this.members.indexOf(_.isString(item) ? item = this.one(item) : item);\n  },\n  /**\n   * Check whether an item exists in this list\n   *\n   * @param {String|PropertyList.Type} item -\n   * @param {*=} value -\n   * @returns {Boolean}\n   */\n  has: function (item, value) {\n    var match, val, i;\n    match = _.isString(item) ? this.reference[this._postman_listIndexCaseInsensitive ? item.toLowerCase() : item] : this.filter(function (member) {\n      return member === item;\n    });\n\n    // If we don't have a match, there's nothing to do\n    if (!match) {\n      return false;\n    }\n\n    // if no value is provided, just check if item exists\n    if (arguments.length === 1) {\n      return Boolean(_.isArray(match) ? match.length : match);\n    }\n\n    // If this property allows multiple values and we get an array, we need to iterate through it and see\n    // if any element matches.\n    if (this._postman_listAllowsMultipleValues && _.isArray(match)) {\n      for (i = 0; i < match.length; i++) {\n        // use the value of the current element\n        val = _.isFunction(match[i].valueOf) ? match[i].valueOf() : /* istanbul ignore next */\n        match[i];\n        if (val === value) {\n          return true;\n        }\n      }\n\n      // no matches were found, so return false here.\n      return false;\n    }\n\n    // We didn't have an array, so just check if the matched value equals the provided value.\n    _.isFunction(match.valueOf) && (match = match.valueOf());\n    return match === value;\n  },\n  /**\n   * Iterates over all parents of the property list\n   *\n   * @param {Function} iterator -\n   * @param {Object=} [context] -\n   */\n  eachParent: function (iterator, context) {\n    // validate parameters\n    if (!_.isFunction(iterator)) {\n      return;\n    }\n    !context && (context = this);\n    var parent = this.__parent,\n      prev;\n\n    // iterate till there is no parent\n    while (parent) {\n      // call iterator with the parent and previous parent\n      iterator.call(context, parent, prev);\n\n      // update references\n      prev = parent;\n      parent = parent.__parent;\n    }\n  },\n  /**\n   * Converts a list of Properties into an object where key is `_postman_propertyIndexKey` and value is determined\n   * by the `valueOf` function\n   *\n   * @param {?Boolean} [excludeDisabled=false] - When set to true, disabled properties are excluded from the resultant\n   * object.\n   * @param {?Boolean} [caseSensitive] - When set to true, properties are treated strictly as per their original\n   * case. The default value for this property also depends on the case insensitivity definition of the current\n   * property.\n   * @param {?Boolean} [multiValue=false] - When set to true, only the first value of a multi valued property is\n   * returned.\n   * @param {Boolean} [sanitizeKeys=false] - When set to true, properties with falsy keys are removed.\n   * @todo Change the function signature to an object of options instead of the current structure.\n   * @returns {Object}\n   */\n  toObject: function (excludeDisabled, caseSensitive, multiValue, sanitizeKeys) {\n    var obj = {},\n      // create transformation data accumulator\n\n      // gather all the switches of the list\n      key = this._postman_listIndexKey,\n      sanitiseKeys = this._postman_sanitizeKeys || sanitizeKeys,\n      sensitive = !this._postman_listIndexCaseInsensitive || caseSensitive,\n      multivalue = this._postman_listAllowsMultipleValues || multiValue;\n\n    // iterate on each member to create the transformation object\n    this.each(function (member) {\n      // Bail out for the current member if ANY of the conditions below is true:\n      // 1. The member is falsy.\n      // 2. The member does not have the specified property list index key.\n      // 3. The member is disabled and disabled properties have to be ignored.\n      // 4. The member has a falsy key, and sanitize is true.\n      if (!member || !_.has(member, key) || excludeDisabled && member.disabled || sanitiseKeys && !member[key]) {\n        return;\n      }\n\n      // based on case sensitivity settings, we get the property name of the item\n      var prop = sensitive ? member[key] : String(member[key]).toLowerCase();\n\n      // now, if transformation object already has a member with same property name, we either overwrite it or\n      // append to an array of values based on multi-value support\n      if (multivalue && _.has(obj, prop)) {\n        !Array.isArray(obj[prop]) && (obj[prop] = [obj[prop]]);\n        obj[prop].push(member.valueOf());\n      } else {\n        obj[prop] = member.valueOf();\n      }\n    });\n    return obj;\n  },\n  /**\n   * Adds ability to convert a list to a string provided it's underlying format has unparse function defined.\n   *\n   * @returns {String}\n   */\n  toString: function () {\n    if (this.Type.unparse) {\n      return this.Type.unparse(this.members);\n    }\n    return this.constructor ? this.constructor.prototype.toString.call(this) : '';\n  },\n  toJSON: function () {\n    if (!this.count()) {\n      return [];\n    }\n    return _.map(this.members, function (member) {\n      // use member.toJSON if it exists\n      if (!_.isEmpty(member) && _.isFunction(member.toJSON)) {\n        return member.toJSON();\n      }\n      return _.reduce(member, function (accumulator, value, key) {\n        if (value === undefined) {\n          // true/false/null need to be preserved.\n          return accumulator;\n        }\n\n        // Handle plurality of PropertyLists in the SDK vs the exported JSON.\n        // Basically, removes the trailing \"s\" from key if the value is a property list.\n        if (value && value._postman_propertyIsList && !value._postman_proprtyIsSerialisedAsPlural && _.endsWith(key, 's')) {\n          key = key.slice(0, -1);\n        }\n\n        // Handle 'PropertyBase's\n        if (value && _.isFunction(value.toJSON)) {\n          accumulator[key] = value.toJSON();\n          return accumulator;\n        }\n\n        // Handle Strings\n        if (_.isString(value)) {\n          accumulator[key] = value;\n          return accumulator;\n        }\n\n        // Everything else\n        accumulator[key] = _.cloneElement(value);\n        return accumulator;\n      }, {});\n    });\n  }\n});\n_.assign(PropertyList, /** @lends PropertyList */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'PropertyList',\n  /**\n   * Removes child-parent links for the provided PropertyList member.\n   *\n   * @param {Property} item - The property for which to perform parent de-linking.\n   * @private\n   */\n  _unlinkItemFromParent: function (item) {\n    item.__parent && delete item.__parent; // prevents V8 from making unnecessary look-ups if there is no __parent\n  },\n\n  /**\n   * Checks whether an object is a PropertyList\n   *\n   * @param {*} obj -\n   * @returns {Boolean}\n   */\n  isPropertyList: function (obj) {\n    return Boolean(obj) && (obj instanceof PropertyList || _.inSuperChain(obj.constructor, '_postman_propertyName', PropertyList._postman_propertyName));\n  }\n});\nmodule.exports = {\n  PropertyList\n};","map":{"version":3,"names":["_","require","lodash","PropertyBase","__PARENT","DEFAULT_INDEX_ATTR","DEFAULT_INDEXCASE_ATTR","DEFAULT_INDEXMULTI_ATTR","PropertyList","inherit","PostmanPropertyList","type","parent","populate","super_","call","setParent","assign","members","reference","Type","getOwn","_postman_listIndexKey","_postman_propertyIndexKey","_postman_listIndexCaseInsensitive","_postman_propertyIndexCaseInsensitive","_postman_listAllowsMultipleValues","_postman_propertyAllowsMultipleValues","prototype","_postman_propertyIsList","insert","item","before","isObject","duplicate","indexOf","index","isPropertyList","remove","assignHidden","splice","push","String","toLowerCase","Object","hasOwnProperty","isArray","insertAfter","after","idx","append","prepend","add","isNull","isUndefined","isNaN","constructor","has","create","apply","arguments","upsert","isNil","indexer","existing","one","isFunction","update","Error","predicate","context","match","isString","id","bind","each","length","clear","all","forEach","_unlinkItemFromParent","keys","key","items","parse","isPlainObject","repopulate","assimilate","source","prune","list","sourceKeys","value","clone","val","Array","undefined","get","member","valueOf","iterator","__parent","filter","rule","find","map","reduce","accumulator","count","i","Boolean","eachParent","prev","toObject","excludeDisabled","caseSensitive","multiValue","sanitizeKeys","obj","sanitiseKeys","_postman_sanitizeKeys","sensitive","multivalue","disabled","prop","toString","unparse","toJSON","isEmpty","_postman_proprtyIsSerialisedAsPlural","endsWith","slice","cloneElement","_postman_propertyName","inSuperChain","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/property-list.js"],"sourcesContent":["var _ = require('../util').lodash,\n    PropertyBase = require('./property-base').PropertyBase,\n\n    __PARENT = '__parent',\n    DEFAULT_INDEX_ATTR = 'id',\n    DEFAULT_INDEXCASE_ATTR = false,\n    DEFAULT_INDEXMULTI_ATTR = false,\n\n    PropertyList;\n\n/**\n * An item constructed of PropertyList.Type.\n *\n * @typedef {Object} PropertyList.Type\n */\n_.inherit((\n\n    /**\n     * @constructor\n     * @param {Function} type -\n     * @param {Object} parent -\n     * @param {Array} populate -\n     */\n    PropertyList = function PostmanPropertyList (type, parent, populate) {\n        // @todo add this test sometime later\n        // if (!type) {\n        //     throw new Error('postman-collection: cannot initialise a list without a type parameter');\n        // }\n\n        PropertyList.super_.call(this); // call super with appropriate options\n\n        this.setParent(parent); // save reference to parent\n        _.assign(this, /** @lends PropertyList.prototype */ {\n            /**\n             * @private\n             * @type {Array}\n             */\n            members: this.members || [],\n\n            /**\n             * @private\n             * @type {Object}\n             * @note This should not be used, and it's not guaranteed to be in sync with the actual list of members.\n             */\n            reference: this.reference || {},\n\n            /**\n             * @private\n             * @type {Function}\n             */\n            Type: type\n        });\n\n        // if the type this list holds has its own index key, then use the same\n        _.getOwn(type, '_postman_propertyIndexKey') && (this._postman_listIndexKey = type._postman_propertyIndexKey);\n\n        // if the type has case sensitivity flags, set the same\n        _.getOwn(type, '_postman_propertyIndexCaseInsensitive') && (this._postman_listIndexCaseInsensitive =\n            type._postman_propertyIndexCaseInsensitive);\n\n        // if the type allows multiple values, set the flag\n        _.getOwn(type, '_postman_propertyAllowsMultipleValues') && (this._postman_listAllowsMultipleValues =\n            type._postman_propertyAllowsMultipleValues);\n\n        // prepopulate\n        populate && this.populate(populate);\n    }), PropertyBase);\n\n_.assign(PropertyList.prototype, /** @lends PropertyList.prototype */ {\n\n    /**\n     * Indicates that this element contains a number of other elements.\n     *\n     * @private\n     */\n    _postman_propertyIsList: true,\n\n    /**\n     * Holds the attribute to index this PropertyList by. Default: 'id'\n     *\n     * @private\n     * @type {String}\n     */\n    _postman_listIndexKey: DEFAULT_INDEX_ATTR,\n\n    /**\n     * Holds the attribute whether indexing of this list is case sensitive or not\n     *\n     * @private\n     * @type {String}\n     */\n    _postman_listIndexCaseInsensitive: DEFAULT_INDEXCASE_ATTR,\n\n    /**\n     * Holds the attribute whether exporting the index retains duplicate index items\n     *\n     * @private\n     * @type {String}\n     */\n    _postman_listAllowsMultipleValues: DEFAULT_INDEXMULTI_ATTR,\n\n    /**\n     * Insert an element at the end of this list. When a reference member specified via second parameter is found, the\n     * member is inserted at an index before the reference member.\n     *\n     * @param {PropertyList.Type} item -\n     * @param {PropertyList.Type|String} [before] -\n     */\n    insert: function (item, before) {\n        if (!_.isObject(item)) { return; } // do not proceed on empty param\n\n        var duplicate = this.indexOf(item),\n            index;\n\n        // remove from previous list\n        PropertyList.isPropertyList(item[__PARENT]) && (item[__PARENT] !== this) && item[__PARENT].remove(item);\n        // inject the parent reference\n        _.assignHidden(item, __PARENT, this);\n\n        // ensure that we do not double insert things into member array\n        (duplicate > -1) && this.members.splice(duplicate, 1);\n        // find the position of the reference element\n        before && (before = this.indexOf(before));\n\n        // inject to the members array ata position or at the end in case no item is there for reference\n        (before > -1) ? this.members.splice(before, 0, item) : this.members.push(item);\n\n        // store reference by id, so create the index string. we first ensure that the index value is truthy and then\n        // recheck that the string conversion of the same is truthy as well.\n        if ((index = item[this._postman_listIndexKey]) && (index = String(index))) {\n            // desensitise case, if the property needs it to be\n            this._postman_listIndexCaseInsensitive && (index = index.toLowerCase());\n\n            // if multiple values are allowed, the reference may contain an array of items, mapped to an index.\n            if (this._postman_listAllowsMultipleValues && Object.hasOwnProperty.call(this.reference, index)) {\n                // if the value is not an array, convert it to an array.\n                !_.isArray(this.reference[index]) && (this.reference[index] = [this.reference[index]]);\n\n                // add the item to the array of items corresponding to this index\n                this.reference[index].push(item);\n            }\n            else {\n                this.reference[index] = item;\n            }\n        }\n    },\n\n    /**\n     * Insert an element at the end of this list. When a reference member specified via second parameter is found, the\n     * member is inserted at an index after the reference member.\n     *\n     * @param {PropertyList.Type} item -\n     * @param {PropertyList.Type|String} [after] -\n     */\n    insertAfter: function (item, after) {\n        // convert item to positional reference\n        return this.insert(item, this.idx(this.indexOf(after) + 1));\n    },\n\n    /**\n     * Adds or moves an item to the end of this list.\n     *\n     * @param {PropertyList.Type} item -\n     */\n    append: function (item) {\n        return this.insert(item);\n    },\n\n    /**\n     * Adds or moves an item to the beginning of this list.\n     *\n     * @param {PropertyList.Type} item -\n     */\n    prepend: function (item) {\n        return this.insert(item, this.idx(0));\n    },\n\n    /**\n     * Add an item or item definition to this list.\n     *\n     * @param {Object|PropertyList.Type} item -\n     * @todo\n     * - remove item from original parent if already it has a parent\n     * - validate that the original parent's constructor matches this parent's constructor\n     */\n    add: function (item) {\n        // do not proceed on empty param, but empty strings are in fact valid.\n        // eslint-disable-next-line lodash/prefer-is-nil\n        if (_.isNull(item) || _.isUndefined(item) || _.isNaN(item)) { return; }\n\n        // create new instance of the item based on the type specified if it is not already\n        this.insert((item.constructor === this.Type) ? item :\n            // if the property has a create static function, use it.\n            // eslint-disable-next-line prefer-spread\n            (_.has(this.Type, 'create') ? this.Type.create.apply(this.Type, arguments) : new this.Type(item)));\n    },\n\n    /**\n     * Add an item or update an existing item\n     *\n     * @param {PropertyList.Type} item -\n     * @returns {?Boolean}\n     */\n    upsert: function (item) {\n        // do not proceed on empty param, but empty strings are in fact valid.\n        if (_.isNil(item) || _.isNaN(item)) { return null; }\n\n        var indexer = this._postman_listIndexKey,\n            existing = this.one(item[indexer]);\n\n        if (existing) {\n            if (!_.isFunction(existing.update)) {\n                throw new Error('collection: unable to upsert into a list of Type that does not support .update()');\n            }\n            existing.update(item);\n\n            return false;\n        }\n\n        // since there is no existing item, just add a new one\n        this.add(item);\n\n        return true; // indicate added\n    },\n\n    /**\n     * Removes all elements from the PropertyList for which the predicate returns truthy.\n     *\n     * @param {Function|String|PropertyList.Type} predicate -\n     * @param {Object} context Optional context to bind the predicate to.\n     */\n    remove: function (predicate, context) {\n        var match; // to be used if predicate is an ID\n\n        !context && (context = this);\n\n        if (_.isString(predicate)) {\n            // if predicate is id, then create a function to remove that\n            // need to take care of case sensitivity as well :/\n            match = this._postman_listIndexCaseInsensitive ? predicate.toLowerCase() : predicate;\n            predicate = function (item) {\n                var id = item[this._postman_listIndexKey];\n\n                this._postman_listIndexCaseInsensitive && (id = id.toLowerCase());\n\n                return id === match;\n            }.bind(this);\n        }\n        else if (predicate instanceof this.Type) {\n            // in case an object reference is sent, prepare it for removal using direct reference comparison\n            match = predicate;\n            predicate = function (item) {\n                return (item === match);\n            };\n        }\n\n        _.isFunction(predicate) && _.remove(this.members, function (item) {\n            var index;\n\n            if (predicate.apply(context, arguments)) {\n                if ((index = item[this._postman_listIndexKey]) && (index = String(index))) {\n                    this._postman_listIndexCaseInsensitive && (index = index.toLowerCase());\n\n                    if (this._postman_listAllowsMultipleValues && _.isArray(this.reference[index])) {\n                        // since we have an array of multiple values, remove only the value for which the\n                        // predicate returned truthy. If the array becomes empty, just delete it.\n                        _.remove(this.reference[index], function (each) {\n                            return each === item;\n                        });\n\n                        // If the array becomes empty, remove it\n                        /* istanbul ignore next */\n                        (this.reference[index].length === 0) && (delete this.reference[index]);\n\n                        // If the array contains only one element, remove the array, and assign the element\n                        // as the reference value\n                        (this.reference[index].length === 1) && (this.reference[index] = this.reference[index][0]);\n                    }\n                    else {\n                        delete this.reference[index];\n                    }\n                }\n                delete item[__PARENT]; // unlink from its parent\n\n                return true;\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Removes all items in the list\n     */\n    clear: function () {\n        // we unlink every member from it's parent (assuming this is their parent)\n        this.all().forEach(PropertyList._unlinkItemFromParent);\n\n        this.members.length = 0; // remove all items from list\n\n        // now we remove all items from index reference\n        Object.keys(this.reference).forEach(function (key) {\n            delete this.reference[key];\n        }.bind(this));\n    },\n\n    /**\n     * Load one or more items\n     *\n     * @param {Object|Array} items -\n     */\n    populate: function (items) {\n        // if Type supports parsing of string headers then do it before adding it.\n        _.isString(items) && _.isFunction(this.Type.parse) && (items = this.Type.parse(items));\n        // add a single item or an array of items.\n        _.forEach(_.isArray(items) ? items :\n            // if population is not an array, we send this as single item in an array or send each property separately\n            // if the core Type supports Type.create\n            ((_.isPlainObject(items) && _.has(this.Type, 'create')) ? items : [items]), this.add.bind(this));\n    },\n\n    /**\n     * Clears the list and adds new items.\n     *\n     * @param {Object|Array} items -\n     */\n    repopulate: function (items) {\n        this.clear();\n        this.populate(items);\n    },\n\n    /**\n     * Add or update values from a source list.\n     *\n     * @param {PropertyList|Array} source -\n     * @param {Boolean} [prune=false] Setting this to `true` will cause the extra items from the list to be deleted\n     */\n    assimilate: function (source, prune) {\n        var members = PropertyList.isPropertyList(source) ? source.members : source,\n            list = this,\n            indexer = list._postman_listIndexKey,\n            sourceKeys = {}; // keeps track of added / updated keys for later exclusion\n\n        if (!_.isArray(members)) {\n            return;\n        }\n\n        members.forEach(function (item) {\n            /* istanbul ignore if */\n            if (!(item && _.has(item, indexer))) { return; }\n            list.upsert(item);\n            sourceKeys[item[indexer]] = true;\n        });\n\n        // now remove any variable that is not in source object\n        // @note - using direct `this.reference` list of keys here so that we can mutate the list while iterating\n        // on it\n        if (prune) {\n            _.forEach(list.reference, function (value, key) {\n                if (_.has(sourceKeys, key)) { return; } // de not delete if source obj has this variable\n                list.remove(key); // use PropertyList functions to remove so that the .members array is cleared too\n            });\n        }\n    },\n\n    /**\n     * Returns a map of all items.\n     *\n     * @returns {Object}\n     */\n    all: function () {\n        return _.clone(this.members);\n    },\n\n    /**\n     * Get Item in this list by `ID` reference. If multiple values are allowed, the last value is returned.\n     *\n     * @param {String} id -\n     * @returns {PropertyList.Type}\n     */\n    one: function (id) {\n        var val = this.reference[this._postman_listIndexCaseInsensitive ? String(id).toLowerCase() : id];\n\n        if (this._postman_listAllowsMultipleValues && Array.isArray(val)) {\n            return val.length ? val[val.length - 1] :\n                /* istanbul ignore next */\n                undefined;\n        }\n\n        return val;\n    },\n\n    /**\n     * Get the value of an item in this list. This is similar to {@link PropertyList.one} barring the fact that it\n     * returns the value of the underlying type of the list content instead of the item itself.\n     *\n     * @param {String|Function} key -\n     * @returns {PropertyList.Type|*}\n     */\n    get: function (key) {\n        var member = this.one(key);\n\n        if (!member) { return; } // eslint-disable-line getter-return\n\n        return member.valueOf();\n    },\n\n    /**\n     * Iterate on each item of this list.\n     *\n     * @param {Function} iterator -\n     * @param {Object} context -\n     */\n    each: function (iterator, context) {\n        _.forEach(this.members, _.isFunction(iterator) ? iterator.bind(context || this.__parent) : iterator);\n    },\n\n    /**\n     * @param {Function} rule -\n     * @param {Object} context -\n     */\n    filter: function (rule, context) {\n        return _.filter(this.members, _.isFunction(rule) && _.isObject(context) ? rule.bind(context) : rule);\n    },\n\n    /**\n     * Find an item within the item group\n     *\n     * @param {Function} rule -\n     * @param {Object} [context] -\n     * @returns {Item|ItemGroup}\n     */\n    find: function (rule, context) {\n        return _.find(this.members, _.isFunction(rule) && _.isObject(context) ? rule.bind(context) : rule);\n    },\n\n    /**\n     * Iterates over the property list.\n     *\n     * @param {Function} iterator Function to call on each item.\n     * @param {Object} context Optional context, defaults to the PropertyList itself.\n     */\n    map: function (iterator, context) {\n        return _.map(this.members, _.isFunction(iterator) ? iterator.bind(context || this) : iterator);\n    },\n\n    /**\n     * Iterates over the property list and accumulates the result.\n     *\n     * @param {Function} iterator Function to call on each item.\n     * @param {*} accumulator Accumulator initial value\n     * @param {Object} context Optional context, defaults to the PropertyList itself.\n     */\n    reduce: function (iterator, accumulator, context) {\n        return _.reduce(this.members, _.isFunction(iterator) ?\n            iterator.bind(context || this) :\n            /* istanbul ignore next */\n            iterator\n        , accumulator);\n    },\n\n    /**\n     * Returns the length of the PropertyList\n     *\n     * @returns {Number}\n     */\n    count: function () {\n        return this.members.length;\n    },\n\n    /**\n     * Get a member of this list by it's index\n     *\n     * @param {Number} index -\n     * @returns {PropertyList.Type}\n     */\n    idx: function (index) {\n        return this.members[index];\n    },\n\n    /**\n     * Find the index of an item in this list\n     *\n     * @param {String|Object} item -\n     * @returns {Number}\n     */\n    indexOf: function (item) {\n        return this.members.indexOf(_.isString(item) ? (item = this.one(item)) : item);\n    },\n\n    /**\n     * Check whether an item exists in this list\n     *\n     * @param {String|PropertyList.Type} item -\n     * @param {*=} value -\n     * @returns {Boolean}\n     */\n    has: function (item, value) {\n        var match,\n            val,\n            i;\n\n        match = _.isString(item) ?\n            this.reference[this._postman_listIndexCaseInsensitive ? item.toLowerCase() : item] :\n            this.filter(function (member) {\n                return member === item;\n            });\n\n        // If we don't have a match, there's nothing to do\n        if (!match) { return false; }\n\n        // if no value is provided, just check if item exists\n        if (arguments.length === 1) {\n            return Boolean(_.isArray(match) ? match.length : match);\n        }\n\n        // If this property allows multiple values and we get an array, we need to iterate through it and see\n        // if any element matches.\n        if (this._postman_listAllowsMultipleValues && _.isArray(match)) {\n            for (i = 0; i < match.length; i++) {\n                // use the value of the current element\n                val = _.isFunction(match[i].valueOf) ? match[i].valueOf() :\n                    /* istanbul ignore next */\n                    match[i];\n\n                if (val === value) { return true; }\n            }\n\n            // no matches were found, so return false here.\n            return false;\n        }\n\n        // We didn't have an array, so just check if the matched value equals the provided value.\n        _.isFunction(match.valueOf) && (match = match.valueOf());\n\n        return match === value;\n    },\n\n    /**\n     * Iterates over all parents of the property list\n     *\n     * @param {Function} iterator -\n     * @param {Object=} [context] -\n     */\n    eachParent: function (iterator, context) {\n        // validate parameters\n        if (!_.isFunction(iterator)) { return; }\n        !context && (context = this);\n\n        var parent = this.__parent,\n            prev;\n\n        // iterate till there is no parent\n        while (parent) {\n            // call iterator with the parent and previous parent\n            iterator.call(context, parent, prev);\n\n            // update references\n            prev = parent;\n            parent = parent.__parent;\n        }\n    },\n\n    /**\n     * Converts a list of Properties into an object where key is `_postman_propertyIndexKey` and value is determined\n     * by the `valueOf` function\n     *\n     * @param {?Boolean} [excludeDisabled=false] - When set to true, disabled properties are excluded from the resultant\n     * object.\n     * @param {?Boolean} [caseSensitive] - When set to true, properties are treated strictly as per their original\n     * case. The default value for this property also depends on the case insensitivity definition of the current\n     * property.\n     * @param {?Boolean} [multiValue=false] - When set to true, only the first value of a multi valued property is\n     * returned.\n     * @param {Boolean} [sanitizeKeys=false] - When set to true, properties with falsy keys are removed.\n     * @todo Change the function signature to an object of options instead of the current structure.\n     * @returns {Object}\n     */\n    toObject: function (excludeDisabled, caseSensitive, multiValue, sanitizeKeys) {\n        var obj = {}, // create transformation data accumulator\n\n            // gather all the switches of the list\n            key = this._postman_listIndexKey,\n            sanitiseKeys = this._postman_sanitizeKeys || sanitizeKeys,\n            sensitive = !this._postman_listIndexCaseInsensitive || caseSensitive,\n            multivalue = this._postman_listAllowsMultipleValues || multiValue;\n\n        // iterate on each member to create the transformation object\n        this.each(function (member) {\n            // Bail out for the current member if ANY of the conditions below is true:\n            // 1. The member is falsy.\n            // 2. The member does not have the specified property list index key.\n            // 3. The member is disabled and disabled properties have to be ignored.\n            // 4. The member has a falsy key, and sanitize is true.\n            if (!member || !_.has(member, key) || (excludeDisabled && member.disabled) ||\n                (sanitiseKeys && !member[key])) {\n                return;\n            }\n\n            // based on case sensitivity settings, we get the property name of the item\n            var prop = sensitive ? member[key] : String(member[key]).toLowerCase();\n\n            // now, if transformation object already has a member with same property name, we either overwrite it or\n            // append to an array of values based on multi-value support\n            if (multivalue && _.has(obj, prop)) {\n                (!Array.isArray(obj[prop])) && (obj[prop] = [obj[prop]]);\n                obj[prop].push(member.valueOf());\n            }\n            else {\n                obj[prop] = member.valueOf();\n            }\n        });\n\n        return obj;\n    },\n\n    /**\n     * Adds ability to convert a list to a string provided it's underlying format has unparse function defined.\n     *\n     * @returns {String}\n     */\n    toString: function () {\n        if (this.Type.unparse) {\n            return this.Type.unparse(this.members);\n        }\n\n        return this.constructor ? this.constructor.prototype.toString.call(this) : '';\n    },\n\n    toJSON: function () {\n        if (!this.count()) {\n            return [];\n        }\n\n        return _.map(this.members, function (member) {\n            // use member.toJSON if it exists\n            if (!_.isEmpty(member) && _.isFunction(member.toJSON)) {\n                return member.toJSON();\n            }\n\n            return _.reduce(member, function (accumulator, value, key) {\n                if (value === undefined) { // true/false/null need to be preserved.\n                    return accumulator;\n                }\n\n                // Handle plurality of PropertyLists in the SDK vs the exported JSON.\n                // Basically, removes the trailing \"s\" from key if the value is a property list.\n                if (value && value._postman_propertyIsList && !value._postman_proprtyIsSerialisedAsPlural &&\n                    _.endsWith(key, 's')) {\n                    key = key.slice(0, -1);\n                }\n\n                // Handle 'PropertyBase's\n                if (value && _.isFunction(value.toJSON)) {\n                    accumulator[key] = value.toJSON();\n\n                    return accumulator;\n                }\n\n                // Handle Strings\n                if (_.isString(value)) {\n                    accumulator[key] = value;\n\n                    return accumulator;\n                }\n\n                // Everything else\n                accumulator[key] = _.cloneElement(value);\n\n                return accumulator;\n            }, {});\n        });\n    }\n});\n\n_.assign(PropertyList, /** @lends PropertyList */ {\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'PropertyList',\n\n    /**\n     * Removes child-parent links for the provided PropertyList member.\n     *\n     * @param {Property} item - The property for which to perform parent de-linking.\n     * @private\n     */\n    _unlinkItemFromParent: function (item) {\n        item.__parent && (delete item.__parent); // prevents V8 from making unnecessary look-ups if there is no __parent\n    },\n\n    /**\n     * Checks whether an object is a PropertyList\n     *\n     * @param {*} obj -\n     * @returns {Boolean}\n     */\n    isPropertyList: function (obj) {\n        return Boolean(obj) && ((obj instanceof PropertyList) ||\n            _.inSuperChain(obj.constructor, '_postman_propertyName', PropertyList._postman_propertyName));\n    }\n});\n\nmodule.exports = {\n    PropertyList\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}