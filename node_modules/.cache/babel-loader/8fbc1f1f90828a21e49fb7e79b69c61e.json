{"ast":null,"code":"/*!\n 2022 Jason Mulligan <jason.mulligan@avoidwork.com>\n @version 8.0.7\n*/\n!function (i, t) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define(t) : (i = \"undefined\" != typeof globalThis ? globalThis : i || self).filesize = t();\n}(this, function () {\n  \"use strict\";\n\n  var i = /^(b|B)$/,\n    t = {\n      iec: {\n        bits: [\"bit\", \"Kibit\", \"Mibit\", \"Gibit\", \"Tibit\", \"Pibit\", \"Eibit\", \"Zibit\", \"Yibit\"],\n        bytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\n      },\n      jedec: {\n        bits: [\"bit\", \"Kbit\", \"Mbit\", \"Gbit\", \"Tbit\", \"Pbit\", \"Ebit\", \"Zbit\", \"Ybit\"],\n        bytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n      }\n    },\n    e = {\n      iec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\n      jedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\n    },\n    o = {\n      floor: Math.floor,\n      ceil: Math.ceil\n    };\n  function n(n) {\n    var r,\n      a,\n      b,\n      s,\n      l,\n      c,\n      f,\n      d,\n      p,\n      u,\n      h,\n      B,\n      g,\n      y,\n      M,\n      m,\n      v,\n      x,\n      N,\n      T,\n      j,\n      E = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n      w = [],\n      P = 0;\n    if (isNaN(n)) throw new TypeError(\"Invalid number\");\n    if (b = !0 === E.bits, M = !0 === E.unix, B = !0 === E.pad, a = E.base || 10, g = void 0 !== E.round ? E.round : M ? 1 : 2, f = void 0 !== E.locale ? E.locale : \"\", d = E.localeOptions || {}, m = void 0 !== E.separator ? E.separator : \"\", v = void 0 !== E.spacer ? E.spacer : M ? \"\" : \" \", N = E.symbols || {}, x = 2 === a ? E.standard || \"iec\" : \"jedec\", h = E.output || \"string\", l = !0 === E.fullform, c = E.fullforms instanceof Array ? E.fullforms : [], r = void 0 !== E.exponent ? E.exponent : -1, T = o[E.roundingMethod] || Math.round, p = (u = Number(n)) < 0, s = a > 2 ? 1e3 : 1024, j = !1 === isNaN(E.precision) ? parseInt(E.precision, 10) : 0, p && (u = -u), (-1 === r || isNaN(r)) && (r = Math.floor(Math.log(u) / Math.log(s))) < 0 && (r = 0), r > 8 && (j > 0 && (j += 8 - r), r = 8), \"exponent\" === h) return r;\n    if (0 === u) w[0] = 0, y = w[1] = M ? \"\" : t[x][b ? \"bits\" : \"bytes\"][r];else {\n      P = u / (2 === a ? Math.pow(2, 10 * r) : Math.pow(1e3, r)), b && (P *= 8) >= s && r < 8 && (P /= s, r++);\n      var k = Math.pow(10, r > 0 ? g : 0);\n      w[0] = T(P * k) / k, w[0] === s && r < 8 && void 0 === E.exponent && (w[0] = 1, r++), y = w[1] = 10 === a && 1 === r ? b ? \"kbit\" : \"kB\" : t[x][b ? \"bits\" : \"bytes\"][r], M && (w[1] = w[1].charAt(0), i.test(w[1]) && (w[0] = Math.floor(w[0]), w[1] = \"\"));\n    }\n    if (p && (w[0] = -w[0]), j > 0 && (w[0] = w[0].toPrecision(j)), w[1] = N[w[1]] || w[1], !0 === f ? w[0] = w[0].toLocaleString() : f.length > 0 ? w[0] = w[0].toLocaleString(f, d) : m.length > 0 && (w[0] = w[0].toString().replace(\".\", m)), B && !1 === Number.isInteger(w[0]) && g > 0) {\n      var G = m || \".\",\n        K = w[0].toString().split(G),\n        S = K[1] || \"\",\n        Y = S.length,\n        Z = g - Y;\n      w[0] = \"\".concat(K[0]).concat(G).concat(S.padEnd(Y + Z, \"0\"));\n    }\n    return l && (w[1] = c[r] ? c[r] : e[x][r] + (b ? \"bit\" : \"byte\") + (1 === w[0] ? \"\" : \"s\")), \"array\" === h ? w : \"object\" === h ? {\n      value: w[0],\n      symbol: w[1],\n      exponent: r,\n      unit: y\n    } : w.join(v);\n  }\n  return n.partial = function (i) {\n    return function (t) {\n      return n(t, i);\n    };\n  }, n;\n});","map":{"version":3,"mappings":"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","names":["b","symbol","iec","bits","bytes","jedec","fullform","roundingFuncs","floor","Math","ceil","filesize","arg","e","base","full","fullforms","locale","localeOptions","neg","num","output","pad","round","u","unix","separator","spacer","standard","symbols","roundingFunc","precision","descriptor","result","val","isNaN","TypeError","Array","exponent","roundingMethod","Number","parseInt","log","pow","p","charAt","test","toPrecision","toLocaleString","length","toString","replace","isInteger","x","tmp","split","s","l","n","padEnd","value","unit","join","partial","opt"],"sources":["../src/filesize.js"],"sourcesContent":["const b = /^(b|B)$/,\r\n\tsymbol = {\r\n\t\tiec: {\r\n\t\t\tbits: [\"bit\", \"Kibit\", \"Mibit\", \"Gibit\", \"Tibit\", \"Pibit\", \"Eibit\", \"Zibit\", \"Yibit\"],\r\n\t\t\tbytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\r\n\t\t},\r\n\t\tjedec: {\r\n\t\t\tbits: [\"bit\", \"Kbit\", \"Mbit\", \"Gbit\", \"Tbit\", \"Pbit\", \"Ebit\", \"Zbit\", \"Ybit\"],\r\n\t\t\tbytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\r\n\t\t}\r\n\t},\r\n\tfullform = {\r\n\t\tiec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\r\n\t\tjedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\r\n\t},\r\n\troundingFuncs = {\r\n\t\tfloor: Math.floor,\r\n\t\tceil: Math.ceil\r\n\t};\r\n\r\n/**\r\n * filesize\r\n *\r\n * @method filesize\r\n * @param  {Mixed}   arg        String, Int or Float to transform\r\n * @param  {Object}  descriptor [Optional] Flags\r\n * @return {String}             Readable file size String\r\n */\r\nfunction filesize (arg, descriptor = {}) {\r\n\tlet result = [],\r\n\t\tval = 0,\r\n\t\te, base, bits, ceil, full, fullforms, locale, localeOptions, neg, num, output, pad, round, u, unix, separator, spacer, standard, symbols, roundingFunc, precision;\r\n\r\n\tif (isNaN(arg)) {\r\n\t\tthrow new TypeError(\"Invalid number\");\r\n\t}\r\n\r\n\tbits = descriptor.bits === true;\r\n\tunix = descriptor.unix === true;\r\n\tpad = descriptor.pad === true;\r\n\tbase = descriptor.base || 10;\r\n\tround = descriptor.round !== void 0 ? descriptor.round : unix ? 1 : 2;\r\n\tlocale = descriptor.locale !== void 0 ? descriptor.locale : \"\";\r\n\tlocaleOptions = descriptor.localeOptions || {};\r\n\tseparator = descriptor.separator !== void 0 ? descriptor.separator : \"\";\r\n\tspacer = descriptor.spacer !== void 0 ? descriptor.spacer : unix ? \"\" : \" \";\r\n\tsymbols = descriptor.symbols || {};\r\n\tstandard = base === 2 ? descriptor.standard || \"iec\" : \"jedec\";\r\n\toutput = descriptor.output || \"string\";\r\n\tfull = descriptor.fullform === true;\r\n\tfullforms = descriptor.fullforms instanceof Array ? descriptor.fullforms : [];\r\n\te = descriptor.exponent !== void 0 ? descriptor.exponent : -1;\r\n\troundingFunc = roundingFuncs[descriptor.roundingMethod] || Math.round;\r\n\tnum = Number(arg);\r\n\tneg = num < 0;\r\n\tceil = base > 2 ? 1000 : 1024;\r\n\tprecision = isNaN(descriptor.precision) === false ? parseInt(descriptor.precision, 10) : 0;\r\n\r\n\t// Flipping a negative number to determine the size\r\n\tif (neg) {\r\n\t\tnum = -num;\r\n\t}\r\n\r\n\t// Determining the exponent\r\n\tif (e === -1 || isNaN(e)) {\r\n\t\te = Math.floor(Math.log(num) / Math.log(ceil));\r\n\r\n\t\tif (e < 0) {\r\n\t\t\te = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t// Exceeding supported length, time to reduce & multiply\r\n\tif (e > 8) {\r\n\t\tif (precision > 0) {\r\n\t\t\tprecision += 8 - e;\r\n\t\t}\r\n\r\n\t\te = 8;\r\n\t}\r\n\r\n\tif (output === \"exponent\") {\r\n\t\treturn e;\r\n\t}\r\n\r\n\t// Zero is now a special case because bytes divide by 1\r\n\tif (num === 0) {\r\n\t\tresult[0] = 0;\r\n\t\tu = result[1] = unix ? \"\" : symbol[standard][bits ? \"bits\" : \"bytes\"][e];\r\n\t} else {\r\n\t\tval = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1000, e));\r\n\r\n\t\tif (bits) {\r\n\t\t\tval = val * 8;\r\n\r\n\t\t\tif (val >= ceil && e < 8) {\r\n\t\t\t\tval = val / ceil;\r\n\t\t\t\te++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst p = Math.pow(10, e > 0 ? round : 0);\r\n\t\tresult[0] = roundingFunc(val * p) / p;\r\n\r\n\t\tif (result[0] === ceil && e < 8 && descriptor.exponent === void 0) {\r\n\t\t\tresult[0] = 1;\r\n\t\t\te++;\r\n\t\t}\r\n\r\n\t\tu = result[1] = base === 10 && e === 1 ? bits ? \"kbit\" : \"kB\" : symbol[standard][bits ? \"bits\" : \"bytes\"][e];\r\n\r\n\t\tif (unix) {\r\n\t\t\tresult[1] = result[1].charAt(0);\r\n\r\n\t\t\tif (b.test(result[1])) {\r\n\t\t\t\tresult[0] = Math.floor(result[0]);\r\n\t\t\t\tresult[1] = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Decorating a 'diff'\r\n\tif (neg) {\r\n\t\tresult[0] = -result[0];\r\n\t}\r\n\r\n\t// Setting optional precision\r\n\tif (precision > 0) {\r\n\t\tresult[0] = result[0].toPrecision(precision);\r\n\t}\r\n\r\n\t// Applying custom symbol\r\n\tresult[1] = symbols[result[1]] || result[1];\r\n\r\n\tif (locale === true) {\r\n\t\tresult[0] = result[0].toLocaleString();\r\n\t} else if (locale.length > 0) {\r\n\t\tresult[0] = result[0].toLocaleString(locale, localeOptions);\r\n\t} else if (separator.length > 0) {\r\n\t\tresult[0] = result[0].toString().replace(\".\", separator);\r\n\t}\r\n\r\n\tif (pad && Number.isInteger(result[0]) === false && round > 0) {\r\n\t\tconst x = separator || \".\",\r\n\t\t\ttmp = result[0].toString().split(x),\r\n\t\t\ts = tmp[1] || \"\",\r\n\t\t\tl = s.length,\r\n\t\t\tn = round - l;\r\n\r\n\t\tresult[0] = `${tmp[0]}${x}${s.padEnd(l + n, \"0\")}`;\r\n\t}\r\n\r\n\tif (full) {\r\n\t\tresult[1] = fullforms[e] ? fullforms[e] : fullform[standard][e] + (bits ? \"bit\" : \"byte\") + (result[0] === 1 ? \"\" : \"s\");\r\n\t}\r\n\r\n\t// Returning Array, Object, or String (default)\r\n\treturn output === \"array\" ? result : output === \"object\" ? {value: result[0], symbol: result[1], exponent: e, unit: u} : result.join(spacer);\r\n}\r\n\r\n// Partial application for functional programming\r\nfilesize.partial = opt => arg => filesize(arg, opt);\r\n\r\nexport default filesize;\r\n"]},"metadata":{},"sourceType":"script"}