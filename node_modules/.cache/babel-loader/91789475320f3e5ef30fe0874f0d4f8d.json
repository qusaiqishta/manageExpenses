{"ast":null,"code":"var _ = require('../util').lodash,\n  __PARENT = '__parent',\n  PropertyBase; // constructor\n\n/**\n * @typedef PropertyBase.definition\n * @property {String|Description} [description]\n */\n/**\n * Base of all properties in Postman Collection. It defines the root for all standalone properties for postman\n * collection.\n *\n * @constructor\n * @param {PropertyBase.definition} definition -\n */\nPropertyBase = function PropertyBase(definition) {\n  // In case definition object is missing, there is no point moving forward. Also if the definition is basic string\n  // we do not need to do anything with it.\n  if (!definition || typeof definition === 'string') {\n    return;\n  }\n\n  // call the meta extraction functions to create the object where all keys that are prefixed with underscore can be\n  // stored. more details on that can be retrieved from the propertyExtractMeta function itself.\n  // @todo: make this a closed function to do getter and setter which is non enumerable\n  var src = definition && definition.info || definition,\n    meta = _(src).pickBy(PropertyBase.propertyIsMeta).mapKeys(PropertyBase.propertyUnprefixMeta).value();\n  if (_.keys(meta).length) {\n    this._ = _.isObject(this._) ? /* istanbul ignore next */\n    _.mergeDefined(this._, meta) : meta;\n  }\n};\n_.assign(PropertyBase.prototype, /** @lends PropertyBase.prototype */{\n  /**\n   * Invokes the given iterator for every parent in the parent chain of the given element.\n   *\n   * @param {Object} options - A set of options for the parent chain traversal.\n   * @param {?Boolean} [options.withRoot=false] - Set to true to include the collection object as well.\n   * @param {Function} iterator - The function to call for every parent in the ancestry chain.\n   * @todo Cache the results\n   */\n  forEachParent(options, iterator) {\n    _.isFunction(options) && (iterator = options, options = {});\n    if (!_.isFunction(iterator) || !_.isObject(options)) {\n      return;\n    }\n    var parent = this.parent(),\n      grandparent = parent && _.isFunction(parent.parent) && parent.parent();\n    while (parent && (grandparent || options.withRoot)) {\n      iterator(parent);\n      parent = grandparent;\n      grandparent = grandparent && _.isFunction(grandparent.parent) && grandparent.parent();\n    }\n  },\n  /**\n   * Tries to find the given property locally, and then proceeds to lookup in each parent,\n   * going up the chain as necessary. Lookup will continue until `customizer` returns a truthy value. If used\n   * without a customizer, the lookup will stop at the first parent that contains the property.\n   *\n   * @param {String} property -\n   * @param {Function} [customizer] -\n   * @returns {*|undefined}\n   */\n  findInParents(property, customizer) {\n    var owner = this.findParentContaining(property, customizer);\n    return owner ? owner[property] : undefined;\n  },\n  /**\n   * Looks up the closest parent which has a truthy value for the given property. Lookup will continue\n   * until `customizer` returns a truthy value. If used without a customizer,\n   * the lookup will stop at the first parent that contains the property.\n   *\n   * @private\n   * @param {String} property -\n   * @param {Function} [customizer] -\n   * @returns {PropertyBase|undefined}\n   */\n  findParentContaining(property, customizer) {\n    var parent = this;\n\n    // if customizer is present test with it\n    if (customizer) {\n      customizer = customizer.bind(this);\n      do {\n        // else check for existence\n        if (customizer(parent)) {\n          return parent;\n        }\n        parent = parent.__parent;\n      } while (parent);\n    }\n\n    // else check for existence\n    else {\n      do {\n        if (parent[property]) {\n          return parent;\n        }\n        parent = parent.__parent;\n      } while (parent);\n    }\n  },\n  /**\n   * Returns the JSON representation of a property, which conforms to the way it is defined in a collection.\n   * You can use this method to get the instantaneous representation of any property, including a {@link Collection}.\n   */\n  toJSON() {\n    return _.reduce(this, function (accumulator, value, key) {\n      if (value === undefined) {\n        // true/false/null need to be preserved.\n        return accumulator;\n      }\n\n      // Handle plurality of PropertyLists in the SDK vs the exported JSON.\n      // Basically, removes the trailing \"s\" from key if the value is a property list.\n      // eslint-disable-next-line max-len\n      if (value && value._postman_propertyIsList && !value._postman_proprtyIsSerialisedAsPlural && _.endsWith(key, 's')) {\n        key = key.slice(0, -1);\n      }\n\n      // Handle 'PropertyBase's\n      if (value && _.isFunction(value.toJSON)) {\n        accumulator[key] = value.toJSON();\n        return accumulator;\n      }\n\n      // Handle Strings\n      if (_.isString(value)) {\n        accumulator[key] = value;\n        return accumulator;\n      }\n\n      // Everything else\n      accumulator[key] = _.cloneElement(value);\n      return accumulator;\n    }, {});\n  },\n  /**\n   * Returns the meta keys associated with the property\n   *\n   * @returns {*}\n   */\n  meta() {\n    return arguments.length ? _.pick(this._, Array.prototype.slice.apply(arguments)) : _.cloneDeep(this._);\n  },\n  /**\n   * Returns the parent of item\n   *\n   * @returns {*|undefined}\n   */\n  parent() {\n    // @todo return grandparent only if it is a list\n    return this && this.__parent && (this.__parent.__parent || this.__parent) || undefined;\n  },\n  /**\n   * Accepts an object and sets it as the parent of the current property.\n   *\n   * @param {Object} parent The object to set as parent.\n   * @private\n   */\n  setParent(parent) {\n    _.assignHidden(this, __PARENT, parent);\n  }\n});\n_.assign(PropertyBase, /** @lends PropertyBase */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'PropertyBase',\n  /**\n   * Filter function to check whether a key starts with underscore or not. These usually are the meta properties. It\n   * returns `true` if the criteria is matched.\n   *\n   * @param {*} value -\n   * @param {String} key -\n   *\n   * @returns {boolean}\n   */\n  propertyIsMeta: function (value, key) {\n    return _.startsWith(key, '_') && key !== '_';\n  },\n  /**\n   * Map function that removes the underscore prefix from an object key.\n   *\n   * @param {*} value -\n   * @param {String} key -\n   * @returns {String}\n   */\n  propertyUnprefixMeta: function (value, key) {\n    return _.trimStart(key, '_');\n  },\n  /**\n   * Static function which allows calling toJSON() on any object.\n   *\n   * @param {Object} obj -\n   * @returns {*}\n   */\n  toJSON: function (obj) {\n    return PropertyBase.prototype.toJSON.call(obj);\n  }\n});\nmodule.exports = {\n  PropertyBase\n};","map":{"version":3,"names":["_","require","lodash","__PARENT","PropertyBase","definition","src","info","meta","pickBy","propertyIsMeta","mapKeys","propertyUnprefixMeta","value","keys","length","isObject","mergeDefined","assign","prototype","forEachParent","options","iterator","isFunction","parent","grandparent","withRoot","findInParents","property","customizer","owner","findParentContaining","undefined","bind","__parent","toJSON","reduce","accumulator","key","_postman_propertyIsList","_postman_proprtyIsSerialisedAsPlural","endsWith","slice","isString","cloneElement","arguments","pick","Array","apply","cloneDeep","setParent","assignHidden","_postman_propertyName","startsWith","trimStart","obj","call","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/property-base.js"],"sourcesContent":["var _ = require('../util').lodash,\n\n    __PARENT = '__parent',\n\n    PropertyBase; // constructor\n\n/**\n * @typedef PropertyBase.definition\n * @property {String|Description} [description]\n */\n/**\n * Base of all properties in Postman Collection. It defines the root for all standalone properties for postman\n * collection.\n *\n * @constructor\n * @param {PropertyBase.definition} definition -\n */\nPropertyBase = function PropertyBase (definition) {\n    // In case definition object is missing, there is no point moving forward. Also if the definition is basic string\n    // we do not need to do anything with it.\n    if (!definition || typeof definition === 'string') { return; }\n\n    // call the meta extraction functions to create the object where all keys that are prefixed with underscore can be\n    // stored. more details on that can be retrieved from the propertyExtractMeta function itself.\n    // @todo: make this a closed function to do getter and setter which is non enumerable\n    var src = definition && definition.info || definition,\n        meta = _(src).pickBy(PropertyBase.propertyIsMeta).mapKeys(PropertyBase.propertyUnprefixMeta).value();\n\n    if (_.keys(meta).length) {\n        this._ = _.isObject(this._) ?\n            /* istanbul ignore next */\n            _.mergeDefined(this._, meta) :\n            meta;\n    }\n};\n\n_.assign(PropertyBase.prototype, /** @lends PropertyBase.prototype */ {\n\n    /**\n     * Invokes the given iterator for every parent in the parent chain of the given element.\n     *\n     * @param {Object} options - A set of options for the parent chain traversal.\n     * @param {?Boolean} [options.withRoot=false] - Set to true to include the collection object as well.\n     * @param {Function} iterator - The function to call for every parent in the ancestry chain.\n     * @todo Cache the results\n     */\n    forEachParent (options, iterator) {\n        _.isFunction(options) && (iterator = options, options = {});\n        if (!_.isFunction(iterator) || !_.isObject(options)) { return; }\n\n        var parent = this.parent(),\n            grandparent = parent && _.isFunction(parent.parent) && parent.parent();\n\n        while (parent && (grandparent || options.withRoot)) {\n            iterator(parent);\n            parent = grandparent;\n            grandparent = grandparent && _.isFunction(grandparent.parent) && grandparent.parent();\n        }\n    },\n\n    /**\n     * Tries to find the given property locally, and then proceeds to lookup in each parent,\n     * going up the chain as necessary. Lookup will continue until `customizer` returns a truthy value. If used\n     * without a customizer, the lookup will stop at the first parent that contains the property.\n     *\n     * @param {String} property -\n     * @param {Function} [customizer] -\n     * @returns {*|undefined}\n     */\n    findInParents (property, customizer) {\n        var owner = this.findParentContaining(property, customizer);\n\n        return owner ? owner[property] : undefined;\n    },\n\n    /**\n     * Looks up the closest parent which has a truthy value for the given property. Lookup will continue\n     * until `customizer` returns a truthy value. If used without a customizer,\n     * the lookup will stop at the first parent that contains the property.\n     *\n     * @private\n     * @param {String} property -\n     * @param {Function} [customizer] -\n     * @returns {PropertyBase|undefined}\n     */\n    findParentContaining (property, customizer) {\n        var parent = this;\n\n        // if customizer is present test with it\n        if (customizer) {\n            customizer = customizer.bind(this);\n\n            do {\n                // else check for existence\n                if (customizer(parent)) {\n                    return parent;\n                }\n\n                parent = parent.__parent;\n            } while (parent);\n        }\n\n        // else check for existence\n        else {\n            do {\n                if (parent[property]) {\n                    return parent;\n                }\n\n                parent = parent.__parent;\n            } while (parent);\n        }\n    },\n\n    /**\n     * Returns the JSON representation of a property, which conforms to the way it is defined in a collection.\n     * You can use this method to get the instantaneous representation of any property, including a {@link Collection}.\n     */\n    toJSON () {\n        return _.reduce(this, function (accumulator, value, key) {\n            if (value === undefined) { // true/false/null need to be preserved.\n                return accumulator;\n            }\n\n            // Handle plurality of PropertyLists in the SDK vs the exported JSON.\n            // Basically, removes the trailing \"s\" from key if the value is a property list.\n            // eslint-disable-next-line max-len\n            if (value && value._postman_propertyIsList && !value._postman_proprtyIsSerialisedAsPlural && _.endsWith(key, 's')) {\n                key = key.slice(0, -1);\n            }\n\n            // Handle 'PropertyBase's\n            if (value && _.isFunction(value.toJSON)) {\n                accumulator[key] = value.toJSON();\n\n                return accumulator;\n            }\n\n            // Handle Strings\n            if (_.isString(value)) {\n                accumulator[key] = value;\n\n                return accumulator;\n            }\n\n            // Everything else\n            accumulator[key] = _.cloneElement(value);\n\n            return accumulator;\n        }, {});\n    },\n\n    /**\n     * Returns the meta keys associated with the property\n     *\n     * @returns {*}\n     */\n    meta () {\n        return arguments.length ? _.pick(this._, Array.prototype.slice.apply(arguments)) : _.cloneDeep(this._);\n    },\n\n    /**\n     * Returns the parent of item\n     *\n     * @returns {*|undefined}\n     */\n    parent () {\n        // @todo return grandparent only if it is a list\n        return this && this.__parent && (this.__parent.__parent || this.__parent) || undefined;\n    },\n\n    /**\n     * Accepts an object and sets it as the parent of the current property.\n     *\n     * @param {Object} parent The object to set as parent.\n     * @private\n     */\n    setParent (parent) {\n        _.assignHidden(this, __PARENT, parent);\n    }\n});\n\n_.assign(PropertyBase, /** @lends PropertyBase */ {\n\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'PropertyBase',\n\n    /**\n     * Filter function to check whether a key starts with underscore or not. These usually are the meta properties. It\n     * returns `true` if the criteria is matched.\n     *\n     * @param {*} value -\n     * @param {String} key -\n     *\n     * @returns {boolean}\n     */\n    propertyIsMeta: function (value, key) {\n        return _.startsWith(key, '_') && (key !== '_');\n    },\n\n    /**\n     * Map function that removes the underscore prefix from an object key.\n     *\n     * @param {*} value -\n     * @param {String} key -\n     * @returns {String}\n     */\n    propertyUnprefixMeta: function (value, key) {\n        return _.trimStart(key, '_');\n    },\n\n    /**\n     * Static function which allows calling toJSON() on any object.\n     *\n     * @param {Object} obj -\n     * @returns {*}\n     */\n    toJSON: function (obj) {\n        return PropertyBase.prototype.toJSON.call(obj);\n    }\n});\n\nmodule.exports = {\n    PropertyBase\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}