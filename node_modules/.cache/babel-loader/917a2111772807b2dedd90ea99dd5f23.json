{"ast":null,"code":"/**\n * @implements {AuthHandlerInterface}\n */\nmodule.exports = {\n  /**\n   * @property {AuthHandlerInterface~AuthManifest}\n   */\n  manifest: {\n    info: {\n      name: 'basic',\n      version: '1.0.0'\n    },\n    updates: [{\n      property: 'Authorization',\n      type: 'header'\n    }]\n  },\n  /**\n   * Initializes an item (extracts parameters from intermediate requests if any, etc)\n   * before the actual authorization step.\n   *\n   * @param {AuthInterface} auth -\n   * @param {Response} response -\n   * @param {AuthHandlerInterface~authInitHookCallback} done -\n   */\n  init: function (auth, response, done) {\n    done(null);\n  },\n  /**\n   * Verifies whether the request has valid basic auth credentials (which is always).\n   * Sanitizes the auth parameters if needed.\n   *\n   * @todo - add support for prompting a user for basic auth credentials if not already provided\n   *\n   * @param {AuthInterface} auth -\n   * @param {AuthHandlerInterface~authPreHookCallback} done -\n   */\n  pre: function (auth, done) {\n    done(null, true);\n  },\n  /**\n   * Verifies whether the basic auth succeeded.\n   *\n   * @param {AuthInterface} auth -\n   * @param {Response} response -\n   * @param {AuthHandlerInterface~authPostHookCallback} done -\n   */\n  post: function (auth, response, done) {\n    done(null, true);\n  },\n  /**\n   * Signs a request.\n   *\n   * @param {AuthInterface} auth -\n   * @param {Request} request -\n   * @param {AuthHandlerInterface~authSignHookCallback} done -\n   */\n  sign: function (auth, request, done) {\n    var username = auth.get('username') || '',\n      password = auth.get('password') || '';\n    request.removeHeader('Authorization', {\n      ignoreCase: true\n    });\n    request.addHeader({\n      key: 'Authorization',\n      value: 'Basic ' + Buffer.from(`${username}:${password}`, 'utf8').toString('base64'),\n      system: true\n    });\n    return done();\n  }\n};","map":{"version":3,"names":["module","exports","manifest","info","name","version","updates","property","type","init","auth","response","done","pre","post","sign","request","username","get","password","removeHeader","ignoreCase","addHeader","key","value","Buffer","from","toString","system"],"sources":["/Users/Qusai.Qishta/node_modules/postman-runtime/lib/authorizer/basic.js"],"sourcesContent":["/**\n * @implements {AuthHandlerInterface}\n */\nmodule.exports = {\n    /**\n     * @property {AuthHandlerInterface~AuthManifest}\n     */\n    manifest: {\n        info: {\n            name: 'basic',\n            version: '1.0.0'\n        },\n        updates: [\n            {\n                property: 'Authorization',\n                type: 'header'\n            }\n        ]\n    },\n\n    /**\n     * Initializes an item (extracts parameters from intermediate requests if any, etc)\n     * before the actual authorization step.\n     *\n     * @param {AuthInterface} auth -\n     * @param {Response} response -\n     * @param {AuthHandlerInterface~authInitHookCallback} done -\n     */\n    init: function (auth, response, done) {\n        done(null);\n    },\n\n    /**\n     * Verifies whether the request has valid basic auth credentials (which is always).\n     * Sanitizes the auth parameters if needed.\n     *\n     * @todo - add support for prompting a user for basic auth credentials if not already provided\n     *\n     * @param {AuthInterface} auth -\n     * @param {AuthHandlerInterface~authPreHookCallback} done -\n     */\n    pre: function (auth, done) {\n        done(null, true);\n    },\n\n    /**\n     * Verifies whether the basic auth succeeded.\n     *\n     * @param {AuthInterface} auth -\n     * @param {Response} response -\n     * @param {AuthHandlerInterface~authPostHookCallback} done -\n     */\n    post: function (auth, response, done) {\n        done(null, true);\n    },\n\n    /**\n     * Signs a request.\n     *\n     * @param {AuthInterface} auth -\n     * @param {Request} request -\n     * @param {AuthHandlerInterface~authSignHookCallback} done -\n     */\n    sign: function (auth, request, done) {\n        var username = auth.get('username') || '',\n            password = auth.get('password') || '';\n\n        request.removeHeader('Authorization', { ignoreCase: true });\n        request.addHeader({\n            key: 'Authorization',\n            value: 'Basic ' + Buffer.from(`${username}:${password}`, 'utf8').toString('base64'),\n            system: true\n        });\n\n        return done();\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAG;EACb;AACJ;AACA;EACIC,QAAQ,EAAE;IACNC,IAAI,EAAE;MACFC,IAAI,EAAE,OAAO;MACbC,OAAO,EAAE;IACb,CAAC;IACDC,OAAO,EAAE,CACL;MACIC,QAAQ,EAAE,eAAe;MACzBC,IAAI,EAAE;IACV,CAAC;EAET,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,IAAI,EAAE,UAAUC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAClCA,IAAI,CAAC,IAAI,CAAC;EACd,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,GAAG,EAAE,UAAUH,IAAI,EAAEE,IAAI,EAAE;IACvBA,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;EACpB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,IAAI,EAAE,UAAUJ,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAClCA,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;EACpB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,IAAI,EAAE,UAAUL,IAAI,EAAEM,OAAO,EAAEJ,IAAI,EAAE;IACjC,IAAIK,QAAQ,GAAGP,IAAI,CAACQ,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE;MACrCC,QAAQ,GAAGT,IAAI,CAACQ,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE;IAEzCF,OAAO,CAACI,YAAY,CAAC,eAAe,EAAE;MAAEC,UAAU,EAAE;IAAK,CAAC,CAAC;IAC3DL,OAAO,CAACM,SAAS,CAAC;MACdC,GAAG,EAAE,eAAe;MACpBC,KAAK,EAAE,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAAE,GAAET,QAAS,IAAGE,QAAS,EAAC,EAAE,MAAM,CAAC,CAACQ,QAAQ,CAAC,QAAQ,CAAC;MACnFC,MAAM,EAAE;IACZ,CAAC,CAAC;IAEF,OAAOhB,IAAI,EAAE;EACjB;AACJ,CAAC"},"metadata":{},"sourceType":"script"}