{"ast":null,"code":"var _ = require('lodash'),\n  TARGETS = {\n    header: 'header',\n    query: 'query'\n  };\n\n/**\n * This module negotiates the following\n *\n * auth: {\n *     key: 'string',\n *     value: 'string',\n *     in: 'string~enum header, query',\n *\n *     // @todo implement:\n *     privateKey: 'string',\n *     privateValue: 'string'\n * }\n *\n * @implements {AuthHandlerInterface}\n */\nmodule.exports = {\n  /**\n   * @property {AuthHandlerInterface~AuthManifest}\n   */\n  manifest: {\n    info: {\n      name: 'apikey',\n      version: '0.0.1'\n    },\n    updates: [{\n      property: '*',\n      type: 'header'\n    }, {\n      property: '*',\n      type: 'url.param'\n    }]\n  },\n  /**\n   * Initializes an item (extracts parameters from intermediate requests if any, etc)\n   * before the actual authorization step\n   *\n   * @param {AuthInterface} auth -\n   * @param {Response} response -\n   * @param {AuthHandlerInterface~authInitHookCallback} done -\n   */\n  init: function (auth, response, done) {\n    done();\n  },\n  /**\n   * Verifies whether the request has required parameters\n   *\n   * @param {AuthInterface} auth -\n   * @param {AuthHandlerInterface~authPreHookCallback} done -\n   */\n  pre: function (auth, done) {\n    return done(null, Boolean(auth.get('key') || auth.get('value')));\n  },\n  /**\n   * Verifies whether the auth succeeded\n   *\n   * @param {AuthInterface} auth -\n   * @param {Response} response -\n   * @param {AuthHandlerInterface~authPostHookCallback} done -\n   */\n  post: function (auth, response, done) {\n    done(null, true);\n  },\n  /**\n   * Signs the request\n   *\n   * @param {AuthInterface} auth -\n   * @param {Request} request -\n   * @param {AuthHandlerInterface~authSignHookCallback} done -\n   */\n  sign: function (auth, request, done) {\n    var target = TARGETS[auth.get('in')] || TARGETS.header,\n      key = auth.get('key'),\n      value = auth.get('value'),\n      lkey = _.lowerCase(key); // needed for header case insensitive matches\n\n    // either key or value should be present\n    if (!(key || value)) {\n      return done();\n    }\n    if (target === TARGETS.header) {\n      request.headers.remove(function (header) {\n        return header && _.lowerCase(header.key) === lkey;\n      });\n      request.headers.add({\n        key: key,\n        value: value,\n        system: true\n      });\n    } else if (target === TARGETS.query) {\n      request.url.query.remove(function (query) {\n        return query && query.key === key;\n      });\n      request.url.query.add({\n        key: key,\n        value: value,\n        system: true\n      });\n    }\n    return done();\n  }\n};","map":{"version":3,"names":["_","require","TARGETS","header","query","module","exports","manifest","info","name","version","updates","property","type","init","auth","response","done","pre","Boolean","get","post","sign","request","target","key","value","lkey","lowerCase","headers","remove","add","system","url"],"sources":["/Users/Qusai.Qishta/node_modules/postman-runtime/lib/authorizer/apikey.js"],"sourcesContent":["var _ = require('lodash'),\n    TARGETS = {\n        header: 'header',\n        query: 'query'\n    };\n\n/**\n * This module negotiates the following\n *\n * auth: {\n *     key: 'string',\n *     value: 'string',\n *     in: 'string~enum header, query',\n *\n *     // @todo implement:\n *     privateKey: 'string',\n *     privateValue: 'string'\n * }\n *\n * @implements {AuthHandlerInterface}\n */\nmodule.exports = {\n    /**\n     * @property {AuthHandlerInterface~AuthManifest}\n     */\n    manifest: {\n        info: {\n            name: 'apikey',\n            version: '0.0.1'\n        },\n        updates: [\n            {\n                property: '*',\n                type: 'header'\n            },\n            {\n                property: '*',\n                type: 'url.param'\n            }\n        ]\n    },\n\n    /**\n     * Initializes an item (extracts parameters from intermediate requests if any, etc)\n     * before the actual authorization step\n     *\n     * @param {AuthInterface} auth -\n     * @param {Response} response -\n     * @param {AuthHandlerInterface~authInitHookCallback} done -\n     */\n    init: function (auth, response, done) {\n        done();\n    },\n\n    /**\n     * Verifies whether the request has required parameters\n     *\n     * @param {AuthInterface} auth -\n     * @param {AuthHandlerInterface~authPreHookCallback} done -\n     */\n    pre: function (auth, done) {\n        return done(null, Boolean(auth.get('key') || auth.get('value')));\n    },\n\n    /**\n     * Verifies whether the auth succeeded\n     *\n     * @param {AuthInterface} auth -\n     * @param {Response} response -\n     * @param {AuthHandlerInterface~authPostHookCallback} done -\n     */\n    post: function (auth, response, done) {\n        done(null, true);\n    },\n\n    /**\n     * Signs the request\n     *\n     * @param {AuthInterface} auth -\n     * @param {Request} request -\n     * @param {AuthHandlerInterface~authSignHookCallback} done -\n     */\n    sign: function (auth, request, done) {\n        var target = TARGETS[auth.get('in')] || TARGETS.header,\n            key = auth.get('key'),\n            value = auth.get('value'),\n\n            lkey = _.lowerCase(key); // needed for header case insensitive matches\n\n        // either key or value should be present\n        if (!(key || value)) {\n            return done();\n        }\n\n        if (target === TARGETS.header) {\n            request.headers.remove(function (header) {\n                return header && (_.lowerCase(header.key) === lkey);\n            });\n\n            request.headers.add({\n                key: key,\n                value: value,\n                system: true\n            });\n        }\n        else if (target === TARGETS.query) {\n            request.url.query.remove(function (query) {\n                return query && (query.key === key);\n            });\n\n            request.url.query.add({\n                key: key,\n                value: value,\n                system: true\n            });\n        }\n\n        return done();\n    }\n};\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;EACrBC,OAAO,GAAG;IACNC,MAAM,EAAE,QAAQ;IAChBC,KAAK,EAAE;EACX,CAAC;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG;EACb;AACJ;AACA;EACIC,QAAQ,EAAE;IACNC,IAAI,EAAE;MACFC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAE;IACb,CAAC;IACDC,OAAO,EAAE,CACL;MACIC,QAAQ,EAAE,GAAG;MACbC,IAAI,EAAE;IACV,CAAC,EACD;MACID,QAAQ,EAAE,GAAG;MACbC,IAAI,EAAE;IACV,CAAC;EAET,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,IAAI,EAAE,UAAUC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAClCA,IAAI,EAAE;EACV,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIC,GAAG,EAAE,UAAUH,IAAI,EAAEE,IAAI,EAAE;IACvB,OAAOA,IAAI,CAAC,IAAI,EAAEE,OAAO,CAACJ,IAAI,CAACK,GAAG,CAAC,KAAK,CAAC,IAAIL,IAAI,CAACK,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;EACpE,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,IAAI,EAAE,UAAUN,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAClCA,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;EACpB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIK,IAAI,EAAE,UAAUP,IAAI,EAAEQ,OAAO,EAAEN,IAAI,EAAE;IACjC,IAAIO,MAAM,GAAGtB,OAAO,CAACa,IAAI,CAACK,GAAG,CAAC,IAAI,CAAC,CAAC,IAAIlB,OAAO,CAACC,MAAM;MAClDsB,GAAG,GAAGV,IAAI,CAACK,GAAG,CAAC,KAAK,CAAC;MACrBM,KAAK,GAAGX,IAAI,CAACK,GAAG,CAAC,OAAO,CAAC;MAEzBO,IAAI,GAAG3B,CAAC,CAAC4B,SAAS,CAACH,GAAG,CAAC,CAAC,CAAC;;IAE7B;IACA,IAAI,EAAEA,GAAG,IAAIC,KAAK,CAAC,EAAE;MACjB,OAAOT,IAAI,EAAE;IACjB;IAEA,IAAIO,MAAM,KAAKtB,OAAO,CAACC,MAAM,EAAE;MAC3BoB,OAAO,CAACM,OAAO,CAACC,MAAM,CAAC,UAAU3B,MAAM,EAAE;QACrC,OAAOA,MAAM,IAAKH,CAAC,CAAC4B,SAAS,CAACzB,MAAM,CAACsB,GAAG,CAAC,KAAKE,IAAK;MACvD,CAAC,CAAC;MAEFJ,OAAO,CAACM,OAAO,CAACE,GAAG,CAAC;QAChBN,GAAG,EAAEA,GAAG;QACRC,KAAK,EAAEA,KAAK;QACZM,MAAM,EAAE;MACZ,CAAC,CAAC;IACN,CAAC,MACI,IAAIR,MAAM,KAAKtB,OAAO,CAACE,KAAK,EAAE;MAC/BmB,OAAO,CAACU,GAAG,CAAC7B,KAAK,CAAC0B,MAAM,CAAC,UAAU1B,KAAK,EAAE;QACtC,OAAOA,KAAK,IAAKA,KAAK,CAACqB,GAAG,KAAKA,GAAI;MACvC,CAAC,CAAC;MAEFF,OAAO,CAACU,GAAG,CAAC7B,KAAK,CAAC2B,GAAG,CAAC;QAClBN,GAAG,EAAEA,GAAG;QACRC,KAAK,EAAEA,KAAK;QACZM,MAAM,EAAE;MACZ,CAAC,CAAC;IACN;IAEA,OAAOf,IAAI,EAAE;EACjB;AACJ,CAAC"},"metadata":{},"sourceType":"script"}