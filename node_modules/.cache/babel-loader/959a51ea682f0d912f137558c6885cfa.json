{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _utils = require('../utils');\nexports['default'] = function (instance) {\n  instance.registerHelper('blockHelperMissing', function (context, options) {\n    var inverse = options.inverse,\n      fn = options.fn;\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (_utils.isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        var data = _utils.createFrame(options.data);\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);\n        options = {\n          data: data\n        };\n      }\n      return fn(context, options);\n    }\n  });\n};\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;qBAAwD,UAAU;qBAEnD,UAASA,QAAQ,EAAE;EAChCA,QAAQ,CAACC,cAAc,CAAC,oBAAoB,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAE;IACvE,IAAIC,OAAO,GAAGD,OAAO,CAACC,OAAO;MAC3BC,EAAE,GAAGF,OAAO,CAACE,EAAE;IAEjB,IAAIH,OAAO,KAAK,IAAI,EAAE;MACpB,OAAOG,EAAE,CAAC,IAAI,CAAC;KAChB,MAAM,IAAIH,OAAO,KAAK,KAAK,IAAIA,OAAO,IAAI,IAAI,EAAE;MAC/C,OAAOE,OAAO,CAAC,IAAI,CAAC;KACrB,MAAM,IAAIE,eAAQJ,OAAO,CAAC,EAAE;MAC3B,IAAIA,OAAO,CAACK,MAAM,GAAG,CAAC,EAAE;QACtB,IAAIJ,OAAO,CAACK,GAAG,EAAE;UACfL,OAAO,CAACK,GAAG,GAAG,CAACL,OAAO,CAACM,IAAI,CAAC;;QAG9B,OAAOT,QAAQ,CAACU,OAAO,CAACC,IAAI,CAACT,OAAO,EAAEC,OAAO,CAAC;OAC/C,MAAM;QACL,OAAOC,OAAO,CAAC,IAAI,CAAC;;KAEvB,MAAM;MACL,IAAID,OAAO,CAACS,IAAI,IAAIT,OAAO,CAACK,GAAG,EAAE;QAC/B,IAAII,IAAI,GAAGN,mBAAYH,OAAO,CAACS,IAAI,CAAC;QACpCA,IAAI,CAACC,WAAW,GAAGP,yBACjBH,OAAO,CAACS,IAAI,CAACC,WAAW,EACxBV,OAAO,CAACM,IAAI,CACb;QACDN,OAAO,GAAG;UAAES,IAAI,EAAEA;QAAI,CAAE;;MAG1B,OAAOP,EAAE,CAACH,OAAO,EAAEC,OAAO,CAAC;;GAE9B,CAAC;CACH","names":["instance","registerHelper","context","options","inverse","fn","_utils","length","ids","name","helpers","each","data","contextPath"],"sources":["../../../../lib/handlebars/helpers/block-helper-missing.js"],"sourcesContent":["import { appendContextPath, createFrame, isArray } from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('blockHelperMissing', function(context, options) {\n    let inverse = options.inverse,\n      fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        let data = createFrame(options.data);\n        data.contextPath = appendContextPath(\n          options.data.contextPath,\n          options.name\n        );\n        options = { data: data };\n      }\n\n      return fn(context, options);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}