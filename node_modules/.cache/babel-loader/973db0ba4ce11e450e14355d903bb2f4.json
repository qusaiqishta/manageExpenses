{"ast":null,"code":"// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar util = require('util');\nvar sshpk = require('sshpk');\nvar jsprim = require('jsprim');\nvar utils = require('./utils');\nvar sprintf = require('util').format;\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Globals\n\nvar AUTHZ_PARAMS = ['keyId', 'algorithm', 'created', 'expires', 'opaque', 'headers', 'signature'];\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\nfunction FormatAuthz(prefix, params) {\n  assert.string(prefix, 'prefix');\n  assert.object(params, 'params');\n  var authz = '';\n  for (var i = 0; i < AUTHZ_PARAMS.length; i++) {\n    var param = AUTHZ_PARAMS[i];\n    var value = params[param];\n    if (value === undefined) continue;\n    if (typeof value === 'number') {\n      authz += prefix + sprintf('%s=%d', param, value);\n    } else {\n      assert.string(value, 'params.' + param);\n      authz += prefix + sprintf('%s=\"%s\"', param, value);\n    }\n    prefix = ',';\n  }\n  return authz;\n}\n\n/* See createSigner() */\nfunction RequestSigner(options) {\n  assert.object(options, 'options');\n  var alg = [];\n  if (options.algorithm !== undefined) {\n    assert.string(options.algorithm, 'options.algorithm');\n    alg = validateAlgorithm(options.algorithm);\n  }\n  this.rs_alg = alg;\n\n  /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */\n  if (options.sign !== undefined) {\n    assert.func(options.sign, 'options.sign');\n    this.rs_signFunc = options.sign;\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n    if (typeof options.key !== 'string' && !Buffer.isBuffer(options.key)) throw new TypeError('options.key for HMAC must be a string or Buffer');\n\n    /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n    this.rs_signer.sign = function () {\n      var digest = this.digest('base64');\n      return {\n        hashAlgorithm: alg[1],\n        toString: function () {\n          return digest;\n        }\n      };\n    };\n  } else if (options.key !== undefined) {\n    var key = options.key;\n    if (typeof key === 'string' || Buffer.isBuffer(key)) assert.optionalString(options.keyPassphrase, 'options.keyPassphrase');\n    key = sshpk.parsePrivateKey(key, 'auto', {\n      passphrase: options.keyPassphrase\n    });\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]), 'options.key must be a sshpk.PrivateKey');\n    this.rs_key = key;\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n    if (!PK_ALGOS[key.type]) {\n      throw new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' + 'keys are not supported');\n    }\n    if (alg[0] !== undefined && key.type !== alg[0]) {\n      throw new InvalidAlgorithmError('options.key must be a ' + alg[0].toUpperCase() + ' key, was given a ' + key.type.toUpperCase() + ' key instead');\n    }\n    this.rs_signer = key.createSign(alg[1]);\n  } else {\n    throw new TypeError('options.sign (func) or options.key is required');\n  }\n  this.rs_headers = [];\n  this.rs_lines = [];\n}\n\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */\nRequestSigner.prototype.writeHeader = function (header, value) {\n  assert.string(header, 'header');\n  header = header.toLowerCase();\n  assert.string(value, 'value');\n  this.rs_headers.push(header);\n  if (this.rs_signFunc) {\n    this.rs_lines.push(header + ': ' + value);\n  } else {\n    var line = header + ': ' + value;\n    if (this.rs_headers.length > 0) line = '\\n' + line;\n    this.rs_signer.update(line);\n  }\n  return value;\n};\n\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */\nRequestSigner.prototype.writeDateHeader = function () {\n  return this.writeHeader('date', jsprim.rfc1123(new Date()));\n};\n\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */\nRequestSigner.prototype.writeTarget = function (method, path) {\n  assert.string(method, 'method');\n  assert.string(path, 'path');\n  method = method.toLowerCase();\n  this.writeHeader('(request-target)', method + ' ' + path);\n};\n\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */\nRequestSigner.prototype.sign = function (cb) {\n  assert.func(cb, 'callback');\n  if (this.rs_headers.length < 1) throw new Error('At least one header must be signed');\n  var alg, authz;\n  if (this.rs_signFunc) {\n    var data = this.rs_lines.join('\\n');\n    var self = this;\n    this.rs_signFunc(data, function (err, sig) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      try {\n        assert.object(sig, 'signature');\n        assert.string(sig.keyId, 'signature.keyId');\n        assert.string(sig.algorithm, 'signature.algorithm');\n        assert.string(sig.signature, 'signature.signature');\n        alg = validateAlgorithm(sig.algorithm);\n        authz = FormatAuthz('Signature ', {\n          keyId: sig.keyId,\n          algorithm: sig.algorithm,\n          headers: self.rs_headers.join(' '),\n          signature: sig.signature\n        });\n      } catch (e) {\n        cb(e);\n        return;\n      }\n      cb(null, authz);\n    });\n  } else {\n    try {\n      var sigObj = this.rs_signer.sign();\n    } catch (e) {\n      cb(e);\n      return;\n    }\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n    var signature = sigObj.toString();\n    authz = FormatAuthz('Signature ', {\n      keyId: this.rs_keyId,\n      algorithm: alg,\n      headers: this.rs_headers.join(' '),\n      signature: signature\n    });\n    cb(null, authz);\n  }\n};\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */\n  isSigner: function (obj) {\n    if (typeof obj === 'object' && obj instanceof RequestSigner) return true;\n    return false;\n  },\n  /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                   - {String} keyPassphrase (optional, not for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */\n  createSigner: function createSigner(options) {\n    return new RequestSigner(options);\n  },\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   *                   - {int}    expiresIn optional; defaults to 60. The\n   *                              seconds after which the signature should\n   *                              expire;\n   *                   - {String} keyPassphrase optional; The passphrase to\n   *                              pass to sshpk to parse the privateKey.\n   *                              This doesn't do anything if algorithm is\n   *                              HMAC.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalString(options.opaque, 'options.opaque');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n    assert.optionalNumber(options.expiresIn, 'options.expiresIn');\n    assert.optionalString(options.keyPassphrase, 'options.keyPassphrase');\n    if (!request.getHeader('Date')) request.setHeader('Date', jsprim.rfc1123(new Date()));\n    var headers = ['date'];\n    if (options.headers) headers = options.headers;\n    if (!options.httpVersion) options.httpVersion = '1.1';\n    var alg = [];\n    if (options.algorithm) {\n      options.algorithm = options.algorithm.toLowerCase();\n      alg = validateAlgorithm(options.algorithm);\n    }\n    var key = options.key;\n    if (alg[0] === 'hmac') {\n      if (typeof key !== 'string' && !Buffer.isBuffer(key)) throw new TypeError('options.key must be a string or Buffer');\n    } else {\n      if (typeof key === 'string' || Buffer.isBuffer(key)) key = sshpk.parsePrivateKey(options.key, 'auto', {\n        passphrase: options.keyPassphrase\n      });\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]), 'options.key must be a sshpk.PrivateKey');\n      if (!PK_ALGOS[key.type]) {\n        throw new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' + 'keys are not supported');\n      }\n      if (alg[0] === undefined) {\n        alg[0] = key.type;\n      } else if (key.type !== alg[0]) {\n        throw new InvalidAlgorithmError('options.key must be a ' + alg[0].toUpperCase() + ' key, was given a ' + key.type.toUpperCase() + ' key instead');\n      }\n      if (alg[1] === undefined) {\n        alg[1] = key.defaultHashAlgorithm();\n      }\n      options.algorithm = alg[0] + '-' + alg[1];\n    }\n    var params = {\n      'keyId': options.keyId,\n      'algorithm': options.algorithm\n    };\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < headers.length; i++) {\n      if (typeof headers[i] !== 'string') throw new TypeError('options.headers must be an array of Strings');\n      var h = headers[i].toLowerCase();\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          stringToSign += request.method + ' ' + request.path + ' HTTP/' + options.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw new StrictParsingError('request-line is not a valid header ' + 'with strict parsing enabled.');\n        }\n      } else if (h === '(request-target)') {\n        stringToSign += '(request-target): ' + request.method.toLowerCase() + ' ' + request.path;\n      } else if (h === '(keyid)') {\n        stringToSign += '(keyid): ' + options.keyId;\n      } else if (h === '(algorithm)') {\n        stringToSign += '(algorithm): ' + options.algorithm;\n      } else if (h === '(opaque)') {\n        var opaque = options.opaque;\n        if (opaque == undefined || opaque === '') {\n          throw new MissingHeaderError('options.opaque was not in the request');\n        }\n        stringToSign += '(opaque): ' + opaque;\n      } else if (h === '(created)') {\n        var created = Math.floor(Date.now() / 1000);\n        params.created = created;\n        stringToSign += '(created): ' + created;\n      } else if (h === '(expires)') {\n        var expiresIn = options.expiresIn;\n        if (expiresIn === undefined) {\n          expiresIn = 60;\n        }\n        const expires = Math.floor(Date.now() / 1000) + expiresIn;\n        params.expires = expires;\n        stringToSign += '(expires): ' + expires;\n      } else {\n        var value = request.getHeader(h);\n        if (value === undefined || value === '') {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      }\n      if (i + 1 < headers.length) stringToSign += '\\n';\n    }\n\n    /* This is just for unit tests. */\n    if (request.hasOwnProperty('_stringToSign')) {\n      request._stringToSign = stringToSign;\n    }\n    var signature;\n    if (alg[0] === 'hmac') {\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n    } else {\n      var signer = key.createSign(alg[1]);\n      signer.update(stringToSign);\n      var sigObj = signer.sign();\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n        throw new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() + ' is not a supported hash algorithm');\n      }\n      assert.strictEqual(alg[1], sigObj.hashAlgorithm, 'hash algorithm mismatch');\n      signature = sigObj.toString();\n      assert.notStrictEqual(signature, '', 'empty signature produced');\n    }\n    var authzHeaderName = options.authorizationHeaderName || 'Authorization';\n    var prefix = authzHeaderName.toLowerCase() === utils.HEADER.SIG ? '' : 'Signature ';\n    params.signature = signature;\n    if (options.opaque) params.opaque = options.opaque;\n    if (options.headers) params.headers = options.headers.join(' ');\n    request.setHeader(authzHeaderName, FormatAuthz(prefix, params));\n    return true;\n  }\n};","map":{"version":3,"names":["assert","require","crypto","util","sshpk","jsprim","utils","sprintf","format","HASH_ALGOS","PK_ALGOS","InvalidAlgorithmError","HttpSignatureError","validateAlgorithm","AUTHZ_PARAMS","MissingHeaderError","message","call","inherits","StrictParsingError","FormatAuthz","prefix","params","string","object","authz","i","length","param","value","undefined","RequestSigner","options","alg","algorithm","rs_alg","sign","func","rs_signFunc","key","keyId","rs_keyId","Buffer","isBuffer","TypeError","rs_signer","createHmac","toUpperCase","digest","hashAlgorithm","toString","optionalString","keyPassphrase","parsePrivateKey","passphrase","ok","PrivateKey","isPrivateKey","rs_key","type","createSign","rs_headers","rs_lines","prototype","writeHeader","header","toLowerCase","push","line","update","writeDateHeader","rfc1123","Date","writeTarget","method","path","cb","Error","data","join","self","err","sig","signature","headers","e","sigObj","module","exports","isSigner","obj","createSigner","signRequest","request","opaque","optionalArrayOfString","httpVersion","optionalNumber","expiresIn","getHeader","setHeader","defaultHashAlgorithm","stringToSign","h","strict","created","Math","floor","now","expires","hasOwnProperty","_stringToSign","hmac","signer","strictEqual","notStrictEqual","authzHeaderName","authorizationHeaderName","HEADER","SIG"],"sources":["/Users/Qusai.Qishta/node_modules/http-signature/lib/signer.js"],"sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar util = require('util');\nvar sshpk = require('sshpk');\nvar jsprim = require('jsprim');\nvar utils = require('./utils');\n\nvar sprintf = require('util').format;\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Globals\n\nvar AUTHZ_PARAMS = [ 'keyId', 'algorithm', 'created', 'expires', 'opaque',\n  'headers', 'signature' ];\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\nfunction FormatAuthz(prefix, params) {\n  assert.string(prefix, 'prefix');\n  assert.object(params, 'params');\n\n  var authz = '';\n  for (var i = 0; i < AUTHZ_PARAMS.length; i++) {\n    var param = AUTHZ_PARAMS[i];\n    var value = params[param];\n    if (value === undefined)\n      continue;\n    if (typeof (value) === 'number') {\n      authz += prefix + sprintf('%s=%d', param, value);\n    } else {\n      assert.string(value, 'params.' + param);\n\n      authz += prefix + sprintf('%s=\"%s\"', param, value);\n    }\n    prefix = ',';\n  }\n\n  return (authz);\n}\n\n/* See createSigner() */\nfunction RequestSigner(options) {\n  assert.object(options, 'options');\n\n  var alg = [];\n  if (options.algorithm !== undefined) {\n    assert.string(options.algorithm, 'options.algorithm');\n    alg = validateAlgorithm(options.algorithm);\n  }\n  this.rs_alg = alg;\n\n  /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */\n  if (options.sign !== undefined) {\n    assert.func(options.sign, 'options.sign');\n    this.rs_signFunc = options.sign;\n\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n    /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n    this.rs_signer.sign = function () {\n      var digest = this.digest('base64');\n      return ({\n        hashAlgorithm: alg[1],\n        toString: function () { return (digest); }\n      });\n    };\n\n  } else if (options.key !== undefined) {\n    var key = options.key;\n    if (typeof (key) === 'string' || Buffer.isBuffer(key))\n      assert.optionalString(options.keyPassphrase, 'options.keyPassphrase');\n      key = sshpk.parsePrivateKey(key, 'auto', {\n        passphrase: options.keyPassphrase\n      });\n\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n      'options.key must be a sshpk.PrivateKey');\n    this.rs_key = key;\n\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (!PK_ALGOS[key.type]) {\n      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n        'keys are not supported'));\n    }\n\n    if (alg[0] !== undefined && key.type !== alg[0]) {\n      throw (new InvalidAlgorithmError('options.key must be a ' +\n        alg[0].toUpperCase() + ' key, was given a ' +\n        key.type.toUpperCase() + ' key instead'));\n    }\n\n    this.rs_signer = key.createSign(alg[1]);\n\n  } else {\n    throw (new TypeError('options.sign (func) or options.key is required'));\n  }\n\n  this.rs_headers = [];\n  this.rs_lines = [];\n}\n\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */\nRequestSigner.prototype.writeHeader = function (header, value) {\n  assert.string(header, 'header');\n  header = header.toLowerCase();\n  assert.string(value, 'value');\n\n  this.rs_headers.push(header);\n\n  if (this.rs_signFunc) {\n    this.rs_lines.push(header + ': ' + value);\n\n  } else {\n    var line = header + ': ' + value;\n    if (this.rs_headers.length > 0)\n      line = '\\n' + line;\n    this.rs_signer.update(line);\n  }\n\n  return (value);\n};\n\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */\nRequestSigner.prototype.writeDateHeader = function () {\n  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n};\n\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */\nRequestSigner.prototype.writeTarget = function (method, path) {\n  assert.string(method, 'method');\n  assert.string(path, 'path');\n  method = method.toLowerCase();\n  this.writeHeader('(request-target)', method + ' ' + path);\n};\n\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */\nRequestSigner.prototype.sign = function (cb) {\n  assert.func(cb, 'callback');\n\n  if (this.rs_headers.length < 1)\n    throw (new Error('At least one header must be signed'));\n\n  var alg, authz;\n  if (this.rs_signFunc) {\n    var data = this.rs_lines.join('\\n');\n    var self = this;\n    this.rs_signFunc(data, function (err, sig) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      try {\n        assert.object(sig, 'signature');\n        assert.string(sig.keyId, 'signature.keyId');\n        assert.string(sig.algorithm, 'signature.algorithm');\n        assert.string(sig.signature, 'signature.signature');\n        alg = validateAlgorithm(sig.algorithm);\n\n        authz = FormatAuthz('Signature ', {\n          keyId: sig.keyId,\n          algorithm: sig.algorithm,\n          headers: self.rs_headers.join(' '),\n          signature: sig.signature\n        });\n      } catch (e) {\n        cb(e);\n        return;\n      }\n      cb(null, authz);\n    });\n\n  } else {\n    try {\n      var sigObj = this.rs_signer.sign();\n    } catch (e) {\n      cb(e);\n      return;\n    }\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n    var signature = sigObj.toString();\n    authz = FormatAuthz('Signature ', {\n      keyId: this.rs_keyId,\n      algorithm: alg,\n      headers: this.rs_headers.join(' '),\n      signature: signature\n    });\n    cb(null, authz);\n  }\n};\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */\n  isSigner: function (obj) {\n    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n      return (true);\n    return (false);\n  },\n\n  /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                   - {String} keyPassphrase (optional, not for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */\n  createSigner: function createSigner(options) {\n    return (new RequestSigner(options));\n  },\n\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   *                   - {int}    expiresIn optional; defaults to 60. The\n   *                              seconds after which the signature should\n   *                              expire;\n   *                   - {String} keyPassphrase optional; The passphrase to\n   *                              pass to sshpk to parse the privateKey.\n   *                              This doesn't do anything if algorithm is\n   *                              HMAC.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalString(options.opaque, 'options.opaque');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n    assert.optionalNumber(options.expiresIn, 'options.expiresIn');\n    assert.optionalString(options.keyPassphrase, 'options.keyPassphrase');\n\n    if (!request.getHeader('Date'))\n      request.setHeader('Date', jsprim.rfc1123(new Date()));\n    var headers = ['date'];\n    if (options.headers)\n      headers = options.headers;\n    if (!options.httpVersion)\n      options.httpVersion = '1.1';\n\n    var alg = [];\n    if (options.algorithm) {\n      options.algorithm = options.algorithm.toLowerCase();\n      alg = validateAlgorithm(options.algorithm);\n    }\n\n    var key = options.key;\n    if (alg[0] === 'hmac') {\n      if (typeof (key) !== 'string' && !Buffer.isBuffer(key))\n        throw (new TypeError('options.key must be a string or Buffer'));\n    } else {\n      if (typeof (key) === 'string' || Buffer.isBuffer(key))\n        key = sshpk.parsePrivateKey(options.key, 'auto', {\n          passphrase: options.keyPassphrase\n        });\n\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n        'options.key must be a sshpk.PrivateKey');\n\n      if (!PK_ALGOS[key.type]) {\n        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n          'keys are not supported'));\n      }\n\n      if (alg[0] === undefined) {\n        alg[0] = key.type;\n      } else if (key.type !== alg[0]) {\n        throw (new InvalidAlgorithmError('options.key must be a ' +\n          alg[0].toUpperCase() + ' key, was given a ' +\n          key.type.toUpperCase() + ' key instead'));\n      }\n      if (alg[1] === undefined) {\n        alg[1] = key.defaultHashAlgorithm();\n      }\n\n      options.algorithm = alg[0] + '-' + alg[1];\n    }\n\n    var params = {\n      'keyId': options.keyId,\n      'algorithm': options.algorithm\n    };\n\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < headers.length; i++) {\n      if (typeof (headers[i]) !== 'string')\n        throw new TypeError('options.headers must be an array of Strings');\n\n      var h = headers[i].toLowerCase();\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          stringToSign +=\n            request.method + ' ' + request.path + ' HTTP/' +\n            options.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        stringToSign +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.path;\n      } else if (h === '(keyid)') {\n        stringToSign += '(keyid): ' + options.keyId;\n      } else if (h === '(algorithm)') {\n        stringToSign += '(algorithm): ' + options.algorithm;\n      } else if (h === '(opaque)') {\n        var opaque = options.opaque;\n        if (opaque == undefined || opaque === '') {\n          throw new MissingHeaderError('options.opaque was not in the request');\n        }\n        stringToSign += '(opaque): ' + opaque;\n      } else if (h === '(created)') {\n        var created = Math.floor(Date.now() / 1000);\n        params.created = created;\n        stringToSign += '(created): ' + created;\n      } else if (h === '(expires)') {\n        var expiresIn = options.expiresIn;\n        if (expiresIn === undefined) {\n          expiresIn = 60;\n        }\n        const expires = Math.floor(Date.now() / 1000) + expiresIn;\n        params.expires = expires;\n        stringToSign += '(expires): ' + expires;\n      } else {\n        var value = request.getHeader(h);\n        if (value === undefined || value === '') {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      }\n\n      if ((i + 1) < headers.length)\n        stringToSign += '\\n';\n    }\n\n    /* This is just for unit tests. */\n    if (request.hasOwnProperty('_stringToSign')) {\n      request._stringToSign = stringToSign;\n    }\n\n    var signature;\n    if (alg[0] === 'hmac') {\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n    } else {\n      var signer = key.createSign(alg[1]);\n      signer.update(stringToSign);\n      var sigObj = signer.sign();\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n          ' is not a supported hash algorithm'));\n      }\n      assert.strictEqual(alg[1], sigObj.hashAlgorithm,\n        'hash algorithm mismatch');\n      signature = sigObj.toString();\n      assert.notStrictEqual(signature, '', 'empty signature produced');\n    }\n\n    var authzHeaderName = options.authorizationHeaderName || 'Authorization';\n    var prefix = authzHeaderName.toLowerCase() === utils.HEADER.SIG ?\n      '' : 'Signature ';\n\n    params.signature = signature;\n\n    if (options.opaque)\n      params.opaque = options.opaque;\n    if (options.headers)\n      params.headers = options.headers.join(' ');\n\n    request.setHeader(authzHeaderName, FormatAuthz(prefix, params));\n\n    return true;\n  }\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}