{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  // Converts values to strings\n  var XMLStringifier,\n    hasProp = {}.hasOwnProperty;\n  module.exports = XMLStringifier = function () {\n    class XMLStringifier {\n      // Initializes a new instance of `XMLStringifier`\n\n      // `options.version` The version number string of the XML spec to validate against, e.g. 1.0\n      // `options.noDoubleEncoding` whether existing html entities are encoded: true or false\n      // `options.stringify` a set of functions to use for converting values to strings\n      // `options.noValidation` whether values will be validated and escaped or returned as is\n      // `options.invalidCharReplacement` a character to replace invalid characters and disable character validation\n      constructor(options) {\n        var key, ref, value;\n        // Checks whether the given string contains legal characters\n        // Fails with an exception on error\n\n        // `str` the string to check\n        this.assertLegalChar = this.assertLegalChar.bind(this);\n        // Checks whether the given string contains legal characters for a name\n        // Fails with an exception on error\n\n        // `str` the string to check\n        this.assertLegalName = this.assertLegalName.bind(this);\n        options || (options = {});\n        this.options = options;\n        if (!this.options.version) {\n          this.options.version = '1.0';\n        }\n        ref = options.stringify || {};\n        for (key in ref) {\n          if (!hasProp.call(ref, key)) continue;\n          value = ref[key];\n          this[key] = value;\n        }\n      }\n\n      // Defaults\n      name(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalName('' + val || '');\n      }\n      text(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar(this.textEscape('' + val || ''));\n      }\n      cdata(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        val = val.replace(']]>', ']]]]><![CDATA[>');\n        return this.assertLegalChar(val);\n      }\n      comment(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (val.match(/--/)) {\n          throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n      raw(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return '' + val || '';\n      }\n      attValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n      }\n      insTarget(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n      insValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (val.match(/\\?>/)) {\n          throw new Error(\"Invalid processing instruction value: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n      xmlVersion(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (!val.match(/1\\.[0-9]+/)) {\n          throw new Error(\"Invalid version number: \" + val);\n        }\n        return val;\n      }\n      xmlEncoding(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n          throw new Error(\"Invalid encoding: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n      xmlStandalone(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        if (val) {\n          return \"yes\";\n        } else {\n          return \"no\";\n        }\n      }\n      dtdPubID(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n      dtdSysID(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n      dtdElementValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n      dtdAttType(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n      dtdAttDefault(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n      dtdEntityValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n      dtdNData(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n      assertLegalChar(str) {\n        var regex, res;\n        if (this.options.noValidation) {\n          return str;\n        }\n        if (this.options.version === '1.0') {\n          // Valid characters from https://www.w3.org/TR/xml/#charsets\n          // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n          // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n          // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n          //   let xml_10_InvalidChars = regenerate()\n          //     .addRange(0x0000, 0x0008)\n          //     .add(0x000B, 0x000C)\n          //     .addRange(0x000E, 0x001F)\n          //     .addRange(0xD800, 0xDFFF)\n          //     .addRange(0xFFFE, 0xFFFF)\n          regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g;\n          if (this.options.invalidCharReplacement !== void 0) {\n            str = str.replace(regex, this.options.invalidCharReplacement);\n          } else if (res = str.match(regex)) {\n            throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n          }\n        } else if (this.options.version === '1.1') {\n          // Valid characters from https://www.w3.org/TR/xml11/#charsets\n          // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n          // [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n          // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n          //   let xml_11_InvalidChars = regenerate()\n          //     .add(0x0000)\n          //     .addRange(0xD800, 0xDFFF)\n          //     .addRange(0xFFFE, 0xFFFF)\n          regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g;\n          if (this.options.invalidCharReplacement !== void 0) {\n            str = str.replace(regex, this.options.invalidCharReplacement);\n          } else if (res = str.match(regex)) {\n            throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n          }\n        }\n        return str;\n      }\n      assertLegalName(str) {\n        var regex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        str = this.assertLegalChar(str);\n        regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n        if (!str.match(regex)) {\n          throw new Error(`Invalid character in name: ${str}`);\n        }\n        return str;\n      }\n\n      // Escapes special characters in text\n\n      // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n\n      // `str` the string to escape\n      textEscape(str) {\n        var ampregex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        ampregex = this.options.noDoubleEncoding ? /(?!&(lt|gt|amp|apos|quot);)&/g : /&/g;\n        return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n      }\n\n      // Escapes special characters in attribute values\n\n      // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n\n      // `str` the string to escape\n      attEscape(str) {\n        var ampregex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        ampregex = this.options.noDoubleEncoding ? /(?!&(lt|gt|amp|apos|quot);)&/g : /&/g;\n        return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n      }\n    }\n    ;\n\n    // strings to match while converting from JS objects\n    XMLStringifier.prototype.convertAttKey = '@';\n    XMLStringifier.prototype.convertPIKey = '?';\n    XMLStringifier.prototype.convertTextKey = '#text';\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n    XMLStringifier.prototype.convertRawKey = '#raw';\n    return XMLStringifier;\n  }.call(this);\n}).call(this);","map":{"version":3,"names":["XMLStringifier","hasProp","hasOwnProperty","module","exports","constructor","options","key","ref","value","assertLegalChar","bind","assertLegalName","version","stringify","call","name","val","noValidation","text","textEscape","cdata","replace","comment","match","Error","raw","attValue","attEscape","insTarget","insValue","xmlVersion","xmlEncoding","xmlStandalone","dtdPubID","dtdSysID","dtdElementValue","dtdAttType","dtdAttDefault","dtdEntityValue","dtdNData","str","regex","res","invalidCharReplacement","index","ampregex","noDoubleEncoding","prototype","convertAttKey","convertPIKey","convertTextKey","convertCDataKey","convertCommentKey","convertRawKey"],"sources":["/Users/Qusai.Qishta/node_modules/xmlbuilder/lib/XMLStringifier.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  // Converts values to strings\n  var XMLStringifier,\n    hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = (function() {\n    class XMLStringifier {\n      // Initializes a new instance of `XMLStringifier`\n\n      // `options.version` The version number string of the XML spec to validate against, e.g. 1.0\n      // `options.noDoubleEncoding` whether existing html entities are encoded: true or false\n      // `options.stringify` a set of functions to use for converting values to strings\n      // `options.noValidation` whether values will be validated and escaped or returned as is\n      // `options.invalidCharReplacement` a character to replace invalid characters and disable character validation\n      constructor(options) {\n        var key, ref, value;\n        // Checks whether the given string contains legal characters\n        // Fails with an exception on error\n\n        // `str` the string to check\n        this.assertLegalChar = this.assertLegalChar.bind(this);\n        // Checks whether the given string contains legal characters for a name\n        // Fails with an exception on error\n\n        // `str` the string to check\n        this.assertLegalName = this.assertLegalName.bind(this);\n        options || (options = {});\n        this.options = options;\n        if (!this.options.version) {\n          this.options.version = '1.0';\n        }\n        ref = options.stringify || {};\n        for (key in ref) {\n          if (!hasProp.call(ref, key)) continue;\n          value = ref[key];\n          this[key] = value;\n        }\n      }\n\n      // Defaults\n      name(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalName('' + val || '');\n      }\n\n      text(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar(this.textEscape('' + val || ''));\n      }\n\n      cdata(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        val = val.replace(']]>', ']]]]><![CDATA[>');\n        return this.assertLegalChar(val);\n      }\n\n      comment(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (val.match(/--/)) {\n          throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n\n      raw(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return '' + val || '';\n      }\n\n      attValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n      }\n\n      insTarget(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      insValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (val.match(/\\?>/)) {\n          throw new Error(\"Invalid processing instruction value: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n\n      xmlVersion(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (!val.match(/1\\.[0-9]+/)) {\n          throw new Error(\"Invalid version number: \" + val);\n        }\n        return val;\n      }\n\n      xmlEncoding(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n          throw new Error(\"Invalid encoding: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n\n      xmlStandalone(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        if (val) {\n          return \"yes\";\n        } else {\n          return \"no\";\n        }\n      }\n\n      dtdPubID(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdSysID(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdElementValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdAttType(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdAttDefault(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdEntityValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdNData(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      assertLegalChar(str) {\n        var regex, res;\n        if (this.options.noValidation) {\n          return str;\n        }\n        if (this.options.version === '1.0') {\n          // Valid characters from https://www.w3.org/TR/xml/#charsets\n          // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n          // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n          // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n          //   let xml_10_InvalidChars = regenerate()\n          //     .addRange(0x0000, 0x0008)\n          //     .add(0x000B, 0x000C)\n          //     .addRange(0x000E, 0x001F)\n          //     .addRange(0xD800, 0xDFFF)\n          //     .addRange(0xFFFE, 0xFFFF)\n          regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g;\n          if (this.options.invalidCharReplacement !== void 0) {\n            str = str.replace(regex, this.options.invalidCharReplacement);\n          } else if (res = str.match(regex)) {\n            throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n          }\n        } else if (this.options.version === '1.1') {\n          // Valid characters from https://www.w3.org/TR/xml11/#charsets\n          // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n          // [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n          // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n          //   let xml_11_InvalidChars = regenerate()\n          //     .add(0x0000)\n          //     .addRange(0xD800, 0xDFFF)\n          //     .addRange(0xFFFE, 0xFFFF)\n          regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g;\n          if (this.options.invalidCharReplacement !== void 0) {\n            str = str.replace(regex, this.options.invalidCharReplacement);\n          } else if (res = str.match(regex)) {\n            throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n          }\n        }\n        return str;\n      }\n\n      assertLegalName(str) {\n        var regex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        str = this.assertLegalChar(str);\n        regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n        if (!str.match(regex)) {\n          throw new Error(`Invalid character in name: ${str}`);\n        }\n        return str;\n      }\n\n      // Escapes special characters in text\n\n      // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n\n      // `str` the string to escape\n      textEscape(str) {\n        var ampregex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        ampregex = this.options.noDoubleEncoding ? /(?!&(lt|gt|amp|apos|quot);)&/g : /&/g;\n        return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n      }\n\n      // Escapes special characters in attribute values\n\n      // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n\n      // `str` the string to escape\n      attEscape(str) {\n        var ampregex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        ampregex = this.options.noDoubleEncoding ? /(?!&(lt|gt|amp|apos|quot);)&/g : /&/g;\n        return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n      }\n\n    };\n\n    // strings to match while converting from JS objects\n    XMLStringifier.prototype.convertAttKey = '@';\n\n    XMLStringifier.prototype.convertPIKey = '?';\n\n    XMLStringifier.prototype.convertTextKey = '#text';\n\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    return XMLStringifier;\n\n  }).call(this);\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}