{"ast":null,"code":"const _Terminal = require('./terminal');\nconst _BarElement = require('./generic-bar');\nconst _options = require('./options');\nconst _EventEmitter = require('events');\n\n// Progress-Bar constructor\nmodule.exports = class MultiBar extends _EventEmitter {\n  constructor(options, preset) {\n    super();\n\n    // list of bars\n    this.bars = [];\n\n    // parse+store options\n    this.options = _options.parse(options, preset);\n\n    // disable synchronous updates\n    this.options.synchronousUpdate = false;\n\n    // store terminal instance\n    this.terminal = this.options.terminal ? this.options.terminal : new _Terminal(this.options.stream);\n\n    // the update timer\n    this.timer = null;\n\n    // progress bar active ?\n    this.isActive = false;\n\n    // update interval\n    this.schedulingRate = this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule;\n  }\n\n  // add a new bar to the stack\n  create(total, startValue, payload) {\n    // progress updates are only visible in TTY mode!\n    if (this.options.noTTYOutput === false && this.terminal.isTTY() === false) {\n      return;\n    }\n\n    // create new bar element\n    const bar = new _BarElement(this.options);\n\n    // store bar\n    this.bars.push(bar);\n\n    // multiprogress already active ?\n    if (!this.isActive) {\n      // hide the cursor ?\n      if (this.options.hideCursor === true) {\n        this.terminal.cursor(false);\n      }\n\n      // disable line wrapping ?\n      if (this.options.linewrap === false) {\n        this.terminal.lineWrapping(false);\n      }\n\n      // initialize update timer\n      this.timer = setTimeout(this.update.bind(this), this.schedulingRate);\n    }\n\n    // set flag\n    this.isActive = true;\n\n    // start progress bar\n    bar.start(total, startValue, payload);\n\n    // trigger event\n    this.emit('start');\n\n    // return new instance\n    return bar;\n  }\n\n  // remove a bar from the stack\n  remove(bar) {\n    // find element\n    const index = this.bars.indexOf(bar);\n\n    // element found ?\n    if (index < 0) {\n      return false;\n    }\n\n    // remove element\n    this.bars.splice(index, 1);\n\n    // force update\n    this.update();\n\n    // clear bottom\n    this.terminal.newline();\n    this.terminal.clearBottom();\n    return true;\n  }\n\n  // internal update routine\n  update() {\n    // stop timer\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n\n    // trigger event\n    this.emit('update-pre');\n\n    // reset cursor\n    this.terminal.cursorRelativeReset();\n\n    // trigger event\n    this.emit('redraw-pre');\n\n    // update each bar\n    for (let i = 0; i < this.bars.length; i++) {\n      // add new line ?\n      if (i > 0) {\n        this.terminal.newline();\n      }\n\n      // render\n      this.bars[i].render();\n    }\n\n    // trigger event\n    this.emit('redraw-post');\n\n    // add new line in notty mode!\n    if (this.options.noTTYOutput && this.terminal.isTTY() === false) {\n      this.terminal.newline();\n      this.terminal.newline();\n    }\n\n    // next update\n    this.timer = setTimeout(this.update.bind(this), this.schedulingRate);\n\n    // trigger event\n    this.emit('update-post');\n\n    // stop if stopOnComplete and all bars stopped\n    if (this.options.stopOnComplete && !this.bars.find(bar => bar.isActive)) {\n      this.stop();\n    }\n  }\n  stop() {\n    // stop timer\n    clearTimeout(this.timer);\n    this.timer = null;\n\n    // set flag\n    this.isActive = false;\n\n    // cursor hidden ?\n    if (this.options.hideCursor === true) {\n      this.terminal.cursor(true);\n    }\n\n    // re-enable line wrpaping ?\n    if (this.options.linewrap === false) {\n      this.terminal.lineWrapping(true);\n    }\n\n    // reset cursor\n    this.terminal.cursorRelativeReset();\n\n    // trigger event\n    this.emit('stop-pre-clear');\n\n    // clear line on complete ?\n    if (this.options.clearOnComplete) {\n      // clear all bars\n      this.terminal.clearBottom();\n\n      // or show final progress ?\n    } else {\n      // update each bar\n      for (let i = 0; i < this.bars.length; i++) {\n        // add new line ?\n        if (i > 0) {\n          this.terminal.newline();\n        }\n\n        // trigger final rendering\n        this.bars[i].render();\n\n        // stop\n        this.bars[i].stop();\n      }\n\n      // new line on complete\n      this.terminal.newline();\n    }\n\n    // trigger event\n    this.emit('stop');\n  }\n};","map":{"version":3,"names":["_Terminal","require","_BarElement","_options","_EventEmitter","module","exports","MultiBar","constructor","options","preset","bars","parse","synchronousUpdate","terminal","stream","timer","isActive","schedulingRate","isTTY","throttleTime","notTTYSchedule","create","total","startValue","payload","noTTYOutput","bar","push","hideCursor","cursor","linewrap","lineWrapping","setTimeout","update","bind","start","emit","remove","index","indexOf","splice","newline","clearBottom","clearTimeout","cursorRelativeReset","i","length","render","stopOnComplete","find","stop","clearOnComplete"],"sources":["/Users/Qusai.Qishta/node_modules/cli-progress/lib/multi-bar.js"],"sourcesContent":["const _Terminal = require('./terminal');\nconst _BarElement = require('./generic-bar');\nconst _options = require('./options');\nconst _EventEmitter = require('events');\n\n// Progress-Bar constructor\nmodule.exports = class MultiBar extends _EventEmitter{\n\n    constructor(options, preset){\n        super();\n\n        // list of bars\n        this.bars = [];\n\n        // parse+store options\n        this.options = _options.parse(options, preset);\n\n        // disable synchronous updates\n        this.options.synchronousUpdate = false;\n\n        // store terminal instance\n        this.terminal = (this.options.terminal) ? this.options.terminal : new _Terminal(this.options.stream);\n\n        // the update timer\n        this.timer = null;\n\n        // progress bar active ?\n        this.isActive = false;\n\n        // update interval\n        this.schedulingRate = (this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule);\n    }\n\n    // add a new bar to the stack\n    create(total, startValue, payload){\n        // progress updates are only visible in TTY mode!\n        if (this.options.noTTYOutput === false && this.terminal.isTTY() === false){\n            return;\n        }\n        \n        // create new bar element\n        const bar = new _BarElement(this.options);\n\n        // store bar\n        this.bars.push(bar);\n\n        // multiprogress already active ?\n        if (!this.isActive){\n            // hide the cursor ?\n            if (this.options.hideCursor === true){\n                this.terminal.cursor(false);\n            }\n\n            // disable line wrapping ?\n            if (this.options.linewrap === false){\n                this.terminal.lineWrapping(false);\n            }\n    \n            // initialize update timer\n            this.timer = setTimeout(this.update.bind(this), this.schedulingRate);\n        }\n\n        // set flag\n        this.isActive = true;\n\n        // start progress bar\n        bar.start(total, startValue, payload);\n\n        // trigger event\n        this.emit('start');\n\n        // return new instance\n        return bar;\n    }\n\n    // remove a bar from the stack\n    remove(bar){\n        // find element\n        const index = this.bars.indexOf(bar);\n\n        // element found ?\n        if (index < 0){\n            return false;\n        }\n\n        // remove element\n        this.bars.splice(index, 1);\n\n        // force update\n        this.update();\n\n        // clear bottom\n        this.terminal.newline();\n        this.terminal.clearBottom();\n\n        return true;\n    }\n\n    // internal update routine\n    update(){\n        // stop timer\n        if (this.timer){\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n\n        // trigger event\n        this.emit('update-pre');\n        \n        // reset cursor\n        this.terminal.cursorRelativeReset();\n\n        // trigger event\n        this.emit('redraw-pre');\n\n        // update each bar\n        for (let i=0; i< this.bars.length; i++){\n            // add new line ?\n            if (i > 0){\n                this.terminal.newline();\n            }\n\n            // render\n            this.bars[i].render();\n        }\n\n        // trigger event\n        this.emit('redraw-post');\n\n        // add new line in notty mode!\n        if (this.options.noTTYOutput && this.terminal.isTTY() === false){\n            this.terminal.newline();\n            this.terminal.newline();\n        }\n\n        // next update\n        this.timer = setTimeout(this.update.bind(this), this.schedulingRate);\n\n        // trigger event\n        this.emit('update-post');\n\n        // stop if stopOnComplete and all bars stopped\n        if (this.options.stopOnComplete && !this.bars.find(bar => bar.isActive)) {\n            this.stop();\n        }\n    }\n\n    stop(){\n\n        // stop timer\n        clearTimeout(this.timer);\n        this.timer = null;\n\n        // set flag\n        this.isActive = false;\n\n        // cursor hidden ?\n        if (this.options.hideCursor === true){\n            this.terminal.cursor(true);\n        }\n\n        // re-enable line wrpaping ?\n        if (this.options.linewrap === false){\n            this.terminal.lineWrapping(true);\n        }\n\n        // reset cursor\n        this.terminal.cursorRelativeReset();\n\n        // trigger event\n        this.emit('stop-pre-clear');\n\n        // clear line on complete ?\n        if (this.options.clearOnComplete){\n            // clear all bars\n            this.terminal.clearBottom();\n            \n        // or show final progress ?\n        }else{\n            // update each bar\n            for (let i=0; i< this.bars.length; i++){\n                // add new line ?\n                if (i > 0){\n                    this.terminal.newline();\n                }\n\n                // trigger final rendering\n                this.bars[i].render();\n\n                // stop\n                this.bars[i].stop();\n            }\n\n            // new line on complete\n            this.terminal.newline();\n        }\n\n        // trigger event\n        this.emit('stop');\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}