{"ast":null,"code":"/* eslint-disable object-shorthand */\nvar _ = require('lodash').noConflict(),\n  v1Common = require('../common/v1'),\n  v2Common = require('../common/v2'),\n  util = require('../util'),\n  url = require('../url'),\n  Builders = function (options) {\n    this.options = options || {};\n  },\n  script = function (entityV1, listen, key) {\n    return {\n      listen: listen,\n      script: {\n        type: 'text/javascript',\n        exec: _.isString(entityV1[key]) ? entityV1[key].split('\\n') : entityV1[key]\n      }\n    };\n  },\n  authIdMap = {\n    apikey: 'apikeyAuth',\n    awsSigV4: 'awsSigV4',\n    basic: 'basicAuth',\n    bearer: 'bearerAuth',\n    digest: 'digestAuth',\n    hawk: 'hawkAuth',\n    ntlm: 'ntlmAuth',\n    oAuth1: 'oAuth1',\n    oAuth2: 'oAuth2'\n  },\n  /**\n   * Normalizes `description` field of an entity.\n   * If `description` field is absent, this is a no-op.\n   * Will mutate the entity.\n   *\n   * @param {Object} entity - Wrapper object, possibly containing a description field\n   * @param {Object} builder - Builder instance that will be called to perform normalization\n   * @param {Object} utilOptions - Options to be passed to util fn\n   */\n  normalizeDescription = function (entity, builder, utilOptions) {\n    var retainEmptyValues = _.get(utilOptions, 'retainEmptyValues');\n    if (_.has(entity, 'description')) {\n      entity.description = builder.description(entity.description);\n    }\n    util.cleanEmptyValue(entity, 'description', retainEmptyValues);\n    return entity;\n  };\n_.assign(Builders.prototype, {\n  /**\n   * Normalizes inherited v1 auth manifests.\n   *\n   * @param {Object} entityV1 - A v1 compliant wrapped auth manifest.\n   * @param {?Object} options - The set of options for the current auth cleansing operation.\n   * @param {?Boolean} [options.includeNoauth=false] - When set to true, noauth is set to ''.\n   *\n   * @returns {Object} - A v1 compliant set of auth helper attributes.\n   */\n  auth: function (entityV1, options) {\n    if (!entityV1) {\n      return;\n    }\n    var auth,\n      params,\n      mapper,\n      currentHelper,\n      helperAttributes,\n      prioritizeV2 = this.options.prioritizeV2;\n\n    // if prioritize v2 is true, use auth as the source of truth\n    if (util.notLegacy(entityV1, 'auth') || entityV1.auth && prioritizeV2) {\n      return util.sanitizeAuthArray(entityV1, options);\n    }\n    if (entityV1.currentHelper === null || entityV1.currentHelper === 'normal') {\n      return null;\n    }\n    currentHelper = entityV1.currentHelper;\n    helperAttributes = entityV1.helperAttributes;\n\n    // if noDefaults is false and there is no currentHelper, bail out\n    if (!(currentHelper || this.options.noDefaults)) {\n      return;\n    }\n    // if there is a currentHelper without helperAttributes, bail out.\n    if (currentHelper && !helperAttributes) {\n      return this.options.noDefaults ? undefined : null;\n    }\n    !currentHelper && (currentHelper = authIdMap[helperAttributes && helperAttributes.id]);\n    auth = {\n      type: v1Common.authMap[currentHelper]\n    };\n    mapper = util.authMappersFromLegacy[currentHelper];\n\n    // @todo: Change this to support custom auth helpers\n    mapper && helperAttributes && (params = mapper(helperAttributes)) && (auth[auth.type] = params);\n    return util.authMapToArray({\n      auth: auth\n    }, options);\n  },\n  /**\n   * Normalizes v1 collection events.\n   *\n   * @param {Object} entityV1 - The v1 entity to be normalized.\n   * @returns {Array|null} - The normalized events.\n   */\n  events: function (entityV1) {\n    if (!entityV1) {\n      return;\n    }\n    if ((util.notLegacy(entityV1, 'event') || this.options.prioritizeV2) && !_.isEmpty(entityV1.events)) {\n      // @todo: Improve this to order prerequest events before test events\n      _.forEach(entityV1.events, function (event) {\n        !event.listen && (event.listen = 'test');\n        if (event.script) {\n          !event.script.type && (event.script.type = 'text/javascript');\n\n          // @todo: Add support for src\n          _.isString(event.script.exec) && (event.script.exec = event.script.exec.split('\\n'));\n        }\n      });\n      return entityV1.events;\n    }\n    var events = [];\n    entityV1.preRequestScript && events.push(script(entityV1, 'prerequest', 'preRequestScript'));\n    entityV1.tests && events.push(script(entityV1, 'test', 'tests'));\n    if (events.length) {\n      return events;\n    }\n\n    // retain `null` events\n    if (entityV1.events === null) {\n      return null;\n    }\n  },\n  /**\n   * Facilitates sanitized variable transformations across all levels for v1 collection normalization.\n   *\n   * @param {Object} entity - The wrapper object containing variable definitions.\n   * @param {?Object} options - The set of options for the current variable transformation.\n   * @param {?Object} options.fallback - The set of fallback values to be applied when no variables exist.\n   * @param {?Boolean} options.noDefaults - When set to true, no defaults are applied.\n   * @param {?Boolean} options.retainIds - When set to true, ids are left as is.\n   * @returns {Object[]} - The set of sanitized variables.\n   */\n  variables: function (entity, options) {\n    var self = this,\n      // Use builder's own options if override is not requested\n      results = util.handleVars(entity, options || this.options);\n\n    // Normalize descriptions that may have been passed in as objects\n    results = _.map(results, function (item) {\n      return normalizeDescription(item, self, options || self.options);\n    });\n    if (results.length) {\n      return results;\n    }\n  },\n  /**\n   * Sanitizes request v1 data.\n   *\n   * @param {Object} requestV1 - The wrapper v1 request object around the data list to be sanitized.\n   * @returns {Object[]} - The normalized list of request body parameters.\n   */\n  data: function (requestV1) {\n    if (!requestV1) {\n      return;\n    }\n    var self = this,\n      mode = requestV1.dataMode,\n      noDefaults = this.options.noDefaults,\n      retainEmptyValues = this.options.retainEmptyValues;\n    if ((!mode || mode === 'binary') && !noDefaults) {\n      return retainEmptyValues ? [] : undefined;\n    }\n    if (!requestV1.data) {\n      return;\n    }\n    _.isArray(requestV1.data) && _.forEach(requestV1.data, function (datum) {\n      if (datum.type === 'file' && (_.has(datum, 'value') || !noDefaults)) {\n        datum.value = _.isString(datum.value) || _.isArray(datum.value) ? datum.value : null;\n      }\n      normalizeDescription(datum, self, self.options);\n    });\n    return requestV1.data;\n  },\n  /**\n   * Normalizes a list of header data from the incoming raw v1 request.\n   *\n   * @param {Object} requestV1 - The raw v1 request object.\n   * @returns {Object[]} - The normalized list of header datum values.\n   */\n  headerData: function (requestV1) {\n    var self = this,\n      normalizedHeaderData;\n    if (!requestV1) {\n      return;\n    }\n    if (requestV1.headers && _.isEmpty(requestV1.headerData)) {\n      // this converts a newline concatenated string of headers to an array, so there are no descriptions\n      return v1Common.parseHeaders(requestV1.headers, true);\n    }\n\n    // however, if non empty headerData already exists, sanitize it.\n    normalizedHeaderData = _.map(requestV1.headerData, function (entity) {\n      return normalizeDescription(entity, self, self.options);\n    });\n    if (normalizedHeaderData.length) {\n      return normalizedHeaderData;\n    }\n  },\n  queryParams: function (requestV1) {\n    if (!requestV1) {\n      return;\n    }\n    var self = this,\n      normalizedQueryParams,\n      urlObj;\n    if (!requestV1.queryParams) {\n      return requestV1.url && (urlObj = url.parse(requestV1.url)) && urlObj.query;\n    }\n    normalizedQueryParams = _.map(requestV1.queryParams, function (entity) {\n      return normalizeDescription(entity, self, self.options);\n    });\n    if (normalizedQueryParams.length) {\n      return normalizedQueryParams;\n    }\n  },\n  /**\n   * Facilitates sanitized variable transformations across all levels for v1 collection normalization.\n   *\n   * @param {Object} entity - The wrapper object containing variable definitions.\n   * @param {?Object} [options] - The set of options for the current variable transformation.\n   * @param {?Object} [options.fallback] - The set of fallback values to be applied when no variables exist.\n   * @param {?Boolean} [options.noDefaults] - When set to true, no defaults are applied.\n   * @param {?Boolean} [options.retainEmptyValues] - When set to true, empty values are set to null instead of being\n   * removed.\n   * @param {?Boolean} [options.retainIds] - When set to true, ids are left as is.\n   * @returns {Object[]} - The set of sanitized variables.\n   */\n  pathVariableData: function (entity, options) {\n    var self = this,\n      results = util.handleVars(entity, options, {\n        isV1: true\n      });\n\n    // Normalize descriptions that may have been passed in as objects\n    results = _.map(results, function (item) {\n      return normalizeDescription(item, self, self.options);\n    });\n    if (results.length) {\n      return results;\n    }\n  },\n  /**\n   * Normalizes a potentially raw v1 request object.\n   *\n   * @param {Object} requestV1 - The potentially raw v1 request object.\n   * @param {?String} collectionId - A unique identifier for the v1 collection.\n   * @param {?Boolean} [skipResponses=false] - When set to true, saved responses will be excluded from the result..\n   * @returns {Object} - The normalized v1 request object.\n   */\n  request: function (requestV1, collectionId, skipResponses) {\n    if (!requestV1) {\n      return;\n    }\n    var map,\n      auth,\n      tests,\n      events,\n      mapper,\n      variables,\n      self = this,\n      helperAttributes,\n      preRequestScript,\n      options = this.options,\n      noDefaults = options.noDefaults,\n      retainEmpty = options.retainEmptyValues,\n      varOpts = {\n        noDefaults: options.noDefaults,\n        retainIds: options.retainIds\n      },\n      units = ['queryParams', 'pathVariableData', 'headerData', 'data'];\n    if (!skipResponses) {\n      units.push('responses');\n      units.push('responses_order');\n    }\n\n    // if noDefaults is true, do not replace the id\n    // else\n    // if id is falsy, replace the id\n    // if retainIds is false, replace the id\n    !(options.retainIds && requestV1.id || options.noDefaults) && (requestV1.id = util.uid());\n    normalizeDescription(requestV1, self, self.options);\n    units.forEach(function (unit) {\n      var result = self[unit](requestV1, self.options);\n      result && (requestV1[unit] = result);\n    });\n    if (requestV1.dataDisabled) {\n      requestV1.dataDisabled = true;\n    } else if (retainEmpty) {\n      requestV1.dataDisabled = false;\n    } else {\n      delete requestV1.dataDisabled;\n    }\n\n    // remove invalid protocolProfileBehavior property from requestV1\n    !util.addProtocolProfileBehavior(requestV1) && delete requestV1.protocolProfileBehavior;\n    collectionId && !noDefaults && (requestV1.collectionId = collectionId);\n\n    // normalized v1 requests should not have falsy helperAttributes or currentHelper\n    if (_.has(requestV1, 'currentHelper')) {\n      requestV1.currentHelper === 'normal' && (requestV1.currentHelper = null);\n      if (!requestV1.currentHelper) {\n        requestV1.currentHelper !== null && (requestV1.currentHelper = null);\n\n        // @todo: Should currentHelper be recreated from helperAttributes.id if falsy?\n        requestV1.helperAttributes = null;\n      }\n    }\n    auth = self.auth(requestV1);\n    if (auth) {\n      requestV1.auth = auth;\n      if (_.has(requestV1, 'helperAttributes') && !requestV1.currentHelper) {\n        requestV1.currentHelper = authIdMap[auth.type];\n      }\n    } else if (auth === null) {\n      // eslint-disable-line security/detect-possible-timing-attacks\n      requestV1.auth = requestV1.currentHelper = requestV1.helperAttributes = null;\n    } else {\n      delete requestV1.auth;\n    }\n    events = self.events(requestV1);\n    if (events || events === null) {\n      requestV1.events = events;\n    } else {\n      delete requestV1.events;\n    }\n    variables = self.variables(requestV1, varOpts);\n    if (variables) {\n      requestV1.variables = variables;\n    } else {\n      delete requestV1.variables;\n    }\n    if (requestV1.auth && (util.notLegacy(requestV1, 'auth') || options.prioritizeV2)) {\n      requestV1.currentHelper = v2Common.authMap[requestV1.auth.type];\n      requestV1.currentHelper === null && (requestV1.helperAttributes = null);\n      mapper = util.authMappersFromCurrent[requestV1.currentHelper];\n      if (mapper) {\n        (map = util.authArrayToMap(requestV1)) && (helperAttributes = mapper(map[requestV1.auth.type]));\n        helperAttributes && (requestV1.helperAttributes = helperAttributes);\n      }\n    }\n    if (requestV1.events && (util.notLegacy(requestV1, 'event') || options.prioritizeV2)) {\n      tests = preRequestScript = '';\n      _.forEach(requestV1.events, function (event) {\n        var exec = event && event.script && event.script.exec;\n        if (!_.isArray(exec)) {\n          return;\n        }\n        if (event.listen === 'prerequest') {\n          preRequestScript += exec.join('\\n');\n        } else if (event.listen === 'test') {\n          tests += exec.join('\\n');\n        }\n      });\n      requestV1.preRequestScript = preRequestScript ? preRequestScript : null;\n      requestV1.tests = tests ? tests : null;\n    }\n\n    // prune\n    ['preRequestScript', 'tests'].forEach(function (script) {\n      if (_.has(requestV1, script) && !requestV1[script] && requestV1[script] !== null) {\n        delete requestV1[script];\n      }\n    });\n    return requestV1;\n  },\n  /**\n   * Normalizes a potentially raw v1 response object.\n   *\n   * @param {Object} responseV1 - The potentially raw v1 response object.\n   * @returns {Object} - The normalized v1 response object.\n   */\n  response: function (responseV1) {\n    var self = this;\n\n    // if noDefaults is true, do not replace the id\n    // else\n    // if id is falsy, replace the id\n    // if retainIds is false, replace the id\n    !(self.options.retainIds && responseV1.id || self.options.noDefaults) && (responseV1.id = util.uid());\n\n    // the true in the next line ensures that we don't recursively go on processing responses in a request.\n    responseV1.request = self.request(responseV1.request, undefined, true);\n    !responseV1.language && (responseV1.language = 'Text');\n    !responseV1.previewType && (responseV1.previewType = 'html');\n    _.isEmpty(responseV1.cookies) && delete responseV1.cookies;\n    return responseV1;\n  },\n  responses: function (requestV1) {\n    if (_.isEmpty(requestV1 && requestV1.responses)) {\n      return;\n    }\n    var self = this;\n    requestV1.responses.forEach(function (response) {\n      self.response(response);\n    });\n    return requestV1.responses;\n  },\n  /**\n   * Normalizes a request order list.\n   *\n   * @param {Object} entityV1 - An object containing a potentially raw list of folder ids.\n   * @returns {Array} - The normalized list of folder ids.\n   */\n  order: function (entityV1) {\n    return !this.options.noDefaults && _.compact(entityV1 && entityV1.order);\n  },\n  /**\n   * Normalizes a folder order list.\n   *\n   * @param {Object} entityV1 - An object containing a potentially raw list of folder ids.\n   * @returns {Array} - The normalized list of folder ids.\n   */\n  folders_order: function (entityV1) {\n    return !this.options.noDefaults && _.compact(entityV1 && entityV1.folders_order);\n  },\n  /**\n   * Normalizes a response order list.\n   *\n   * @param {Object} entityV1 - An object containing a potentially raw list of response ids.\n   * @returns {Array} - The normalized list of response ids.\n   */\n  responses_order: function (entityV1) {\n    return !this.options.noDefaults && _.compact(entityV1 && entityV1.responses_order);\n  },\n  /**\n   * Normalizes a potentially raw v1 folders list.\n   *\n   * @param {Object} collectionV1 - The potentially raw v1 collection object.\n   * @returns {Object[]} - The normalized v1 collection folders list.\n   */\n  folders: function (collectionV1) {\n    if (_.isEmpty(collectionV1 && collectionV1.folders)) {\n      return;\n    }\n    var auth,\n      events,\n      variables,\n      self = this,\n      order,\n      foldersOrder,\n      retainEmpty = self.options.retainEmptyValues,\n      varOpts = {\n        noDefaults: self.options.noDefaults,\n        retainIds: self.options.retainIds\n      };\n    _.forEach(collectionV1.folders, function (folder) {\n      if (!folder) {\n        return;\n      }\n\n      // if noDefaults is true, do not replace the id\n      // else\n      // if id is falsy, replace the id\n      // if retainIds is false, replace the id\n      !(self.options.retainIds && folder.id || self.options.noDefaults) && (folder.id = util.uid());\n      folder.description = self.description(folder.description);\n      util.cleanEmptyValue(folder, 'description', retainEmpty);\n\n      // remove invalid protocolProfileBehavior property\n      !util.addProtocolProfileBehavior(folder) && delete folder.protocolProfileBehavior;\n      auth = self.auth(folder);\n      !_.isEmpty(order = self.order(folder)) && (folder.order = order);\n      !_.isEmpty(foldersOrder = self.folders_order(folder)) && (folder.folders_order = foldersOrder);\n      (auth || auth === null) && (folder.auth = auth);\n      (events = self.events(folder)) && (folder.events = events);\n      (variables = self.variables(folder, varOpts)) && (folder.variables = variables);\n    });\n    return _.compact(collectionV1.folders);\n  },\n  /**\n   * Normalizes a potentially raw v1 request object.\n   *\n   * @param {Object} collectionV1 - The potentially raw v1 collection object.\n   * @returns {Object[]|*} - The normalized v1 request list.\n   */\n  requests: function (collectionV1) {\n    if (_.isEmpty(collectionV1 && collectionV1.requests)) {\n      return;\n    }\n    var self = this;\n    collectionV1.requests.forEach(function (request) {\n      self.request(request);\n    });\n    return _.compact(collectionV1.requests);\n  },\n  /**\n   * Creates the v1.0.0 compatible description string.\n   *\n   * @param {Object} maybeObjectDescription - The description to be converted\n   *\n   * @returns {String} - The resultant v1 description.\n   */\n  description: function (maybeObjectDescription) {\n    var description,\n      retainEmpty = _.get(this.options, 'retainEmptyValues'),\n      createDefaultValue = !_.get(this.options, 'noDefaults', false);\n    if (_.isObject(maybeObjectDescription)) {\n      description = _.toString(_.get(maybeObjectDescription, 'content'));\n    } else {\n      description = maybeObjectDescription;\n    }\n    if (description) {\n      return description;\n    } else if (description === undefined && createDefaultValue) {\n      return null;\n    } else if (_.isEmpty(description) && retainEmpty) {\n      return null;\n    }\n    return undefined;\n  }\n});\nmodule.exports = {\n  /**\n   * Normalizes a single v1 request.\n   *\n   * @param {Object} request - The v1 request to be normalized.\n   * @param {Object} options - The set of options for the current normalization.\n   * @param {?Boolean} [options.mutate=false] - When set to true, normalization is done in place.\n   * @param {?Boolean} [options.noDefaults=false] - When set to true, sensible defaults are not added.\n   * @param {?Boolean} [options.prioritizeV2=false] - When set to true, v2 style properties are checked first.\n   * @param {?Boolean} [options.retainEmptyValues=false] - When set to true, empty values are set to '' instead of\n   * being removed.\n   * @param {Function} callback - A function that is invoked when the normalization has completed.\n   * @returns {*}\n   */\n  normalizeSingle: function (request, options, callback) {\n    var err,\n      normalized,\n      builders = new Builders(options);\n\n    // At this stage, mutate will not be passed ordinarily. Hence, the falsy nature of options.mutate can be used\n    // to selectively clone the request.\n    options && !options.mutate && (request = _.cloneDeep(request));\n    try {\n      normalized = builders.request(request);\n    } catch (e) {\n      err = e;\n    }\n    if (callback) {\n      return callback(err, normalized);\n    }\n    if (err) {\n      throw err;\n    }\n    return normalized;\n  },\n  /**\n   * Normalizes a single v1 response.\n   *\n   * @param {Object} response - The v1 request to be normalized.\n   * @param {Object} options - The set of options for the current normalization.\n   * @param {?Boolean} [options.mutate=false] - When set to true, normalization is done in place.\n   * @param {?Boolean} [options.noDefaults=false] - When set to true, sensible defaults are not added.\n   * @param {?Boolean} [options.prioritizeV2=false] - When set to true, v2 style properties are checked first.\n   * @param {?Boolean} [options.retainEmptyValues=false] - When set to true, empty values are set to '' instead of\n   * being removed.\n   * @param {Function} callback - A function that is invoked when the normalization has completed.\n   * @returns {*}\n   */\n  normalizeResponse: function (response, options, callback) {\n    var err,\n      normalized,\n      builders = new Builders(options);\n\n    // At this stage, mutate will not be passed ordinarily. Hence, the falsy nature of options.mutate can be used\n    // to selectively clone the response.\n    options && !options.mutate && (response = _.cloneDeep(response));\n    try {\n      normalized = builders.response(response);\n    } catch (e) {\n      err = e;\n    }\n    if (callback) {\n      return callback(err, normalized);\n    }\n    if (err) {\n      throw err;\n    }\n    return normalized;\n  },\n  /**\n   * Converts a V1 collection to a V2 collection (performs ID replacement, etc as necessary).\n   *\n   * @param {Object} collection - The v1 collection to be normalized.\n   * @param {Object} options - The options for the current normalization sequence.\n   * @param {?Boolean} [options.mutate=false] - When set to true, normalization is done in place.\n   * @param {?Boolean} [options.noDefaults=false] - When set to true, sensible defaults are not added.\n   * @param {?Boolean} [options.prioritizeV2=false] - When set to true, v2 style properties are checked first.\n   * @param {?Boolean} [options.retainEmptyValues=false] - When set to true, empty values are set to '' instead of\n   * being removed.\n   * @param {Function} callback - A function invoked to indicate that the normalization has completed.\n   * @returns {*}\n   */\n  normalize: function (collection, options, callback) {\n    // At this stage, mutate will not be passed ordinarily. Hence, the falsy nature of options.mutate can be used\n    // to selectively clone the collection.\n    options && !options.mutate && (collection = _.cloneDeep(collection));\n    var auth,\n      authOptions = {\n        excludeNoauth: true\n      },\n      builders = new Builders(options),\n      units = ['events', 'variables', 'order', 'folders_order', 'folders', 'requests'];\n\n    // if noDefaults is true, do not replace the id\n    // else\n    // if id is falsy, replace the id\n    // if retainIds is false, replace the id\n    !(options.retainIds && collection.id || options.noDefaults) && (collection.id = util.uid());\n    normalizeDescription(collection, builders, options);\n\n    // remove invalid protocolProfileBehavior property\n    !util.addProtocolProfileBehavior(collection) && delete collection.protocolProfileBehavior;\n    try {\n      auth = builders.auth(collection, authOptions);\n      if (auth || options.retainEmptyValues && auth === null) {\n        collection.auth = auth;\n      } else {\n        delete collection.auth;\n      }\n      units.forEach(function (unit) {\n        var result, _options;\n        if (unit === 'variables') {\n          _options = {\n            retainIds: options.retainIds,\n            noDefaults: options.noDefaults\n          };\n        }\n        if (!_.isEmpty(result = builders[unit](collection, _options)) || unit === 'folders') {\n          collection[unit] = result;\n        }\n      });\n    } catch (e) {\n      if (callback) {\n        return callback(e, null);\n      }\n      throw e;\n    }\n    if (callback) {\n      return callback(null, collection);\n    }\n    return collection;\n  }\n};","map":{"version":3,"names":["_","require","noConflict","v1Common","v2Common","util","url","Builders","options","script","entityV1","listen","key","type","exec","isString","split","authIdMap","apikey","awsSigV4","basic","bearer","digest","hawk","ntlm","oAuth1","oAuth2","normalizeDescription","entity","builder","utilOptions","retainEmptyValues","get","has","description","cleanEmptyValue","assign","prototype","auth","params","mapper","currentHelper","helperAttributes","prioritizeV2","notLegacy","sanitizeAuthArray","noDefaults","undefined","id","authMap","authMappersFromLegacy","authMapToArray","events","isEmpty","forEach","event","preRequestScript","push","tests","length","variables","self","results","handleVars","map","item","data","requestV1","mode","dataMode","isArray","datum","value","headerData","normalizedHeaderData","headers","parseHeaders","queryParams","normalizedQueryParams","urlObj","parse","query","pathVariableData","isV1","request","collectionId","skipResponses","retainEmpty","varOpts","retainIds","units","uid","unit","result","dataDisabled","addProtocolProfileBehavior","protocolProfileBehavior","authMappersFromCurrent","authArrayToMap","join","response","responseV1","language","previewType","cookies","responses","order","compact","folders_order","responses_order","folders","collectionV1","foldersOrder","folder","requests","maybeObjectDescription","createDefaultValue","isObject","toString","module","exports","normalizeSingle","callback","err","normalized","builders","mutate","cloneDeep","e","normalizeResponse","normalize","collection","authOptions","excludeNoauth","_options"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection-transformer/lib/normalizers/v1.js"],"sourcesContent":["/* eslint-disable object-shorthand */\nvar _ = require('lodash').noConflict(),\n    v1Common = require('../common/v1'),\n    v2Common = require('../common/v2'),\n    util = require('../util'),\n    url = require('../url'),\n\n    Builders = function (options) {\n        this.options = options || {};\n    },\n    script = function (entityV1, listen, key) {\n        return {\n            listen: listen,\n            script: {\n                type: 'text/javascript',\n                exec: _.isString(entityV1[key]) ? entityV1[key].split('\\n') : entityV1[key]\n            }\n        };\n    },\n\n    authIdMap = {\n        apikey: 'apikeyAuth',\n        awsSigV4: 'awsSigV4',\n        basic: 'basicAuth',\n        bearer: 'bearerAuth',\n        digest: 'digestAuth',\n        hawk: 'hawkAuth',\n        ntlm: 'ntlmAuth',\n        oAuth1: 'oAuth1',\n        oAuth2: 'oAuth2'\n    },\n\n    /**\n     * Normalizes `description` field of an entity.\n     * If `description` field is absent, this is a no-op.\n     * Will mutate the entity.\n     *\n     * @param {Object} entity - Wrapper object, possibly containing a description field\n     * @param {Object} builder - Builder instance that will be called to perform normalization\n     * @param {Object} utilOptions - Options to be passed to util fn\n     */\n    normalizeDescription = function (entity, builder, utilOptions) {\n        var retainEmptyValues = _.get(utilOptions, 'retainEmptyValues');\n\n        if (_.has(entity, 'description')) {\n            entity.description = builder.description(entity.description);\n        }\n        util.cleanEmptyValue(entity, 'description', retainEmptyValues);\n\n        return entity;\n    };\n\n_.assign(Builders.prototype, {\n\n    /**\n     * Normalizes inherited v1 auth manifests.\n     *\n     * @param {Object} entityV1 - A v1 compliant wrapped auth manifest.\n     * @param {?Object} options - The set of options for the current auth cleansing operation.\n     * @param {?Boolean} [options.includeNoauth=false] - When set to true, noauth is set to ''.\n     *\n     * @returns {Object} - A v1 compliant set of auth helper attributes.\n     */\n    auth: function (entityV1, options) {\n        if (!entityV1) { return; }\n\n        var auth,\n            params,\n            mapper,\n            currentHelper,\n            helperAttributes,\n            prioritizeV2 = this.options.prioritizeV2;\n\n        // if prioritize v2 is true, use auth as the source of truth\n        if (util.notLegacy(entityV1, 'auth') || (entityV1.auth && prioritizeV2)) {\n            return util.sanitizeAuthArray(entityV1, options);\n        }\n        if ((entityV1.currentHelper === null) || (entityV1.currentHelper === 'normal')) { return null; }\n\n        currentHelper = entityV1.currentHelper;\n        helperAttributes = entityV1.helperAttributes;\n\n        // if noDefaults is false and there is no currentHelper, bail out\n        if (!(currentHelper || this.options.noDefaults)) { return; }\n        // if there is a currentHelper without helperAttributes, bail out.\n        if (currentHelper && !helperAttributes) { return this.options.noDefaults ? undefined : null; }\n\n        !currentHelper && (currentHelper = authIdMap[helperAttributes && helperAttributes.id]);\n        auth = { type: v1Common.authMap[currentHelper] };\n        mapper = util.authMappersFromLegacy[currentHelper];\n\n        // @todo: Change this to support custom auth helpers\n        mapper && helperAttributes && (params = mapper(helperAttributes)) && (auth[auth.type] = params);\n\n        return util.authMapToArray({ auth: auth }, options);\n    },\n\n    /**\n     * Normalizes v1 collection events.\n     *\n     * @param {Object} entityV1 - The v1 entity to be normalized.\n     * @returns {Array|null} - The normalized events.\n     */\n    events: function (entityV1) {\n        if (!entityV1) { return; }\n        if ((util.notLegacy(entityV1, 'event') || this.options.prioritizeV2) && !_.isEmpty(entityV1.events)) {\n            // @todo: Improve this to order prerequest events before test events\n            _.forEach(entityV1.events, function (event) {\n                !event.listen && (event.listen = 'test');\n\n                if (event.script) {\n                    !event.script.type && (event.script.type = 'text/javascript');\n\n                    // @todo: Add support for src\n                    _.isString(event.script.exec) && (event.script.exec = event.script.exec.split('\\n'));\n                }\n            });\n\n            return entityV1.events;\n        }\n\n        var events = [];\n\n        entityV1.preRequestScript && events.push(script(entityV1, 'prerequest', 'preRequestScript'));\n        entityV1.tests && events.push(script(entityV1, 'test', 'tests'));\n\n        if (events.length) { return events; }\n\n        // retain `null` events\n        if (entityV1.events === null) { return null; }\n    },\n\n    /**\n     * Facilitates sanitized variable transformations across all levels for v1 collection normalization.\n     *\n     * @param {Object} entity - The wrapper object containing variable definitions.\n     * @param {?Object} options - The set of options for the current variable transformation.\n     * @param {?Object} options.fallback - The set of fallback values to be applied when no variables exist.\n     * @param {?Boolean} options.noDefaults - When set to true, no defaults are applied.\n     * @param {?Boolean} options.retainIds - When set to true, ids are left as is.\n     * @returns {Object[]} - The set of sanitized variables.\n     */\n    variables: function (entity, options) {\n        var self = this,\n            // Use builder's own options if override is not requested\n            results = util.handleVars(entity, options || this.options);\n\n        // Normalize descriptions that may have been passed in as objects\n        results = _.map(results, function (item) {\n            return normalizeDescription(item, self, options || self.options);\n        });\n\n        if (results.length) {\n            return results;\n        }\n    },\n\n    /**\n     * Sanitizes request v1 data.\n     *\n     * @param {Object} requestV1 - The wrapper v1 request object around the data list to be sanitized.\n     * @returns {Object[]} - The normalized list of request body parameters.\n     */\n    data: function (requestV1) {\n        if (!requestV1) { return; }\n\n        var self = this,\n            mode = requestV1.dataMode,\n            noDefaults = this.options.noDefaults,\n            retainEmptyValues = this.options.retainEmptyValues;\n\n        if ((!mode || mode === 'binary') && !noDefaults) {\n            return retainEmptyValues ? [] : undefined;\n        }\n        if (!requestV1.data) { return; }\n\n        _.isArray(requestV1.data) && _.forEach(requestV1.data, function (datum) {\n            if (datum.type === 'file' && (_.has(datum, 'value') || !noDefaults)) {\n                datum.value = (_.isString(datum.value) || _.isArray(datum.value)) ? datum.value : null;\n            }\n\n            normalizeDescription(datum, self, self.options);\n        });\n\n        return requestV1.data;\n    },\n\n    /**\n     * Normalizes a list of header data from the incoming raw v1 request.\n     *\n     * @param {Object} requestV1 - The raw v1 request object.\n     * @returns {Object[]} - The normalized list of header datum values.\n     */\n    headerData: function (requestV1) {\n        var self = this,\n            normalizedHeaderData;\n\n        if (!requestV1) { return; }\n        if (requestV1.headers && _.isEmpty(requestV1.headerData)) {\n            // this converts a newline concatenated string of headers to an array, so there are no descriptions\n            return v1Common.parseHeaders(requestV1.headers, true);\n        }\n\n        // however, if non empty headerData already exists, sanitize it.\n        normalizedHeaderData = _.map(requestV1.headerData, function (entity) {\n            return normalizeDescription(entity, self, self.options);\n        });\n\n        if (normalizedHeaderData.length) {\n            return normalizedHeaderData;\n        }\n    },\n\n    queryParams: function (requestV1) {\n        if (!requestV1) { return; }\n\n        var self = this,\n            normalizedQueryParams,\n            urlObj;\n\n        if (!requestV1.queryParams) {\n            return requestV1.url && (urlObj = url.parse(requestV1.url)) && urlObj.query;\n        }\n\n        normalizedQueryParams = _.map(requestV1.queryParams, function (entity) {\n            return normalizeDescription(entity, self, self.options);\n        });\n\n        if (normalizedQueryParams.length) {\n            return normalizedQueryParams;\n        }\n    },\n\n    /**\n     * Facilitates sanitized variable transformations across all levels for v1 collection normalization.\n     *\n     * @param {Object} entity - The wrapper object containing variable definitions.\n     * @param {?Object} [options] - The set of options for the current variable transformation.\n     * @param {?Object} [options.fallback] - The set of fallback values to be applied when no variables exist.\n     * @param {?Boolean} [options.noDefaults] - When set to true, no defaults are applied.\n     * @param {?Boolean} [options.retainEmptyValues] - When set to true, empty values are set to null instead of being\n     * removed.\n     * @param {?Boolean} [options.retainIds] - When set to true, ids are left as is.\n     * @returns {Object[]} - The set of sanitized variables.\n     */\n    pathVariableData: function (entity, options) {\n        var self = this,\n            results = util.handleVars(entity, options, { isV1: true });\n\n        // Normalize descriptions that may have been passed in as objects\n        results = _.map(results, function (item) {\n            return normalizeDescription(item, self, self.options);\n        });\n\n        if (results.length) {\n            return results;\n        }\n    },\n\n    /**\n     * Normalizes a potentially raw v1 request object.\n     *\n     * @param {Object} requestV1 - The potentially raw v1 request object.\n     * @param {?String} collectionId - A unique identifier for the v1 collection.\n     * @param {?Boolean} [skipResponses=false] - When set to true, saved responses will be excluded from the result..\n     * @returns {Object} - The normalized v1 request object.\n     */\n    request: function (requestV1, collectionId, skipResponses) {\n        if (!requestV1) { return; }\n\n        var map,\n            auth,\n            tests,\n            events,\n            mapper,\n            variables,\n            self = this,\n            helperAttributes,\n            preRequestScript,\n            options = this.options,\n            noDefaults = options.noDefaults,\n            retainEmpty = options.retainEmptyValues,\n            varOpts = { noDefaults: options.noDefaults, retainIds: options.retainIds },\n            units = ['queryParams', 'pathVariableData', 'headerData', 'data'];\n\n        if (!skipResponses) {\n            units.push('responses');\n            units.push('responses_order');\n        }\n\n        // if noDefaults is true, do not replace the id\n        // else\n        // if id is falsy, replace the id\n        // if retainIds is false, replace the id\n        !((options.retainIds && requestV1.id) || options.noDefaults) && (requestV1.id = util.uid());\n\n        normalizeDescription(requestV1, self, self.options);\n\n        units.forEach(function (unit) {\n            var result = self[unit](requestV1, self.options);\n\n            result && (requestV1[unit] = result);\n        });\n\n        if (requestV1.dataDisabled) { requestV1.dataDisabled = true; }\n        else if (retainEmpty) { requestV1.dataDisabled = false; }\n        else { delete requestV1.dataDisabled; }\n\n        // remove invalid protocolProfileBehavior property from requestV1\n        !util.addProtocolProfileBehavior(requestV1) && delete requestV1.protocolProfileBehavior;\n\n        collectionId && !noDefaults && (requestV1.collectionId = collectionId);\n\n        // normalized v1 requests should not have falsy helperAttributes or currentHelper\n        if (_.has(requestV1, 'currentHelper')) {\n            (requestV1.currentHelper === 'normal') && (requestV1.currentHelper = null);\n\n            if (!requestV1.currentHelper) {\n                (requestV1.currentHelper !== null) && (requestV1.currentHelper = null);\n\n                // @todo: Should currentHelper be recreated from helperAttributes.id if falsy?\n                requestV1.helperAttributes = null;\n            }\n        }\n\n        auth = self.auth(requestV1);\n\n        if (auth) {\n            requestV1.auth = auth;\n\n            if (_.has(requestV1, 'helperAttributes') && !requestV1.currentHelper) {\n                requestV1.currentHelper = authIdMap[auth.type];\n            }\n        }\n        else if (auth === null) { // eslint-disable-line security/detect-possible-timing-attacks\n            requestV1.auth = requestV1.currentHelper = requestV1.helperAttributes = null;\n        }\n        else { delete requestV1.auth; }\n\n        events = self.events(requestV1);\n        if (events || events === null) {\n            requestV1.events = events;\n        }\n        else {\n            delete requestV1.events;\n        }\n\n        variables = self.variables(requestV1, varOpts);\n        if (variables) {\n            requestV1.variables = variables;\n        }\n        else {\n            delete requestV1.variables;\n        }\n\n        if (requestV1.auth && (util.notLegacy(requestV1, 'auth') || options.prioritizeV2)) {\n            requestV1.currentHelper = v2Common.authMap[requestV1.auth.type];\n            (requestV1.currentHelper === null) && (requestV1.helperAttributes = null);\n\n            mapper = util.authMappersFromCurrent[requestV1.currentHelper];\n\n            if (mapper) {\n                (map = util.authArrayToMap(requestV1)) && (helperAttributes = mapper(map[requestV1.auth.type]));\n                helperAttributes && (requestV1.helperAttributes = helperAttributes);\n            }\n        }\n\n        if (requestV1.events && (util.notLegacy(requestV1, 'event') || options.prioritizeV2)) {\n            tests = preRequestScript = '';\n\n            _.forEach(requestV1.events, function (event) {\n                var exec = event && event.script && event.script.exec;\n\n                if (!_.isArray(exec)) { return; }\n                if (event.listen === 'prerequest') {\n                    preRequestScript += exec.join('\\n');\n                }\n                else if (event.listen === 'test') {\n                    tests += exec.join('\\n');\n                }\n            });\n\n            requestV1.preRequestScript = preRequestScript ? preRequestScript : null;\n            requestV1.tests = tests ? tests : null;\n        }\n\n        // prune\n        ['preRequestScript', 'tests'].forEach(function (script) {\n            if (_.has(requestV1, script) && !requestV1[script] && requestV1[script] !== null) {\n                delete requestV1[script];\n            }\n        });\n\n        return requestV1;\n    },\n\n    /**\n     * Normalizes a potentially raw v1 response object.\n     *\n     * @param {Object} responseV1 - The potentially raw v1 response object.\n     * @returns {Object} - The normalized v1 response object.\n     */\n    response: function (responseV1) {\n        var self = this;\n\n        // if noDefaults is true, do not replace the id\n        // else\n        // if id is falsy, replace the id\n        // if retainIds is false, replace the id\n        !((self.options.retainIds && responseV1.id) || self.options.noDefaults) && (responseV1.id = util.uid());\n\n        // the true in the next line ensures that we don't recursively go on processing responses in a request.\n        responseV1.request = self.request(responseV1.request, undefined, true);\n\n        !responseV1.language && (responseV1.language = 'Text');\n        !responseV1.previewType && (responseV1.previewType = 'html');\n\n        _.isEmpty(responseV1.cookies) && (delete responseV1.cookies);\n\n        return responseV1;\n    },\n\n    responses: function (requestV1) {\n        if (_.isEmpty(requestV1 && requestV1.responses)) { return; }\n\n        var self = this;\n\n        requestV1.responses.forEach(function (response) {\n            self.response(response);\n        });\n\n        return requestV1.responses;\n    },\n\n    /**\n     * Normalizes a request order list.\n     *\n     * @param {Object} entityV1 - An object containing a potentially raw list of folder ids.\n     * @returns {Array} - The normalized list of folder ids.\n     */\n    order: function (entityV1) {\n        return !this.options.noDefaults && _.compact(entityV1 && entityV1.order);\n    },\n\n    /**\n     * Normalizes a folder order list.\n     *\n     * @param {Object} entityV1 - An object containing a potentially raw list of folder ids.\n     * @returns {Array} - The normalized list of folder ids.\n     */\n    folders_order: function (entityV1) {\n        return !this.options.noDefaults && _.compact(entityV1 && entityV1.folders_order);\n    },\n\n    /**\n     * Normalizes a response order list.\n     *\n     * @param {Object} entityV1 - An object containing a potentially raw list of response ids.\n     * @returns {Array} - The normalized list of response ids.\n     */\n    responses_order: function (entityV1) {\n        return !this.options.noDefaults && _.compact(entityV1 && entityV1.responses_order);\n    },\n\n    /**\n     * Normalizes a potentially raw v1 folders list.\n     *\n     * @param {Object} collectionV1 - The potentially raw v1 collection object.\n     * @returns {Object[]} - The normalized v1 collection folders list.\n     */\n    folders: function (collectionV1) {\n        if (_.isEmpty(collectionV1 && collectionV1.folders)) { return; }\n\n        var auth,\n            events,\n            variables,\n            self = this,\n            order,\n            foldersOrder,\n            retainEmpty = self.options.retainEmptyValues,\n            varOpts = { noDefaults: self.options.noDefaults, retainIds: self.options.retainIds };\n\n        _.forEach(collectionV1.folders, function (folder) {\n            if (!folder) { return; }\n\n            // if noDefaults is true, do not replace the id\n            // else\n            // if id is falsy, replace the id\n            // if retainIds is false, replace the id\n            !((self.options.retainIds && folder.id) || self.options.noDefaults) && (folder.id = util.uid());\n\n            folder.description = self.description(folder.description);\n            util.cleanEmptyValue(folder, 'description', retainEmpty);\n\n            // remove invalid protocolProfileBehavior property\n            !util.addProtocolProfileBehavior(folder) && delete folder.protocolProfileBehavior;\n\n            auth = self.auth(folder);\n\n            !_.isEmpty((order = self.order(folder))) && (folder.order = order);\n            !_.isEmpty((foldersOrder = self.folders_order(folder))) && (folder.folders_order = foldersOrder);\n\n            (auth || (auth === null)) && (folder.auth = auth);\n            (events = self.events(folder)) && (folder.events = events);\n            (variables = self.variables(folder, varOpts)) && (folder.variables = variables);\n        });\n\n        return _.compact(collectionV1.folders);\n    },\n\n    /**\n     * Normalizes a potentially raw v1 request object.\n     *\n     * @param {Object} collectionV1 - The potentially raw v1 collection object.\n     * @returns {Object[]|*} - The normalized v1 request list.\n     */\n    requests: function (collectionV1) {\n        if (_.isEmpty(collectionV1 && collectionV1.requests)) { return; }\n\n        var self = this;\n\n        collectionV1.requests.forEach(function (request) {\n            self.request(request);\n        });\n\n        return _.compact(collectionV1.requests);\n    },\n\n    /**\n     * Creates the v1.0.0 compatible description string.\n     *\n     * @param {Object} maybeObjectDescription - The description to be converted\n     *\n     * @returns {String} - The resultant v1 description.\n     */\n    description: function (maybeObjectDescription) {\n        var description,\n            retainEmpty = _.get(this.options, 'retainEmptyValues'),\n            createDefaultValue = !_.get(this.options, 'noDefaults', false);\n\n        if (_.isObject(maybeObjectDescription)) {\n            description = _.toString(_.get(maybeObjectDescription, 'content'));\n        }\n        else {\n            description = maybeObjectDescription;\n        }\n\n        if (description) {\n            return description;\n        }\n        else if (description === undefined && createDefaultValue) {\n            return null;\n        }\n        else if (_.isEmpty(description) && retainEmpty) {\n            return null;\n        }\n\n        return undefined;\n    }\n});\n\nmodule.exports = {\n\n    /**\n     * Normalizes a single v1 request.\n     *\n     * @param {Object} request - The v1 request to be normalized.\n     * @param {Object} options - The set of options for the current normalization.\n     * @param {?Boolean} [options.mutate=false] - When set to true, normalization is done in place.\n     * @param {?Boolean} [options.noDefaults=false] - When set to true, sensible defaults are not added.\n     * @param {?Boolean} [options.prioritizeV2=false] - When set to true, v2 style properties are checked first.\n     * @param {?Boolean} [options.retainEmptyValues=false] - When set to true, empty values are set to '' instead of\n     * being removed.\n     * @param {Function} callback - A function that is invoked when the normalization has completed.\n     * @returns {*}\n     */\n    normalizeSingle: function (request, options, callback) {\n        var err,\n            normalized,\n            builders = new Builders(options);\n\n        // At this stage, mutate will not be passed ordinarily. Hence, the falsy nature of options.mutate can be used\n        // to selectively clone the request.\n        options && !options.mutate && (request = _.cloneDeep(request));\n\n        try { normalized = builders.request(request); }\n        catch (e) { err = e; }\n\n        if (callback) { return callback(err, normalized); }\n\n        if (err) { throw err; }\n\n        return normalized;\n    },\n\n    /**\n     * Normalizes a single v1 response.\n     *\n     * @param {Object} response - The v1 request to be normalized.\n     * @param {Object} options - The set of options for the current normalization.\n     * @param {?Boolean} [options.mutate=false] - When set to true, normalization is done in place.\n     * @param {?Boolean} [options.noDefaults=false] - When set to true, sensible defaults are not added.\n     * @param {?Boolean} [options.prioritizeV2=false] - When set to true, v2 style properties are checked first.\n     * @param {?Boolean} [options.retainEmptyValues=false] - When set to true, empty values are set to '' instead of\n     * being removed.\n     * @param {Function} callback - A function that is invoked when the normalization has completed.\n     * @returns {*}\n     */\n    normalizeResponse: function (response, options, callback) {\n        var err,\n            normalized,\n            builders = new Builders(options);\n\n        // At this stage, mutate will not be passed ordinarily. Hence, the falsy nature of options.mutate can be used\n        // to selectively clone the response.\n        options && !options.mutate && (response = _.cloneDeep(response));\n\n        try { normalized = builders.response(response); }\n        catch (e) { err = e; }\n\n        if (callback) { return callback(err, normalized); }\n\n        if (err) { throw err; }\n\n        return normalized;\n    },\n\n    /**\n     * Converts a V1 collection to a V2 collection (performs ID replacement, etc as necessary).\n     *\n     * @param {Object} collection - The v1 collection to be normalized.\n     * @param {Object} options - The options for the current normalization sequence.\n     * @param {?Boolean} [options.mutate=false] - When set to true, normalization is done in place.\n     * @param {?Boolean} [options.noDefaults=false] - When set to true, sensible defaults are not added.\n     * @param {?Boolean} [options.prioritizeV2=false] - When set to true, v2 style properties are checked first.\n     * @param {?Boolean} [options.retainEmptyValues=false] - When set to true, empty values are set to '' instead of\n     * being removed.\n     * @param {Function} callback - A function invoked to indicate that the normalization has completed.\n     * @returns {*}\n     */\n    normalize: function (collection, options, callback) {\n        // At this stage, mutate will not be passed ordinarily. Hence, the falsy nature of options.mutate can be used\n        // to selectively clone the collection.\n        options && !options.mutate && (collection = _.cloneDeep(collection));\n\n        var auth,\n            authOptions = { excludeNoauth: true },\n            builders = new Builders(options),\n            units = ['events', 'variables', 'order', 'folders_order', 'folders', 'requests'];\n\n        // if noDefaults is true, do not replace the id\n        // else\n        // if id is falsy, replace the id\n        // if retainIds is false, replace the id\n        !((options.retainIds && collection.id) || options.noDefaults) && (collection.id = util.uid());\n\n        normalizeDescription(collection, builders, options);\n\n        // remove invalid protocolProfileBehavior property\n        !util.addProtocolProfileBehavior(collection) && delete collection.protocolProfileBehavior;\n\n        try {\n            auth = builders.auth(collection, authOptions);\n            if (auth || (options.retainEmptyValues && auth === null)) {\n                collection.auth = auth;\n            }\n            else {\n                delete collection.auth;\n            }\n\n            units.forEach(function (unit) {\n                var result,\n                    _options;\n\n                if (unit === 'variables') {\n                    _options = { retainIds: options.retainIds, noDefaults: options.noDefaults };\n                }\n\n                if (!_.isEmpty(result = builders[unit](collection, _options)) || (unit === 'folders')) {\n                    collection[unit] = result;\n                }\n            });\n        }\n        catch (e) {\n            if (callback) { return callback(e, null); }\n            throw e;\n        }\n\n        if (callback) { return callback(null, collection); }\n\n        return collection;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}