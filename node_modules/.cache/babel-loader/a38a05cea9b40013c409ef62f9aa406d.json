{"ast":null,"code":"const Cell = require('./cell');\nconst {\n  ColSpanCell,\n  RowSpanCell\n} = Cell;\n(function () {\n  function layoutTable(table) {\n    table.forEach(function (row, rowIndex) {\n      let prevCell = null;\n      row.forEach(function (cell, columnIndex) {\n        cell.y = rowIndex;\n        cell.x = prevCell ? prevCell.x + 1 : columnIndex;\n        for (let y = rowIndex; y >= 0; y--) {\n          let row2 = table[y];\n          let xMax = y === rowIndex ? columnIndex : row2.length;\n          for (let x = 0; x < xMax; x++) {\n            let cell2 = row2[x];\n            while (cellsConflict(cell, cell2)) {\n              cell.x++;\n            }\n          }\n          prevCell = cell;\n        }\n      });\n    });\n  }\n  function maxWidth(table) {\n    let mw = 0;\n    table.forEach(function (row) {\n      row.forEach(function (cell) {\n        mw = Math.max(mw, cell.x + (cell.colSpan || 1));\n      });\n    });\n    return mw;\n  }\n  function maxHeight(table) {\n    return table.length;\n  }\n  function cellsConflict(cell1, cell2) {\n    let yMin1 = cell1.y;\n    let yMax1 = cell1.y - 1 + (cell1.rowSpan || 1);\n    let yMin2 = cell2.y;\n    let yMax2 = cell2.y - 1 + (cell2.rowSpan || 1);\n    let yConflict = !(yMin1 > yMax2 || yMin2 > yMax1);\n    let xMin1 = cell1.x;\n    let xMax1 = cell1.x - 1 + (cell1.colSpan || 1);\n    let xMin2 = cell2.x;\n    let xMax2 = cell2.x - 1 + (cell2.colSpan || 1);\n    let xConflict = !(xMin1 > xMax2 || xMin2 > xMax1);\n    return yConflict && xConflict;\n  }\n  function conflictExists(rows, x, y) {\n    let i_max = Math.min(rows.length - 1, y);\n    let cell = {\n      x: x,\n      y: y\n    };\n    for (let i = 0; i <= i_max; i++) {\n      let row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        if (cellsConflict(cell, row[j])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function allBlank(rows, y, xMin, xMax) {\n    for (let x = xMin; x < xMax; x++) {\n      if (conflictExists(rows, x, y)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function addRowSpanCells(table) {\n    table.forEach(function (row, rowIndex) {\n      row.forEach(function (cell) {\n        for (let i = 1; i < cell.rowSpan; i++) {\n          let rowSpanCell = new RowSpanCell(cell);\n          rowSpanCell.x = cell.x;\n          rowSpanCell.y = cell.y + i;\n          rowSpanCell.colSpan = cell.colSpan;\n          insertCell(rowSpanCell, table[rowIndex + i]);\n        }\n      });\n    });\n  }\n  function addColSpanCells(cellRows) {\n    for (let rowIndex = cellRows.length - 1; rowIndex >= 0; rowIndex--) {\n      let cellColumns = cellRows[rowIndex];\n      for (let columnIndex = 0; columnIndex < cellColumns.length; columnIndex++) {\n        let cell = cellColumns[columnIndex];\n        for (let k = 1; k < cell.colSpan; k++) {\n          let colSpanCell = new ColSpanCell();\n          colSpanCell.x = cell.x + k;\n          colSpanCell.y = cell.y;\n          cellColumns.splice(columnIndex + 1, 0, colSpanCell);\n        }\n      }\n    }\n  }\n  function insertCell(cell, row) {\n    let x = 0;\n    while (x < row.length && row[x].x < cell.x) {\n      x++;\n    }\n    row.splice(x, 0, cell);\n  }\n  function fillInTable(table) {\n    let h_max = maxHeight(table);\n    let w_max = maxWidth(table);\n    for (let y = 0; y < h_max; y++) {\n      for (let x = 0; x < w_max; x++) {\n        if (!conflictExists(table, x, y)) {\n          let opts = {\n            x: x,\n            y: y,\n            colSpan: 1,\n            rowSpan: 1\n          };\n          x++;\n          while (x < w_max && !conflictExists(table, x, y)) {\n            opts.colSpan++;\n            x++;\n          }\n          let y2 = y + 1;\n          while (y2 < h_max && allBlank(table, y2, opts.x, opts.x + opts.colSpan)) {\n            opts.rowSpan++;\n            y2++;\n          }\n          let cell = new Cell(opts);\n          cell.x = opts.x;\n          cell.y = opts.y;\n          insertCell(cell, table[y]);\n        }\n      }\n    }\n  }\n  function generateCells(rows) {\n    return rows.map(function (row) {\n      if (!Array.isArray(row)) {\n        let key = Object.keys(row)[0];\n        row = row[key];\n        if (Array.isArray(row)) {\n          row = row.slice();\n          row.unshift(key);\n        } else {\n          row = [key, row];\n        }\n      }\n      return row.map(function (cell) {\n        return new Cell(cell);\n      });\n    });\n  }\n  function makeTableLayout(rows) {\n    let cellRows = generateCells(rows);\n    layoutTable(cellRows);\n    fillInTable(cellRows);\n    addRowSpanCells(cellRows);\n    addColSpanCells(cellRows);\n    return cellRows;\n  }\n  module.exports = {\n    makeTableLayout: makeTableLayout,\n    layoutTable: layoutTable,\n    addRowSpanCells: addRowSpanCells,\n    maxWidth: maxWidth,\n    fillInTable: fillInTable,\n    computeWidths: makeComputeWidths('colSpan', 'desiredWidth', 'x', 1),\n    computeHeights: makeComputeWidths('rowSpan', 'desiredHeight', 'y', 1)\n  };\n})();\nfunction makeComputeWidths(colSpan, desiredWidth, x, forcedMin) {\n  return function (vals, table) {\n    let result = [];\n    let spanners = [];\n    table.forEach(function (row) {\n      row.forEach(function (cell) {\n        if ((cell[colSpan] || 1) > 1) {\n          spanners.push(cell);\n        } else {\n          result[cell[x]] = Math.max(result[cell[x]] || 0, cell[desiredWidth] || 0, forcedMin);\n        }\n      });\n    });\n    vals.forEach(function (val, index) {\n      if (typeof val === 'number') {\n        result[index] = val;\n      }\n    });\n\n    //spanners.forEach(function(cell){\n    for (let k = spanners.length - 1; k >= 0; k--) {\n      let cell = spanners[k];\n      let span = cell[colSpan];\n      let col = cell[x];\n      let existingWidth = result[col];\n      let editableCols = typeof vals[col] === 'number' ? 0 : 1;\n      for (let i = 1; i < span; i++) {\n        existingWidth += 1 + result[col + i];\n        if (typeof vals[col + i] !== 'number') {\n          editableCols++;\n        }\n      }\n      if (cell[desiredWidth] > existingWidth) {\n        let i = 0;\n        while (editableCols > 0 && cell[desiredWidth] > existingWidth) {\n          if (typeof vals[col + i] !== 'number') {\n            let dif = Math.round((cell[desiredWidth] - existingWidth) / editableCols);\n            existingWidth += dif;\n            result[col + i] += dif;\n            editableCols--;\n          }\n          i++;\n        }\n      }\n    }\n    Object.assign(vals, result);\n    for (let j = 0; j < vals.length; j++) {\n      vals[j] = Math.max(forcedMin, vals[j] || 0);\n    }\n  };\n}","map":{"version":3,"names":["Cell","require","ColSpanCell","RowSpanCell","layoutTable","table","forEach","row","rowIndex","prevCell","cell","columnIndex","y","x","row2","xMax","length","cell2","cellsConflict","maxWidth","mw","Math","max","colSpan","maxHeight","cell1","yMin1","yMax1","rowSpan","yMin2","yMax2","yConflict","xMin1","xMax1","xMin2","xMax2","xConflict","conflictExists","rows","i_max","min","i","j","allBlank","xMin","addRowSpanCells","rowSpanCell","insertCell","addColSpanCells","cellRows","cellColumns","k","colSpanCell","splice","fillInTable","h_max","w_max","opts","y2","generateCells","map","Array","isArray","key","Object","keys","slice","unshift","makeTableLayout","module","exports","computeWidths","makeComputeWidths","computeHeights","desiredWidth","forcedMin","vals","result","spanners","push","val","index","span","col","existingWidth","editableCols","dif","round","assign"],"sources":["/Users/Qusai.Qishta/node_modules/cli-table3/src/layout-manager.js"],"sourcesContent":["const Cell = require('./cell');\nconst { ColSpanCell, RowSpanCell } = Cell;\n\n(function () {\n  function layoutTable(table) {\n    table.forEach(function (row, rowIndex) {\n      let prevCell = null;\n      row.forEach(function (cell, columnIndex) {\n        cell.y = rowIndex;\n        cell.x = prevCell ? prevCell.x + 1 : columnIndex;\n        for (let y = rowIndex; y >= 0; y--) {\n          let row2 = table[y];\n          let xMax = y === rowIndex ? columnIndex : row2.length;\n          for (let x = 0; x < xMax; x++) {\n            let cell2 = row2[x];\n            while (cellsConflict(cell, cell2)) {\n              cell.x++;\n            }\n          }\n          prevCell = cell;\n        }\n      });\n    });\n  }\n\n  function maxWidth(table) {\n    let mw = 0;\n    table.forEach(function (row) {\n      row.forEach(function (cell) {\n        mw = Math.max(mw, cell.x + (cell.colSpan || 1));\n      });\n    });\n    return mw;\n  }\n\n  function maxHeight(table) {\n    return table.length;\n  }\n\n  function cellsConflict(cell1, cell2) {\n    let yMin1 = cell1.y;\n    let yMax1 = cell1.y - 1 + (cell1.rowSpan || 1);\n    let yMin2 = cell2.y;\n    let yMax2 = cell2.y - 1 + (cell2.rowSpan || 1);\n    let yConflict = !(yMin1 > yMax2 || yMin2 > yMax1);\n\n    let xMin1 = cell1.x;\n    let xMax1 = cell1.x - 1 + (cell1.colSpan || 1);\n    let xMin2 = cell2.x;\n    let xMax2 = cell2.x - 1 + (cell2.colSpan || 1);\n    let xConflict = !(xMin1 > xMax2 || xMin2 > xMax1);\n\n    return yConflict && xConflict;\n  }\n\n  function conflictExists(rows, x, y) {\n    let i_max = Math.min(rows.length - 1, y);\n    let cell = { x: x, y: y };\n    for (let i = 0; i <= i_max; i++) {\n      let row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        if (cellsConflict(cell, row[j])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  function allBlank(rows, y, xMin, xMax) {\n    for (let x = xMin; x < xMax; x++) {\n      if (conflictExists(rows, x, y)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function addRowSpanCells(table) {\n    table.forEach(function (row, rowIndex) {\n      row.forEach(function (cell) {\n        for (let i = 1; i < cell.rowSpan; i++) {\n          let rowSpanCell = new RowSpanCell(cell);\n          rowSpanCell.x = cell.x;\n          rowSpanCell.y = cell.y + i;\n          rowSpanCell.colSpan = cell.colSpan;\n          insertCell(rowSpanCell, table[rowIndex + i]);\n        }\n      });\n    });\n  }\n\n  function addColSpanCells(cellRows) {\n    for (let rowIndex = cellRows.length - 1; rowIndex >= 0; rowIndex--) {\n      let cellColumns = cellRows[rowIndex];\n      for (let columnIndex = 0; columnIndex < cellColumns.length; columnIndex++) {\n        let cell = cellColumns[columnIndex];\n        for (let k = 1; k < cell.colSpan; k++) {\n          let colSpanCell = new ColSpanCell();\n          colSpanCell.x = cell.x + k;\n          colSpanCell.y = cell.y;\n          cellColumns.splice(columnIndex + 1, 0, colSpanCell);\n        }\n      }\n    }\n  }\n\n  function insertCell(cell, row) {\n    let x = 0;\n    while (x < row.length && row[x].x < cell.x) {\n      x++;\n    }\n    row.splice(x, 0, cell);\n  }\n\n  function fillInTable(table) {\n    let h_max = maxHeight(table);\n    let w_max = maxWidth(table);\n    for (let y = 0; y < h_max; y++) {\n      for (let x = 0; x < w_max; x++) {\n        if (!conflictExists(table, x, y)) {\n          let opts = { x: x, y: y, colSpan: 1, rowSpan: 1 };\n          x++;\n          while (x < w_max && !conflictExists(table, x, y)) {\n            opts.colSpan++;\n            x++;\n          }\n          let y2 = y + 1;\n          while (y2 < h_max && allBlank(table, y2, opts.x, opts.x + opts.colSpan)) {\n            opts.rowSpan++;\n            y2++;\n          }\n\n          let cell = new Cell(opts);\n          cell.x = opts.x;\n          cell.y = opts.y;\n          insertCell(cell, table[y]);\n        }\n      }\n    }\n  }\n\n  function generateCells(rows) {\n    return rows.map(function (row) {\n      if (!Array.isArray(row)) {\n        let key = Object.keys(row)[0];\n        row = row[key];\n        if (Array.isArray(row)) {\n          row = row.slice();\n          row.unshift(key);\n        } else {\n          row = [key, row];\n        }\n      }\n      return row.map(function (cell) {\n        return new Cell(cell);\n      });\n    });\n  }\n\n  function makeTableLayout(rows) {\n    let cellRows = generateCells(rows);\n    layoutTable(cellRows);\n    fillInTable(cellRows);\n    addRowSpanCells(cellRows);\n    addColSpanCells(cellRows);\n    return cellRows;\n  }\n\n  module.exports = {\n    makeTableLayout: makeTableLayout,\n    layoutTable: layoutTable,\n    addRowSpanCells: addRowSpanCells,\n    maxWidth: maxWidth,\n    fillInTable: fillInTable,\n    computeWidths: makeComputeWidths('colSpan', 'desiredWidth', 'x', 1),\n    computeHeights: makeComputeWidths('rowSpan', 'desiredHeight', 'y', 1),\n  };\n})();\n\nfunction makeComputeWidths(colSpan, desiredWidth, x, forcedMin) {\n  return function (vals, table) {\n    let result = [];\n    let spanners = [];\n    table.forEach(function (row) {\n      row.forEach(function (cell) {\n        if ((cell[colSpan] || 1) > 1) {\n          spanners.push(cell);\n        } else {\n          result[cell[x]] = Math.max(result[cell[x]] || 0, cell[desiredWidth] || 0, forcedMin);\n        }\n      });\n    });\n\n    vals.forEach(function (val, index) {\n      if (typeof val === 'number') {\n        result[index] = val;\n      }\n    });\n\n    //spanners.forEach(function(cell){\n    for (let k = spanners.length - 1; k >= 0; k--) {\n      let cell = spanners[k];\n      let span = cell[colSpan];\n      let col = cell[x];\n      let existingWidth = result[col];\n      let editableCols = typeof vals[col] === 'number' ? 0 : 1;\n      for (let i = 1; i < span; i++) {\n        existingWidth += 1 + result[col + i];\n        if (typeof vals[col + i] !== 'number') {\n          editableCols++;\n        }\n      }\n      if (cell[desiredWidth] > existingWidth) {\n        let i = 0;\n        while (editableCols > 0 && cell[desiredWidth] > existingWidth) {\n          if (typeof vals[col + i] !== 'number') {\n            let dif = Math.round((cell[desiredWidth] - existingWidth) / editableCols);\n            existingWidth += dif;\n            result[col + i] += dif;\n            editableCols--;\n          }\n          i++;\n        }\n      }\n    }\n\n    Object.assign(vals, result);\n    for (let j = 0; j < vals.length; j++) {\n      vals[j] = Math.max(forcedMin, vals[j] || 0);\n    }\n  };\n}\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAM;EAAEC,WAAW;EAAEC;AAAY,CAAC,GAAGH,IAAI;AAEzC,CAAC,YAAY;EACX,SAASI,WAAW,CAACC,KAAK,EAAE;IAC1BA,KAAK,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAEC,QAAQ,EAAE;MACrC,IAAIC,QAAQ,GAAG,IAAI;MACnBF,GAAG,CAACD,OAAO,CAAC,UAAUI,IAAI,EAAEC,WAAW,EAAE;QACvCD,IAAI,CAACE,CAAC,GAAGJ,QAAQ;QACjBE,IAAI,CAACG,CAAC,GAAGJ,QAAQ,GAAGA,QAAQ,CAACI,CAAC,GAAG,CAAC,GAAGF,WAAW;QAChD,KAAK,IAAIC,CAAC,GAAGJ,QAAQ,EAAEI,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAClC,IAAIE,IAAI,GAAGT,KAAK,CAACO,CAAC,CAAC;UACnB,IAAIG,IAAI,GAAGH,CAAC,KAAKJ,QAAQ,GAAGG,WAAW,GAAGG,IAAI,CAACE,MAAM;UACrD,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,IAAI,EAAEF,CAAC,EAAE,EAAE;YAC7B,IAAII,KAAK,GAAGH,IAAI,CAACD,CAAC,CAAC;YACnB,OAAOK,aAAa,CAACR,IAAI,EAAEO,KAAK,CAAC,EAAE;cACjCP,IAAI,CAACG,CAAC,EAAE;YACV;UACF;UACAJ,QAAQ,GAAGC,IAAI;QACjB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,SAASS,QAAQ,CAACd,KAAK,EAAE;IACvB,IAAIe,EAAE,GAAG,CAAC;IACVf,KAAK,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;MAC3BA,GAAG,CAACD,OAAO,CAAC,UAAUI,IAAI,EAAE;QAC1BU,EAAE,GAAGC,IAAI,CAACC,GAAG,CAACF,EAAE,EAAEV,IAAI,CAACG,CAAC,IAAIH,IAAI,CAACa,OAAO,IAAI,CAAC,CAAC,CAAC;MACjD,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOH,EAAE;EACX;EAEA,SAASI,SAAS,CAACnB,KAAK,EAAE;IACxB,OAAOA,KAAK,CAACW,MAAM;EACrB;EAEA,SAASE,aAAa,CAACO,KAAK,EAAER,KAAK,EAAE;IACnC,IAAIS,KAAK,GAAGD,KAAK,CAACb,CAAC;IACnB,IAAIe,KAAK,GAAGF,KAAK,CAACb,CAAC,GAAG,CAAC,IAAIa,KAAK,CAACG,OAAO,IAAI,CAAC,CAAC;IAC9C,IAAIC,KAAK,GAAGZ,KAAK,CAACL,CAAC;IACnB,IAAIkB,KAAK,GAAGb,KAAK,CAACL,CAAC,GAAG,CAAC,IAAIK,KAAK,CAACW,OAAO,IAAI,CAAC,CAAC;IAC9C,IAAIG,SAAS,GAAG,EAAEL,KAAK,GAAGI,KAAK,IAAID,KAAK,GAAGF,KAAK,CAAC;IAEjD,IAAIK,KAAK,GAAGP,KAAK,CAACZ,CAAC;IACnB,IAAIoB,KAAK,GAAGR,KAAK,CAACZ,CAAC,GAAG,CAAC,IAAIY,KAAK,CAACF,OAAO,IAAI,CAAC,CAAC;IAC9C,IAAIW,KAAK,GAAGjB,KAAK,CAACJ,CAAC;IACnB,IAAIsB,KAAK,GAAGlB,KAAK,CAACJ,CAAC,GAAG,CAAC,IAAII,KAAK,CAACM,OAAO,IAAI,CAAC,CAAC;IAC9C,IAAIa,SAAS,GAAG,EAAEJ,KAAK,GAAGG,KAAK,IAAID,KAAK,GAAGD,KAAK,CAAC;IAEjD,OAAOF,SAAS,IAAIK,SAAS;EAC/B;EAEA,SAASC,cAAc,CAACC,IAAI,EAAEzB,CAAC,EAAED,CAAC,EAAE;IAClC,IAAI2B,KAAK,GAAGlB,IAAI,CAACmB,GAAG,CAACF,IAAI,CAACtB,MAAM,GAAG,CAAC,EAAEJ,CAAC,CAAC;IACxC,IAAIF,IAAI,GAAG;MAAEG,CAAC,EAAEA,CAAC;MAAED,CAAC,EAAEA;IAAE,CAAC;IACzB,KAAK,IAAI6B,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,KAAK,EAAEE,CAAC,EAAE,EAAE;MAC/B,IAAIlC,GAAG,GAAG+B,IAAI,CAACG,CAAC,CAAC;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnC,GAAG,CAACS,MAAM,EAAE0B,CAAC,EAAE,EAAE;QACnC,IAAIxB,aAAa,CAACR,IAAI,EAAEH,GAAG,CAACmC,CAAC,CAAC,CAAC,EAAE;UAC/B,OAAO,IAAI;QACb;MACF;IACF;IACA,OAAO,KAAK;EACd;EAEA,SAASC,QAAQ,CAACL,IAAI,EAAE1B,CAAC,EAAEgC,IAAI,EAAE7B,IAAI,EAAE;IACrC,KAAK,IAAIF,CAAC,GAAG+B,IAAI,EAAE/B,CAAC,GAAGE,IAAI,EAAEF,CAAC,EAAE,EAAE;MAChC,IAAIwB,cAAc,CAACC,IAAI,EAAEzB,CAAC,EAAED,CAAC,CAAC,EAAE;QAC9B,OAAO,KAAK;MACd;IACF;IACA,OAAO,IAAI;EACb;EAEA,SAASiC,eAAe,CAACxC,KAAK,EAAE;IAC9BA,KAAK,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAEC,QAAQ,EAAE;MACrCD,GAAG,CAACD,OAAO,CAAC,UAAUI,IAAI,EAAE;QAC1B,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/B,IAAI,CAACkB,OAAO,EAAEa,CAAC,EAAE,EAAE;UACrC,IAAIK,WAAW,GAAG,IAAI3C,WAAW,CAACO,IAAI,CAAC;UACvCoC,WAAW,CAACjC,CAAC,GAAGH,IAAI,CAACG,CAAC;UACtBiC,WAAW,CAAClC,CAAC,GAAGF,IAAI,CAACE,CAAC,GAAG6B,CAAC;UAC1BK,WAAW,CAACvB,OAAO,GAAGb,IAAI,CAACa,OAAO;UAClCwB,UAAU,CAACD,WAAW,EAAEzC,KAAK,CAACG,QAAQ,GAAGiC,CAAC,CAAC,CAAC;QAC9C;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,SAASO,eAAe,CAACC,QAAQ,EAAE;IACjC,KAAK,IAAIzC,QAAQ,GAAGyC,QAAQ,CAACjC,MAAM,GAAG,CAAC,EAAER,QAAQ,IAAI,CAAC,EAAEA,QAAQ,EAAE,EAAE;MAClE,IAAI0C,WAAW,GAAGD,QAAQ,CAACzC,QAAQ,CAAC;MACpC,KAAK,IAAIG,WAAW,GAAG,CAAC,EAAEA,WAAW,GAAGuC,WAAW,CAAClC,MAAM,EAAEL,WAAW,EAAE,EAAE;QACzE,IAAID,IAAI,GAAGwC,WAAW,CAACvC,WAAW,CAAC;QACnC,KAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzC,IAAI,CAACa,OAAO,EAAE4B,CAAC,EAAE,EAAE;UACrC,IAAIC,WAAW,GAAG,IAAIlD,WAAW,EAAE;UACnCkD,WAAW,CAACvC,CAAC,GAAGH,IAAI,CAACG,CAAC,GAAGsC,CAAC;UAC1BC,WAAW,CAACxC,CAAC,GAAGF,IAAI,CAACE,CAAC;UACtBsC,WAAW,CAACG,MAAM,CAAC1C,WAAW,GAAG,CAAC,EAAE,CAAC,EAAEyC,WAAW,CAAC;QACrD;MACF;IACF;EACF;EAEA,SAASL,UAAU,CAACrC,IAAI,EAAEH,GAAG,EAAE;IAC7B,IAAIM,CAAC,GAAG,CAAC;IACT,OAAOA,CAAC,GAAGN,GAAG,CAACS,MAAM,IAAIT,GAAG,CAACM,CAAC,CAAC,CAACA,CAAC,GAAGH,IAAI,CAACG,CAAC,EAAE;MAC1CA,CAAC,EAAE;IACL;IACAN,GAAG,CAAC8C,MAAM,CAACxC,CAAC,EAAE,CAAC,EAAEH,IAAI,CAAC;EACxB;EAEA,SAAS4C,WAAW,CAACjD,KAAK,EAAE;IAC1B,IAAIkD,KAAK,GAAG/B,SAAS,CAACnB,KAAK,CAAC;IAC5B,IAAImD,KAAK,GAAGrC,QAAQ,CAACd,KAAK,CAAC;IAC3B,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2C,KAAK,EAAE3C,CAAC,EAAE,EAAE;MAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2C,KAAK,EAAE3C,CAAC,EAAE,EAAE;QAC9B,IAAI,CAACwB,cAAc,CAAChC,KAAK,EAAEQ,CAAC,EAAED,CAAC,CAAC,EAAE;UAChC,IAAI6C,IAAI,GAAG;YAAE5C,CAAC,EAAEA,CAAC;YAAED,CAAC,EAAEA,CAAC;YAAEW,OAAO,EAAE,CAAC;YAAEK,OAAO,EAAE;UAAE,CAAC;UACjDf,CAAC,EAAE;UACH,OAAOA,CAAC,GAAG2C,KAAK,IAAI,CAACnB,cAAc,CAAChC,KAAK,EAAEQ,CAAC,EAAED,CAAC,CAAC,EAAE;YAChD6C,IAAI,CAAClC,OAAO,EAAE;YACdV,CAAC,EAAE;UACL;UACA,IAAI6C,EAAE,GAAG9C,CAAC,GAAG,CAAC;UACd,OAAO8C,EAAE,GAAGH,KAAK,IAAIZ,QAAQ,CAACtC,KAAK,EAAEqD,EAAE,EAAED,IAAI,CAAC5C,CAAC,EAAE4C,IAAI,CAAC5C,CAAC,GAAG4C,IAAI,CAAClC,OAAO,CAAC,EAAE;YACvEkC,IAAI,CAAC7B,OAAO,EAAE;YACd8B,EAAE,EAAE;UACN;UAEA,IAAIhD,IAAI,GAAG,IAAIV,IAAI,CAACyD,IAAI,CAAC;UACzB/C,IAAI,CAACG,CAAC,GAAG4C,IAAI,CAAC5C,CAAC;UACfH,IAAI,CAACE,CAAC,GAAG6C,IAAI,CAAC7C,CAAC;UACfmC,UAAU,CAACrC,IAAI,EAAEL,KAAK,CAACO,CAAC,CAAC,CAAC;QAC5B;MACF;IACF;EACF;EAEA,SAAS+C,aAAa,CAACrB,IAAI,EAAE;IAC3B,OAAOA,IAAI,CAACsB,GAAG,CAAC,UAAUrD,GAAG,EAAE;MAC7B,IAAI,CAACsD,KAAK,CAACC,OAAO,CAACvD,GAAG,CAAC,EAAE;QACvB,IAAIwD,GAAG,GAAGC,MAAM,CAACC,IAAI,CAAC1D,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7BA,GAAG,GAAGA,GAAG,CAACwD,GAAG,CAAC;QACd,IAAIF,KAAK,CAACC,OAAO,CAACvD,GAAG,CAAC,EAAE;UACtBA,GAAG,GAAGA,GAAG,CAAC2D,KAAK,EAAE;UACjB3D,GAAG,CAAC4D,OAAO,CAACJ,GAAG,CAAC;QAClB,CAAC,MAAM;UACLxD,GAAG,GAAG,CAACwD,GAAG,EAAExD,GAAG,CAAC;QAClB;MACF;MACA,OAAOA,GAAG,CAACqD,GAAG,CAAC,UAAUlD,IAAI,EAAE;QAC7B,OAAO,IAAIV,IAAI,CAACU,IAAI,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,SAAS0D,eAAe,CAAC9B,IAAI,EAAE;IAC7B,IAAIW,QAAQ,GAAGU,aAAa,CAACrB,IAAI,CAAC;IAClClC,WAAW,CAAC6C,QAAQ,CAAC;IACrBK,WAAW,CAACL,QAAQ,CAAC;IACrBJ,eAAe,CAACI,QAAQ,CAAC;IACzBD,eAAe,CAACC,QAAQ,CAAC;IACzB,OAAOA,QAAQ;EACjB;EAEAoB,MAAM,CAACC,OAAO,GAAG;IACfF,eAAe,EAAEA,eAAe;IAChChE,WAAW,EAAEA,WAAW;IACxByC,eAAe,EAAEA,eAAe;IAChC1B,QAAQ,EAAEA,QAAQ;IAClBmC,WAAW,EAAEA,WAAW;IACxBiB,aAAa,EAAEC,iBAAiB,CAAC,SAAS,EAAE,cAAc,EAAE,GAAG,EAAE,CAAC,CAAC;IACnEC,cAAc,EAAED,iBAAiB,CAAC,SAAS,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC;EACtE,CAAC;AACH,CAAC,GAAG;AAEJ,SAASA,iBAAiB,CAACjD,OAAO,EAAEmD,YAAY,EAAE7D,CAAC,EAAE8D,SAAS,EAAE;EAC9D,OAAO,UAAUC,IAAI,EAAEvE,KAAK,EAAE;IAC5B,IAAIwE,MAAM,GAAG,EAAE;IACf,IAAIC,QAAQ,GAAG,EAAE;IACjBzE,KAAK,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;MAC3BA,GAAG,CAACD,OAAO,CAAC,UAAUI,IAAI,EAAE;QAC1B,IAAI,CAACA,IAAI,CAACa,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;UAC5BuD,QAAQ,CAACC,IAAI,CAACrE,IAAI,CAAC;QACrB,CAAC,MAAM;UACLmE,MAAM,CAACnE,IAAI,CAACG,CAAC,CAAC,CAAC,GAAGQ,IAAI,CAACC,GAAG,CAACuD,MAAM,CAACnE,IAAI,CAACG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAEH,IAAI,CAACgE,YAAY,CAAC,IAAI,CAAC,EAAEC,SAAS,CAAC;QACtF;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFC,IAAI,CAACtE,OAAO,CAAC,UAAU0E,GAAG,EAAEC,KAAK,EAAE;MACjC,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;QAC3BH,MAAM,CAACI,KAAK,CAAC,GAAGD,GAAG;MACrB;IACF,CAAC,CAAC;;IAEF;IACA,KAAK,IAAI7B,CAAC,GAAG2B,QAAQ,CAAC9D,MAAM,GAAG,CAAC,EAAEmC,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC7C,IAAIzC,IAAI,GAAGoE,QAAQ,CAAC3B,CAAC,CAAC;MACtB,IAAI+B,IAAI,GAAGxE,IAAI,CAACa,OAAO,CAAC;MACxB,IAAI4D,GAAG,GAAGzE,IAAI,CAACG,CAAC,CAAC;MACjB,IAAIuE,aAAa,GAAGP,MAAM,CAACM,GAAG,CAAC;MAC/B,IAAIE,YAAY,GAAG,OAAOT,IAAI,CAACO,GAAG,CAAC,KAAK,QAAQ,GAAG,CAAC,GAAG,CAAC;MACxD,KAAK,IAAI1C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyC,IAAI,EAAEzC,CAAC,EAAE,EAAE;QAC7B2C,aAAa,IAAI,CAAC,GAAGP,MAAM,CAACM,GAAG,GAAG1C,CAAC,CAAC;QACpC,IAAI,OAAOmC,IAAI,CAACO,GAAG,GAAG1C,CAAC,CAAC,KAAK,QAAQ,EAAE;UACrC4C,YAAY,EAAE;QAChB;MACF;MACA,IAAI3E,IAAI,CAACgE,YAAY,CAAC,GAAGU,aAAa,EAAE;QACtC,IAAI3C,CAAC,GAAG,CAAC;QACT,OAAO4C,YAAY,GAAG,CAAC,IAAI3E,IAAI,CAACgE,YAAY,CAAC,GAAGU,aAAa,EAAE;UAC7D,IAAI,OAAOR,IAAI,CAACO,GAAG,GAAG1C,CAAC,CAAC,KAAK,QAAQ,EAAE;YACrC,IAAI6C,GAAG,GAAGjE,IAAI,CAACkE,KAAK,CAAC,CAAC7E,IAAI,CAACgE,YAAY,CAAC,GAAGU,aAAa,IAAIC,YAAY,CAAC;YACzED,aAAa,IAAIE,GAAG;YACpBT,MAAM,CAACM,GAAG,GAAG1C,CAAC,CAAC,IAAI6C,GAAG;YACtBD,YAAY,EAAE;UAChB;UACA5C,CAAC,EAAE;QACL;MACF;IACF;IAEAuB,MAAM,CAACwB,MAAM,CAACZ,IAAI,EAAEC,MAAM,CAAC;IAC3B,KAAK,IAAInC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkC,IAAI,CAAC5D,MAAM,EAAE0B,CAAC,EAAE,EAAE;MACpCkC,IAAI,CAAClC,CAAC,CAAC,GAAGrB,IAAI,CAACC,GAAG,CAACqD,SAAS,EAAEC,IAAI,CAAClC,CAAC,CAAC,IAAI,CAAC,CAAC;IAC7C;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script"}