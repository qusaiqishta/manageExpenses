{"ast":null,"code":"/* eslint-disable object-shorthand */\n\nvar inherits = require('inherits'),\n  _ = require('lodash').noConflict(),\n  url = require('../../url'),\n  util = require('../../util'),\n  constants = require('../../constants'),\n  BaseBuilders = require('./converter-v1-to-v2').Builders,\n  Builders;\ninherits(Builders = function () {\n  Builders.super_.apply(this, arguments);\n}, BaseBuilders);\n_.assign(Builders.prototype, {\n  /**\n   * Derives v2.1.0 collection info from a v1.0.0 collection object.\n   *\n   * @param {Object} collectionV1 - The v1.0.0 collection object to be converted to v2.1.0.\n   * @return {Object} - The compiled v2.x collection info manifest.\n   */\n  info: function (collectionV1) {\n    var info = Builders.super_.prototype.info.call(this, collectionV1);\n    info.schema = constants.SCHEMA_V2_1_0_URL;\n    return info;\n  },\n  /**\n    * Converts collection request urls from v1.0.0 to v2.1.0\n    *\n    * @param {Object} requestV1 - The v1.0.0 request url to be converted to v2.1.0.\n    * @return {Object} - The objectified v2.1.0 compliant URL.\n    */\n  url: function (requestV1) {\n    var v21Url = Builders.super_.prototype.url.call(this, requestV1);\n    return _.isString(v21Url) ? url.parse(v21Url) : v21Url;\n  },\n  /**\n   * A number of auth parameter names have changed from V1 to V2. This function calls the appropriate\n   * mapper function, and creates the V2 auth parameter object.\n   *\n   * @param {Object} entityV1 - A Collection V1 compliant request instance.\n   * @param {?Object} options - The set of options for the current auth cleansing operation.\n   * @param {?Boolean} [options.includeNoauth=false] - When set to true, noauth is set to null.\n   * @returns {{type: *}} - The v2.1.0 compliant request object\n   */\n  auth: function (entityV1, options) {\n    // if the current auth manifest is at a parent level, no further transformation is needed.\n    // @todo: Possible dead code, prune when confirmed\n    if (util.notLegacy(entityV1, 'auth') && entityV1.currentHelper) {\n      return util.sanitizeAuthArray(entityV1, options);\n    }\n    var auth = Builders.super_.prototype.auth.call(this, entityV1, options);\n    return util.authMapToArray({\n      auth: auth\n    }, options);\n  }\n});\nmodule.exports = {\n  input: '1.0.0',\n  output: '2.1.0',\n  Builders: Builders,\n  /**\n   * Converts a single V1 request to a v2.1.0 item.\n   *\n   * @param {Object} request - The v1.0.0 request to be converted to a v2.1.0 format.\n   * @param {Object} options - The set of options for the current conversion sequence.\n   * @param {?Function} callback - The function invoked to mark the end of the current conversion process.\n   * @returns {*}\n   */\n  convertSingle: function (request, options, callback) {\n    var err,\n      converted,\n      builders = new Builders(options);\n    try {\n      converted = builders.singleItem(_.cloneDeep(request));\n    } catch (e) {\n      err = e;\n    }\n    if (callback) {\n      return callback(err, converted);\n    }\n    if (err) {\n      throw err;\n    }\n    return converted;\n  },\n  /**\n   * Converts a single V1 Response to a v2.1.0 Response.\n   *\n   * @param {Object} response - The V1 compliant response to convert to a v2.1.0 format.\n   * @param {Object} options - The set of options for the current conversion process.\n   * @param {?Function} callback - The function invoked to mark the completion of the response conversion.\n   * @returns {*}\n   */\n  convertResponse: function (response, options, callback) {\n    var err,\n      converted,\n      builders = new Builders(options);\n    try {\n      converted = builders.singleResponse(_.cloneDeep(response));\n    } catch (e) {\n      err = e;\n    }\n    if (callback) {\n      return callback(err, converted);\n    }\n    if (err) {\n      throw err;\n    }\n    return converted;\n  },\n  /**\n   * Converts a V1 collection to a V2 collection (performs ID replacement, etc as necessary).\n   *\n   * @param {Object} collection - The V1 collection instance to convert to a v2.1.0 format.\n   * @param {Object} options - The set of options for the current conversion sequence.\n   * @param {?Function} callback - The function invoked to mark the completion of the conversion process/\n   * @returns {*}\n   */\n  convert: function (collection, options, callback) {\n    collection = _.cloneDeep(collection);\n    var auth,\n      event,\n      variable,\n      newCollection = {},\n      units = ['info', 'item'],\n      builders = new Builders(options),\n      authOptions = {\n        excludeNoauth: true\n      },\n      varOpts = options && {\n        fallback: options.env,\n        retainIds: options.retainIds\n      };\n    try {\n      units.forEach(function (unit) {\n        newCollection[unit] = builders[unit](collection);\n      });\n      (auth = builders.auth(collection, authOptions)) && (newCollection.auth = auth);\n      (event = builders.event(collection)) && (newCollection.event = event);\n      (variable = builders.variable(collection, varOpts)) && (newCollection.variable = variable);\n      util.addProtocolProfileBehavior(collection, newCollection);\n    } catch (e) {\n      if (callback) {\n        return callback(e);\n      }\n      throw e;\n    }\n    if (callback) {\n      return callback(null, newCollection);\n    }\n    return newCollection;\n  }\n};","map":{"version":3,"names":["inherits","require","_","noConflict","url","util","constants","BaseBuilders","Builders","super_","apply","arguments","assign","prototype","info","collectionV1","call","schema","SCHEMA_V2_1_0_URL","requestV1","v21Url","isString","parse","auth","entityV1","options","notLegacy","currentHelper","sanitizeAuthArray","authMapToArray","module","exports","input","output","convertSingle","request","callback","err","converted","builders","singleItem","cloneDeep","e","convertResponse","response","singleResponse","convert","collection","event","variable","newCollection","units","authOptions","excludeNoauth","varOpts","fallback","env","retainIds","forEach","unit","addProtocolProfileBehavior"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection-transformer/lib/converters/v1.0.0/converter-v1-to-v21.js"],"sourcesContent":["/* eslint-disable object-shorthand */\n\nvar inherits = require('inherits'),\n    _ = require('lodash').noConflict(),\n\n    url = require('../../url'),\n    util = require('../../util'),\n    constants = require('../../constants'),\n    BaseBuilders = require('./converter-v1-to-v2').Builders,\n\n    Builders;\n\ninherits(Builders = function () {\n    Builders.super_.apply(this, arguments);\n}, BaseBuilders);\n\n_.assign(Builders.prototype, {\n\n    /**\n     * Derives v2.1.0 collection info from a v1.0.0 collection object.\n     *\n     * @param {Object} collectionV1 - The v1.0.0 collection object to be converted to v2.1.0.\n     * @return {Object} - The compiled v2.x collection info manifest.\n     */\n    info: function (collectionV1) {\n        var info = Builders.super_.prototype.info.call(this, collectionV1);\n\n        info.schema = constants.SCHEMA_V2_1_0_URL;\n\n        return info;\n    },\n\n    /**\n      * Converts collection request urls from v1.0.0 to v2.1.0\n      *\n      * @param {Object} requestV1 - The v1.0.0 request url to be converted to v2.1.0.\n      * @return {Object} - The objectified v2.1.0 compliant URL.\n      */\n    url: function (requestV1) {\n        var v21Url = Builders.super_.prototype.url.call(this, requestV1);\n\n        return _.isString(v21Url) ? url.parse(v21Url) : v21Url;\n    },\n\n    /**\n     * A number of auth parameter names have changed from V1 to V2. This function calls the appropriate\n     * mapper function, and creates the V2 auth parameter object.\n     *\n     * @param {Object} entityV1 - A Collection V1 compliant request instance.\n     * @param {?Object} options - The set of options for the current auth cleansing operation.\n     * @param {?Boolean} [options.includeNoauth=false] - When set to true, noauth is set to null.\n     * @returns {{type: *}} - The v2.1.0 compliant request object\n     */\n    auth: function (entityV1, options) {\n        // if the current auth manifest is at a parent level, no further transformation is needed.\n        // @todo: Possible dead code, prune when confirmed\n        if (util.notLegacy(entityV1, 'auth') && entityV1.currentHelper) {\n            return util.sanitizeAuthArray(entityV1, options);\n        }\n\n        var auth = Builders.super_.prototype.auth.call(this, entityV1, options);\n\n        return util.authMapToArray({ auth: auth }, options);\n    }\n});\n\nmodule.exports = {\n    input: '1.0.0',\n    output: '2.1.0',\n    Builders: Builders,\n\n    /**\n     * Converts a single V1 request to a v2.1.0 item.\n     *\n     * @param {Object} request - The v1.0.0 request to be converted to a v2.1.0 format.\n     * @param {Object} options - The set of options for the current conversion sequence.\n     * @param {?Function} callback - The function invoked to mark the end of the current conversion process.\n     * @returns {*}\n     */\n    convertSingle: function (request, options, callback) {\n        var err,\n            converted,\n            builders = new Builders(options);\n\n        try { converted = builders.singleItem(_.cloneDeep(request)); }\n        catch (e) { err = e; }\n\n        if (callback) { return callback(err, converted); }\n\n        if (err) { throw err; }\n\n        return converted;\n    },\n\n    /**\n     * Converts a single V1 Response to a v2.1.0 Response.\n     *\n     * @param {Object} response - The V1 compliant response to convert to a v2.1.0 format.\n     * @param {Object} options - The set of options for the current conversion process.\n     * @param {?Function} callback - The function invoked to mark the completion of the response conversion.\n     * @returns {*}\n     */\n    convertResponse: function (response, options, callback) {\n        var err,\n            converted,\n            builders = new Builders(options);\n\n        try { converted = builders.singleResponse(_.cloneDeep(response)); }\n        catch (e) { err = e; }\n\n        if (callback) { return callback(err, converted); }\n\n        if (err) { throw err; }\n\n        return converted;\n    },\n\n    /**\n     * Converts a V1 collection to a V2 collection (performs ID replacement, etc as necessary).\n     *\n     * @param {Object} collection - The V1 collection instance to convert to a v2.1.0 format.\n     * @param {Object} options - The set of options for the current conversion sequence.\n     * @param {?Function} callback - The function invoked to mark the completion of the conversion process/\n     * @returns {*}\n     */\n    convert: function (collection, options, callback) {\n        collection = _.cloneDeep(collection);\n\n        var auth,\n            event,\n            variable,\n            newCollection = {},\n            units = ['info', 'item'],\n            builders = new Builders(options),\n            authOptions = { excludeNoauth: true },\n            varOpts = options && { fallback: options.env, retainIds: options.retainIds };\n\n        try {\n            units.forEach(function (unit) {\n                newCollection[unit] = builders[unit](collection);\n            });\n\n            (auth = builders.auth(collection, authOptions)) && (newCollection.auth = auth);\n            (event = builders.event(collection)) && (newCollection.event = event);\n            (variable = builders.variable(collection, varOpts)) && (newCollection.variable = variable);\n            util.addProtocolProfileBehavior(collection, newCollection);\n        }\n        catch (e) {\n            if (callback) { return callback(e); }\n            throw e;\n        }\n\n        if (callback) { return callback(null, newCollection); }\n\n        return newCollection;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}