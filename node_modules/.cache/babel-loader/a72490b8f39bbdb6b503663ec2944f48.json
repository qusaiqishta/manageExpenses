{"ast":null,"code":"const Handlebars = require('handlebars');\nmodule.exports = {\n  /**\n   * Hydrate the given template with given data and produce final HTML to render in visualizer\n   *\n   * @param {String} template - handlebars template as a string\n   * @param {Object} userData - data provided by user\n   * @param {Object} options - options for processing the template\n   * @param {Function} callback - callback called with errors and processed template\n   */\n  processTemplate(template, userData, options, callback) {\n    // bail out if there is no valid template to process\n    if (typeof template !== 'string') {\n      return callback(new Error(`Invalid template. Template must be of type string, found ${typeof template}`));\n    }\n    var compiledTemplate = Handlebars.compile(template, options),\n      processedTemplate;\n    try {\n      // hydrate the template with provided data\n      processedTemplate = compiledTemplate(userData);\n    } catch (err) {\n      return callback(err);\n    }\n    return callback(null, processedTemplate);\n  }\n};","map":{"version":3,"names":["Handlebars","require","module","exports","processTemplate","template","userData","options","callback","Error","compiledTemplate","compile","processedTemplate","err"],"sources":["/Users/Qusai.Qishta/node_modules/postman-runtime/lib/visualizer/index.js"],"sourcesContent":["const Handlebars = require('handlebars');\n\nmodule.exports = {\n    /**\n     * Hydrate the given template with given data and produce final HTML to render in visualizer\n     *\n     * @param {String} template - handlebars template as a string\n     * @param {Object} userData - data provided by user\n     * @param {Object} options - options for processing the template\n     * @param {Function} callback - callback called with errors and processed template\n     */\n    processTemplate (template, userData, options, callback) {\n        // bail out if there is no valid template to process\n        if (typeof template !== 'string') {\n            return callback(new Error(`Invalid template. Template must be of type string, found ${typeof template}`));\n        }\n\n        var compiledTemplate = Handlebars.compile(template, options),\n            processedTemplate;\n\n        try {\n            // hydrate the template with provided data\n            processedTemplate = compiledTemplate(userData);\n        }\n        catch (err) {\n            return callback(err);\n        }\n\n        return callback(null, processedTemplate);\n    }\n};\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;AAExCC,MAAM,CAACC,OAAO,GAAG;EACb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,eAAe,CAAEC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAE;IACpD;IACA,IAAI,OAAOH,QAAQ,KAAK,QAAQ,EAAE;MAC9B,OAAOG,QAAQ,CAAC,IAAIC,KAAK,CAAE,4DAA2D,OAAOJ,QAAS,EAAC,CAAC,CAAC;IAC7G;IAEA,IAAIK,gBAAgB,GAAGV,UAAU,CAACW,OAAO,CAACN,QAAQ,EAAEE,OAAO,CAAC;MACxDK,iBAAiB;IAErB,IAAI;MACA;MACAA,iBAAiB,GAAGF,gBAAgB,CAACJ,QAAQ,CAAC;IAClD,CAAC,CACD,OAAOO,GAAG,EAAE;MACR,OAAOL,QAAQ,CAACK,GAAG,CAAC;IACxB;IAEA,OAAOL,QAAQ,CAAC,IAAI,EAAEI,iBAAiB,CAAC;EAC5C;AACJ,CAAC"},"metadata":{},"sourceType":"script"}