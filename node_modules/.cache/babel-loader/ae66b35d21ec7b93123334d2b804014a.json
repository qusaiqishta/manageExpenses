{"ast":null,"code":"/* eslint-disable object-shorthand */\nvar semver = require('semver'),\n  // @todo: Add support for more normalizers\n  normalizers = {\n    '1.0.0': require('./v1')\n  };\nmodule.exports = {\n  /**\n   * Accepts the arguments for normalization and invokes the appropriate normalizer with them.\n   *\n   * @param {Object} collection - The plain collection JSON to be normalized.\n   * @param {Object} options - A set of options for the current normalization.\n   * @param {String} options.normalizeVersion - The base collection schema version for which to normalize.\n   * @param {?Boolean} [options.mutate=false] - When set to true, normalization is done in place.\n   * @param {?Boolean} [options.noDefaults=false] - When set to true, sensible defaults are not added.\n   * @param {?Boolean} [options.prioritizeV2=false] - When set to true, v2 style properties are checked first.\n   * @param {?Boolean} [options.retainEmptyValues=false] - When set to true, empty values are set to '' instead of\n   * being removed.\n   * @param {Function} callback - A function invoked to indicate the completion of the normalization process.\n   * @returns {*}\n   */\n  normalize: function (collection, options, callback) {\n    var version;\n    if (!options || !(version = semver.valid(options.normalizeVersion, true)) || !normalizers[version]) {\n      return callback(new Error('Version not specified or invalid: ' + options.normalizeVersion));\n    }\n    return normalizers[version].normalize(collection, options, callback);\n  },\n  /**\n   * Normalizes a single request or item as per the provided version.\n   *\n   * @param {Object} object - The entity to be normalized.\n   * @param {Object} options - The set of options to be applied to the current normalization.\n   * @param {String} options.normalizeVersion - The base collection schema version for which to normalize.\n   * @param {?Boolean} [options.mutate=false] - When set to true, normalization is done in place.\n   * @param {?Boolean} [options.noDefaults=false] - When set to true, sensible defaults are not added.\n   * @param {?Boolean} [options.prioritizeV2=false] - When set to true, v2 style properties are checked first.\n   * @param {?Boolean} [options.retainEmptyValues=false] - When set to true, empty values are set to '' instead of\n   * being removed.\n   * @param {Function} callback - The function invoked when the normalization has completed.\n   */\n  normalizeSingle: function (object, options, callback) {\n    var version;\n    if (!options || !(version = semver.valid(options.normalizeVersion, true)) || !normalizers[version]) {\n      return callback(new Error('Version not specified or invalid: ' + options.normalizeVersion));\n    }\n    return normalizers[version].normalizeSingle(object, options, callback);\n  },\n  /**\n   * Normalizes a single response as per the provided version.\n   *\n   * @param {Object} response - The response to be normalized.\n   * @param {Object} options - The set of options to be applied to the current normalization.\n   * @param {String} options.normalizeVersion - The base collection schema version for which to normalize.\n   * @param {?Boolean} [options.mutate=false] - When set to true, normalization is done in place.\n   * @param {?Boolean} [options.noDefaults=false] - When set to true, sensible defaults are not added.\n   * @param {?Boolean} [options.prioritizeV2=false] - When set to true, v2 style properties are checked first.\n   * @param {?Boolean} [options.retainEmptyValues=false] - When set to true, empty values are set to '' instead of\n   * being removed.\n   * @param {Function} callback - The function invoked when the normalization has completed.\n   */\n  normalizeResponse: function (response, options, callback) {\n    var version;\n    if (!options || !(version = semver.valid(options.normalizeVersion, true)) || !normalizers[version]) {\n      return callback(new Error('Version not specified or invalid: ' + options.normalizeVersion));\n    }\n    return normalizers[version].normalizeResponse(response, options, callback);\n  }\n};","map":{"version":3,"names":["semver","require","normalizers","module","exports","normalize","collection","options","callback","version","valid","normalizeVersion","Error","normalizeSingle","object","normalizeResponse","response"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection-transformer/lib/normalizers/index.js"],"sourcesContent":["/* eslint-disable object-shorthand */\nvar semver = require('semver'),\n\n    // @todo: Add support for more normalizers\n    normalizers = {\n        '1.0.0': require('./v1')\n    };\n\nmodule.exports = {\n    /**\n     * Accepts the arguments for normalization and invokes the appropriate normalizer with them.\n     *\n     * @param {Object} collection - The plain collection JSON to be normalized.\n     * @param {Object} options - A set of options for the current normalization.\n     * @param {String} options.normalizeVersion - The base collection schema version for which to normalize.\n     * @param {?Boolean} [options.mutate=false] - When set to true, normalization is done in place.\n     * @param {?Boolean} [options.noDefaults=false] - When set to true, sensible defaults are not added.\n     * @param {?Boolean} [options.prioritizeV2=false] - When set to true, v2 style properties are checked first.\n     * @param {?Boolean} [options.retainEmptyValues=false] - When set to true, empty values are set to '' instead of\n     * being removed.\n     * @param {Function} callback - A function invoked to indicate the completion of the normalization process.\n     * @returns {*}\n     */\n    normalize: function (collection, options, callback) {\n        var version;\n\n        if (!options || !(version = semver.valid(options.normalizeVersion, true)) || !normalizers[version]) {\n            return callback(new Error('Version not specified or invalid: ' + options.normalizeVersion));\n        }\n\n        return normalizers[version].normalize(collection, options, callback);\n    },\n\n    /**\n     * Normalizes a single request or item as per the provided version.\n     *\n     * @param {Object} object - The entity to be normalized.\n     * @param {Object} options - The set of options to be applied to the current normalization.\n     * @param {String} options.normalizeVersion - The base collection schema version for which to normalize.\n     * @param {?Boolean} [options.mutate=false] - When set to true, normalization is done in place.\n     * @param {?Boolean} [options.noDefaults=false] - When set to true, sensible defaults are not added.\n     * @param {?Boolean} [options.prioritizeV2=false] - When set to true, v2 style properties are checked first.\n     * @param {?Boolean} [options.retainEmptyValues=false] - When set to true, empty values are set to '' instead of\n     * being removed.\n     * @param {Function} callback - The function invoked when the normalization has completed.\n     */\n    normalizeSingle: function (object, options, callback) {\n        var version;\n\n        if (!options || !(version = semver.valid(options.normalizeVersion, true)) || !normalizers[version]) {\n            return callback(new Error('Version not specified or invalid: ' + options.normalizeVersion));\n        }\n\n        return normalizers[version].normalizeSingle(object, options, callback);\n    },\n\n    /**\n     * Normalizes a single response as per the provided version.\n     *\n     * @param {Object} response - The response to be normalized.\n     * @param {Object} options - The set of options to be applied to the current normalization.\n     * @param {String} options.normalizeVersion - The base collection schema version for which to normalize.\n     * @param {?Boolean} [options.mutate=false] - When set to true, normalization is done in place.\n     * @param {?Boolean} [options.noDefaults=false] - When set to true, sensible defaults are not added.\n     * @param {?Boolean} [options.prioritizeV2=false] - When set to true, v2 style properties are checked first.\n     * @param {?Boolean} [options.retainEmptyValues=false] - When set to true, empty values are set to '' instead of\n     * being removed.\n     * @param {Function} callback - The function invoked when the normalization has completed.\n     */\n    normalizeResponse: function (response, options, callback) {\n        var version;\n\n        if (!options || !(version = semver.valid(options.normalizeVersion, true)) || !normalizers[version]) {\n            return callback(new Error('Version not specified or invalid: ' + options.normalizeVersion));\n        }\n\n        return normalizers[version].normalizeResponse(response, options, callback);\n    }\n};\n"],"mappings":"AAAA;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAE1B;EACAC,WAAW,GAAG;IACV,OAAO,EAAED,OAAO,CAAC,MAAM;EAC3B,CAAC;AAELE,MAAM,CAACC,OAAO,GAAG;EACb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,SAAS,EAAE,UAAUC,UAAU,EAAEC,OAAO,EAAEC,QAAQ,EAAE;IAChD,IAAIC,OAAO;IAEX,IAAI,CAACF,OAAO,IAAI,EAAEE,OAAO,GAAGT,MAAM,CAACU,KAAK,CAACH,OAAO,CAACI,gBAAgB,EAAE,IAAI,CAAC,CAAC,IAAI,CAACT,WAAW,CAACO,OAAO,CAAC,EAAE;MAChG,OAAOD,QAAQ,CAAC,IAAII,KAAK,CAAC,oCAAoC,GAAGL,OAAO,CAACI,gBAAgB,CAAC,CAAC;IAC/F;IAEA,OAAOT,WAAW,CAACO,OAAO,CAAC,CAACJ,SAAS,CAACC,UAAU,EAAEC,OAAO,EAAEC,QAAQ,CAAC;EACxE,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,eAAe,EAAE,UAAUC,MAAM,EAAEP,OAAO,EAAEC,QAAQ,EAAE;IAClD,IAAIC,OAAO;IAEX,IAAI,CAACF,OAAO,IAAI,EAAEE,OAAO,GAAGT,MAAM,CAACU,KAAK,CAACH,OAAO,CAACI,gBAAgB,EAAE,IAAI,CAAC,CAAC,IAAI,CAACT,WAAW,CAACO,OAAO,CAAC,EAAE;MAChG,OAAOD,QAAQ,CAAC,IAAII,KAAK,CAAC,oCAAoC,GAAGL,OAAO,CAACI,gBAAgB,CAAC,CAAC;IAC/F;IAEA,OAAOT,WAAW,CAACO,OAAO,CAAC,CAACI,eAAe,CAACC,MAAM,EAAEP,OAAO,EAAEC,QAAQ,CAAC;EAC1E,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIO,iBAAiB,EAAE,UAAUC,QAAQ,EAAET,OAAO,EAAEC,QAAQ,EAAE;IACtD,IAAIC,OAAO;IAEX,IAAI,CAACF,OAAO,IAAI,EAAEE,OAAO,GAAGT,MAAM,CAACU,KAAK,CAACH,OAAO,CAACI,gBAAgB,EAAE,IAAI,CAAC,CAAC,IAAI,CAACT,WAAW,CAACO,OAAO,CAAC,EAAE;MAChG,OAAOD,QAAQ,CAAC,IAAII,KAAK,CAAC,oCAAoC,GAAGL,OAAO,CAACI,gBAAgB,CAAC,CAAC;IAC/F;IAEA,OAAOT,WAAW,CAACO,OAAO,CAAC,CAACM,iBAAiB,CAACC,QAAQ,EAAET,OAAO,EAAEC,QAAQ,CAAC;EAC9E;AACJ,CAAC"},"metadata":{},"sourceType":"script"}