{"ast":null,"code":"var _ = require('../util').lodash,\n  PropertyBase = require('./property-base').PropertyBase,\n  PropertyList = require('./property-list').PropertyList,\n  E = '',\n  EQ = '=',\n  PAIR_SPLIT_REGEX = /; */,\n  COOKIES_SEPARATOR = '; ',\n  /**\n   * Enum for all the Cookie attributes.\n   *\n   * @private\n   * @readonly\n   * @enum {string} CookieAttributes\n   */\n  cookieAttributes = {\n    httponly: 'httpOnly',\n    secure: 'secure',\n    domain: 'domain',\n    path: 'path',\n    'max-age': 'maxAge',\n    session: 'session',\n    expires: 'expires'\n  },\n  Cookie;\n\n/**\n * The following is the object structure accepted as constructor parameter while calling `new Cookie(...)`. It is\n * also the structure exported when {@link Property#toJSON} or {@link Property#toObjectResolved} is called on a\n * Cookie instance.\n *\n * @typedef Cookie.definition\n *\n * @property {String=} [key] The name of the cookie. Some call it the \"name\".\n * @property {String=} [value] The value stored in the Cookie\n * @property {String=} [expires] Expires sets an expiry date for when a cookie gets deleted. It should either be a\n * date object or timestamp string of date.\n * @property {Number=} [maxAge] Max-age sets the time in seconds for when a cookie will be deleted.\n * @property {String=} [domain] Indicates the domain(s) for which the cookie should be sent.\n * @property {String=} [path] Limits the scope of the cookie to a specified path, e.g: \"/accounts\"\n * @property {Boolean=} [secure] A secure cookie will only be sent to the server when a request is made using SSL and\n * the HTTPS protocol.\n * The idea that the contents of the cookie are of high value and could be potentially damaging to transmit\n * as clear text.\n * @property {Boolean=} [httpOnly] The idea behind HTTP-only cookies is to instruct a browser that a cookie should never\n * be accessible via JavaScript through the document.cookie property. This feature was designed as a security measure\n * to help prevent cross-site scripting (XSS) attacks perpetrated by stealing cookies via JavaScript.\n * @property {Boolean=} [hostOnly] Indicates that this cookie is only valid for the given domain (and not its parent or\n * child domains.)\n * @property {Boolean=} [session] Indicates whether this is a Session Cookie. (A transient cookie, which is deleted at\n * the end of an HTTP session.)\n * @property {Array=} [extensions] Any extra attributes that are extensions to the original Cookie specification can be\n * specified here.\n * @property {String} [extensions[].key] Name of the extension.\n * @property {String} [extensions[].value] Value of the extension\n *\n * @example <caption>JSON definition of an example cookie</caption>\n * {\n *     \"key\": \"my-cookie-name\",\n *     \"expires\": \"1464769543832\",\n *      // UNIX timestamp, in *milliseconds*\n *     \"maxAge\": \"300\",\n *      // In seconds. In this case, the Cookie is valid for 5 minutes\n *     \"domain\": \"something.example.com\",\n *     \"path\": \"/\",\n *     \"secure\": false,\n *     \"httpOnly\": true,\n *     \"session\": false,\n *     \"value\": \"my-cookie-value\",\n *     \"extensions\": [{\n *         \"key\": \"Priority\",\n *         \"value\": \"HIGH\"\n *     }]\n * }\n */\n_.inherit(\n/**\n * A Postman Cookie definition that comprehensively represents an HTTP Cookie.\n *\n * @constructor\n * @extends {PropertyBase}\n *\n * @param {Cookie.definition} [options] Pass the initial definition of the Cookie.\n * @example <caption>Create a new Cookie</caption>\n * var Cookie = require('postman-collection').Cookie,\n *     myCookie = new Cookie({\n *          name: 'my-cookie-name',\n *          expires: '1464769543832', // UNIX timestamp, in *milliseconds*\n *          maxAge: '300',  // In seconds. In this case, the Cookie is valid for 5 minutes\n *          domain: 'something.example.com',\n *          path: '/',\n *          secure: false,\n *          httpOnly: true,\n *          session: false,\n *          value: 'my-cookie-value',\n *          extensions: [{\n *              key: 'Priority',\n *              value: 'HIGH'\n *          }]\n *     });\n *\n * @example <caption>Parse a Cookie Header</caption>\n * var Cookie = require('postman-collection').Cookie,\n *     rawHeader = 'myCookie=myValue;Path=/;Expires=Sun, 04-Feb-2018 14:18:27 GMT;Secure;HttpOnly;Priority=HIGH'\n *     myCookie = new Cookie(rawHeader);\n *\n * console.log(myCookie.toJSON());\n */\nCookie = function PostmanCookie(options) {\n  // this constructor is intended to inherit and as such the super constructor is required to be executed\n  Cookie.super_.call(this, options);\n  _.isString(options) && (options = Cookie.parse(options));\n  options && this.update(options);\n}, PropertyBase);\n_.assign(Cookie.prototype, /** @lends Cookie.prototype */{\n  update(options) {\n    _.mergeDefined(this, /** @lends Cookie.prototype */{\n      /**\n       * The name of the cookie.\n       *\n       * @type {String}\n       */\n      name: _.choose(options.name, options.key),\n      /**\n       * Expires sets an expiry date for when a cookie gets deleted. It should either be a date object or\n       * timestamp string of date.\n       *\n       * @type {Date|String}\n       *\n       * @note\n       * The value for this option is a date in the format Wdy, DD-Mon-YYYY HH:MM:SS GMT such as\n       * \"Sat, 02 May 2009 23:38:25 GMT\". Without the expires option, a cookie has a lifespan of a single session.\n       * A session is defined as finished when the browser is shut down, so session cookies exist only while the\n       * browser remains open. If the expires option is set to a date that appears in the past, then the cookie is\n       * immediately deleted in browser.\n       *\n       * @todo Accept date object and convert stringified date (timestamp only) to date object\n       * @todo Consider using Infinity as a default\n       */\n      expires: _.isString(options.expires) ? new Date(options.expires) : options.expires,\n      /**\n       * Max-age sets the time in seconds for when a cookie will be deleted.\n       *\n       * @type {Number}\n       */\n      maxAge: _.has(options, 'maxAge') ? Number(options.maxAge) : undefined,\n      /**\n       * Indicates the domain(s) for which the cookie should be sent.\n       *\n       * @type {String}\n       *\n       * @note\n       * By default, domain is set to the host name of the page setting the cookie, so the cookie value is sent\n       * whenever a request is made to the same host name. The value set for the domain option must be part of the\n       * host name that is sending the Set-Cookie header. The SDK does not perform this check, but the underlying\n       * client that actually sends the request could do it automatically.\n       */\n      domain: options.domain,\n      /**\n       * @type {String}\n       *\n       * @note\n       * On server, the default value for the path option is the path of the URL that sent the Set-Cookie header.\n       */\n      path: options.path,\n      /**\n       * A secure cookie will only be sent to the server when a request is made using SSL and the HTTPS protocol.\n       * The idea that the contents of the cookie are of high value and could be potentially damaging to transmit\n       * as clear text.\n       *\n       * @type {Boolean}\n       */\n      secure: _.has(options, 'secure') ? Boolean(options.secure) : undefined,\n      /**\n       * The idea behind HTTP-only cookies is to instruct a browser that a cookie should never be accessible via\n       * JavaScript through the document.cookie property. This feature was designed as a security measure to help\n       * prevent cross-site scripting (XSS) attacks perpetrated by stealing cookies via JavaScript.\n       *\n       * @type {Boolean}\n       */\n      httpOnly: _.has(options, 'httpOnly') ? Boolean(options.httpOnly) : undefined,\n      /**\n       * @type {Boolean}\n       */\n      hostOnly: _.has(options, 'hostOnly') ? Boolean(options.hostOnly) : undefined,\n      /**\n       * Indicates whether this is a Session Cookie.\n       *\n       * @type {Boolean}\n       */\n      session: _.has(options, 'session') ? Boolean(options.session) : undefined,\n      /**\n       * @note The commonly held belief is that cookie values must be URL-encoded, but this is a fallacy even\n       * though it is the de facto implementation. The original specification indicates that only three types of\n       * characters must be encoded: semicolon, comma, and white space. The specification indicates that URL\n       * encoding may be used but stops short of requiring it. The RFC makes no mention of encoding whatsoever.\n       * Still, almost all implementations perform some sort of URL encoding on cookie values.\n       * @type {String}\n       */\n      value: options.value ? _.ensureEncoded(options.value) : undefined,\n      /**\n       * Any extra parameters that are not strictly a part of the Cookie spec go here.\n       *\n       * @type {Array}\n       */\n      extensions: options.extensions || undefined\n    });\n  },\n  /**\n   * Get the value of this cookie.\n   *\n   * @returns {String}\n   */\n  valueOf() {\n    try {\n      return decodeURIComponent(this.value);\n    }\n    // handle malformed URI sequence\n    // refer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI\n    catch (error) {\n      /* istanbul ignore next */\n      return this.value;\n    }\n  },\n  /**\n   * Converts the Cookie to a single Set-Cookie header string.\n   *\n   * @returns {String}\n   */\n  toString() {\n    var str = Cookie.unparseSingle(this);\n    if (this.expires && this.expires instanceof Date) {\n      // check for valid date\n      if (!Number.isNaN(this.expires.getTime())) {\n        str += '; Expires=' + this.expires.toUTCString();\n      }\n    } else if (this.expires) {\n      str += '; Expires=' + this.expires;\n    }\n    if (this.maxAge && this.maxAge !== Infinity) {\n      str += '; Max-Age=' + this.maxAge;\n    }\n    if (this.domain && !this.hostOnly) {\n      str += '; Domain=' + this.domain;\n    }\n    if (this.path) {\n      str += '; Path=' + this.path;\n    }\n    if (this.secure) {\n      str += '; Secure';\n    }\n    if (this.httpOnly) {\n      str += '; HttpOnly';\n    }\n    if (this.extensions) {\n      this.extensions.forEach(_ref => {\n        let {\n          key,\n          value\n        } = _ref;\n        str += `; ${key}`;\n        str += value === true ? '' : `=${value}`;\n      });\n    }\n    return str;\n  }\n});\n_.assign(Cookie, /** @lends Cookie */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'Cookie',\n  // define behaviour of this object when put in list\n  _postman_propertyIndexKey: 'name',\n  _postman_propertyIndexCaseInsensitive: true,\n  _postman_propertyAllowsMultipleValues: true,\n  /**\n   * Check whether an object is an instance of PostmanCookie.\n   *\n   * @param {*} obj -\n   * @returns {Boolean}\n   */\n  isCookie: function (obj) {\n    return Boolean(obj) && (obj instanceof Cookie || _.inSuperChain(obj.constructor, '_postman_propertyName', Cookie._postman_propertyName));\n  },\n  /**\n   * Stringifies an Array or {@link PropertyList} of Cookies into a single string.\n   *\n   * @param {Cookie[]} cookies - List of cookie definition object\n   * @returns {String}\n   */\n  unparse: function (cookies) {\n    if (!_.isArray(cookies) && !PropertyList.isPropertyList(cookies)) {\n      return E;\n    }\n    return cookies.map(Cookie.unparseSingle).join(COOKIES_SEPARATOR);\n  },\n  /**\n   * Unparses a single Cookie.\n   *\n   * @param {Cookie} cookie - Cookie definition object\n   * @returns {String}\n   */\n  unparseSingle: function (cookie) {\n    if (!_.isObject(cookie)) {\n      return E;\n    }\n    var value = _.isNil(cookie.value) ? E : cookie.value;\n\n    // for the empty name, return just the value to match the browser behavior\n    if (!cookie.name) {\n      return value;\n    }\n    return cookie.name + EQ + value;\n  },\n  /**\n   * Cookie header parser\n   *\n   * @param {String} str -\n   * @returns {*} A plain cookie options object, use it to create a new Cookie\n   */\n  parse: function (str) {\n    if (!_.isString(str)) {\n      return str;\n    }\n    var obj = {},\n      pairs = str.split(PAIR_SPLIT_REGEX),\n      nameval;\n    nameval = Cookie.splitParam(pairs.shift()); // The first kvp is the name and value\n    obj.key = nameval.key;\n    obj.value = nameval.value;\n    pairs.forEach(function (pair) {\n      var keyval = Cookie.splitParam(pair),\n        value = keyval.value,\n        keyLower = keyval.key.toLowerCase();\n      if (cookieAttributes[keyLower]) {\n        obj[cookieAttributes[keyLower]] = value;\n      } else {\n        obj.extensions = obj.extensions || [];\n        obj.extensions.push(keyval);\n      }\n    });\n    // Handle the hostOnly flag\n    if (!obj.domain) {\n      obj.hostOnly = true;\n    }\n    return obj;\n  },\n  /**\n   * Converts the Cookie to a single Set-Cookie header string.\n   *\n   * @param {Cookie} cookie - Cookie definition object\n   * @returns {String}\n   */\n  stringify: function (cookie) {\n    return Cookie.prototype.toString.call(cookie);\n  },\n  /**\n   * Splits a Cookie parameter into a key and a value\n   *\n   * @private\n   * @param {String} param -\n   * @returns {{key: *, value: (Boolean|*)}}\n   */\n  splitParam: function (param) {\n    var split = param.split('='),\n      key,\n      value;\n    key = split[0].trim();\n    value = _.isString(split[1]) ? split[1].trim() : true;\n    if (_.isString(value) && value[0] === '\"') {\n      value = value.slice(1, -1);\n    }\n    return {\n      key,\n      value\n    };\n  }\n});\nmodule.exports = {\n  Cookie\n};","map":{"version":3,"names":["_","require","lodash","PropertyBase","PropertyList","E","EQ","PAIR_SPLIT_REGEX","COOKIES_SEPARATOR","cookieAttributes","httponly","secure","domain","path","session","expires","Cookie","inherit","PostmanCookie","options","super_","call","isString","parse","update","assign","prototype","mergeDefined","name","choose","key","Date","maxAge","has","Number","undefined","Boolean","httpOnly","hostOnly","value","ensureEncoded","extensions","valueOf","decodeURIComponent","error","toString","str","unparseSingle","isNaN","getTime","toUTCString","Infinity","forEach","_postman_propertyName","_postman_propertyIndexKey","_postman_propertyIndexCaseInsensitive","_postman_propertyAllowsMultipleValues","isCookie","obj","inSuperChain","constructor","unparse","cookies","isArray","isPropertyList","map","join","cookie","isObject","isNil","pairs","split","nameval","splitParam","shift","pair","keyval","keyLower","toLowerCase","push","stringify","param","trim","slice","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/cookie.js"],"sourcesContent":["var _ = require('../util').lodash,\n    PropertyBase = require('./property-base').PropertyBase,\n    PropertyList = require('./property-list').PropertyList,\n\n    E = '',\n    EQ = '=',\n    PAIR_SPLIT_REGEX = /; */,\n    COOKIES_SEPARATOR = '; ',\n\n    /**\n     * Enum for all the Cookie attributes.\n     *\n     * @private\n     * @readonly\n     * @enum {string} CookieAttributes\n     */\n    cookieAttributes = {\n        httponly: 'httpOnly',\n        secure: 'secure',\n        domain: 'domain',\n        path: 'path',\n        'max-age': 'maxAge',\n        session: 'session',\n        expires: 'expires'\n    },\n\n    Cookie;\n\n/**\n * The following is the object structure accepted as constructor parameter while calling `new Cookie(...)`. It is\n * also the structure exported when {@link Property#toJSON} or {@link Property#toObjectResolved} is called on a\n * Cookie instance.\n *\n * @typedef Cookie.definition\n *\n * @property {String=} [key] The name of the cookie. Some call it the \"name\".\n * @property {String=} [value] The value stored in the Cookie\n * @property {String=} [expires] Expires sets an expiry date for when a cookie gets deleted. It should either be a\n * date object or timestamp string of date.\n * @property {Number=} [maxAge] Max-age sets the time in seconds for when a cookie will be deleted.\n * @property {String=} [domain] Indicates the domain(s) for which the cookie should be sent.\n * @property {String=} [path] Limits the scope of the cookie to a specified path, e.g: \"/accounts\"\n * @property {Boolean=} [secure] A secure cookie will only be sent to the server when a request is made using SSL and\n * the HTTPS protocol.\n * The idea that the contents of the cookie are of high value and could be potentially damaging to transmit\n * as clear text.\n * @property {Boolean=} [httpOnly] The idea behind HTTP-only cookies is to instruct a browser that a cookie should never\n * be accessible via JavaScript through the document.cookie property. This feature was designed as a security measure\n * to help prevent cross-site scripting (XSS) attacks perpetrated by stealing cookies via JavaScript.\n * @property {Boolean=} [hostOnly] Indicates that this cookie is only valid for the given domain (and not its parent or\n * child domains.)\n * @property {Boolean=} [session] Indicates whether this is a Session Cookie. (A transient cookie, which is deleted at\n * the end of an HTTP session.)\n * @property {Array=} [extensions] Any extra attributes that are extensions to the original Cookie specification can be\n * specified here.\n * @property {String} [extensions[].key] Name of the extension.\n * @property {String} [extensions[].value] Value of the extension\n *\n * @example <caption>JSON definition of an example cookie</caption>\n * {\n *     \"key\": \"my-cookie-name\",\n *     \"expires\": \"1464769543832\",\n *      // UNIX timestamp, in *milliseconds*\n *     \"maxAge\": \"300\",\n *      // In seconds. In this case, the Cookie is valid for 5 minutes\n *     \"domain\": \"something.example.com\",\n *     \"path\": \"/\",\n *     \"secure\": false,\n *     \"httpOnly\": true,\n *     \"session\": false,\n *     \"value\": \"my-cookie-value\",\n *     \"extensions\": [{\n *         \"key\": \"Priority\",\n *         \"value\": \"HIGH\"\n *     }]\n * }\n */\n_.inherit((\n\n    /**\n     * A Postman Cookie definition that comprehensively represents an HTTP Cookie.\n     *\n     * @constructor\n     * @extends {PropertyBase}\n     *\n     * @param {Cookie.definition} [options] Pass the initial definition of the Cookie.\n     * @example <caption>Create a new Cookie</caption>\n     * var Cookie = require('postman-collection').Cookie,\n     *     myCookie = new Cookie({\n     *          name: 'my-cookie-name',\n     *          expires: '1464769543832', // UNIX timestamp, in *milliseconds*\n     *          maxAge: '300',  // In seconds. In this case, the Cookie is valid for 5 minutes\n     *          domain: 'something.example.com',\n     *          path: '/',\n     *          secure: false,\n     *          httpOnly: true,\n     *          session: false,\n     *          value: 'my-cookie-value',\n     *          extensions: [{\n     *              key: 'Priority',\n     *              value: 'HIGH'\n     *          }]\n     *     });\n     *\n     * @example <caption>Parse a Cookie Header</caption>\n     * var Cookie = require('postman-collection').Cookie,\n     *     rawHeader = 'myCookie=myValue;Path=/;Expires=Sun, 04-Feb-2018 14:18:27 GMT;Secure;HttpOnly;Priority=HIGH'\n     *     myCookie = new Cookie(rawHeader);\n     *\n     * console.log(myCookie.toJSON());\n     */\n    Cookie = function PostmanCookie (options) {\n        // this constructor is intended to inherit and as such the super constructor is required to be executed\n        Cookie.super_.call(this, options);\n\n        _.isString(options) && (options = Cookie.parse(options));\n\n        options && this.update(options);\n    }), PropertyBase);\n\n_.assign(Cookie.prototype, /** @lends Cookie.prototype */ {\n    update (options) {\n        _.mergeDefined(this, /** @lends Cookie.prototype */ {\n            /**\n             * The name of the cookie.\n             *\n             * @type {String}\n             */\n            name: _.choose(options.name, options.key),\n\n            /**\n             * Expires sets an expiry date for when a cookie gets deleted. It should either be a date object or\n             * timestamp string of date.\n             *\n             * @type {Date|String}\n             *\n             * @note\n             * The value for this option is a date in the format Wdy, DD-Mon-YYYY HH:MM:SS GMT such as\n             * \"Sat, 02 May 2009 23:38:25 GMT\". Without the expires option, a cookie has a lifespan of a single session.\n             * A session is defined as finished when the browser is shut down, so session cookies exist only while the\n             * browser remains open. If the expires option is set to a date that appears in the past, then the cookie is\n             * immediately deleted in browser.\n             *\n             * @todo Accept date object and convert stringified date (timestamp only) to date object\n             * @todo Consider using Infinity as a default\n             */\n            expires: _.isString(options.expires) ? new Date(options.expires) : options.expires,\n\n            /**\n             * Max-age sets the time in seconds for when a cookie will be deleted.\n             *\n             * @type {Number}\n             */\n            maxAge: _.has(options, 'maxAge') ? Number(options.maxAge) : undefined,\n\n            /**\n             * Indicates the domain(s) for which the cookie should be sent.\n             *\n             * @type {String}\n             *\n             * @note\n             * By default, domain is set to the host name of the page setting the cookie, so the cookie value is sent\n             * whenever a request is made to the same host name. The value set for the domain option must be part of the\n             * host name that is sending the Set-Cookie header. The SDK does not perform this check, but the underlying\n             * client that actually sends the request could do it automatically.\n             */\n            domain: options.domain,\n\n            /**\n             * @type {String}\n             *\n             * @note\n             * On server, the default value for the path option is the path of the URL that sent the Set-Cookie header.\n             */\n            path: options.path,\n\n            /**\n             * A secure cookie will only be sent to the server when a request is made using SSL and the HTTPS protocol.\n             * The idea that the contents of the cookie are of high value and could be potentially damaging to transmit\n             * as clear text.\n             *\n             * @type {Boolean}\n             */\n            secure: _.has(options, 'secure') ? Boolean(options.secure) : undefined,\n\n            /**\n             * The idea behind HTTP-only cookies is to instruct a browser that a cookie should never be accessible via\n             * JavaScript through the document.cookie property. This feature was designed as a security measure to help\n             * prevent cross-site scripting (XSS) attacks perpetrated by stealing cookies via JavaScript.\n             *\n             * @type {Boolean}\n             */\n            httpOnly: _.has(options, 'httpOnly') ? Boolean(options.httpOnly) : undefined,\n\n            /**\n             * @type {Boolean}\n             */\n            hostOnly: _.has(options, 'hostOnly') ? Boolean(options.hostOnly) : undefined,\n\n            /**\n             * Indicates whether this is a Session Cookie.\n             *\n             * @type {Boolean}\n             */\n            session: _.has(options, 'session') ? Boolean(options.session) : undefined,\n\n            /**\n             * @note The commonly held belief is that cookie values must be URL-encoded, but this is a fallacy even\n             * though it is the de facto implementation. The original specification indicates that only three types of\n             * characters must be encoded: semicolon, comma, and white space. The specification indicates that URL\n             * encoding may be used but stops short of requiring it. The RFC makes no mention of encoding whatsoever.\n             * Still, almost all implementations perform some sort of URL encoding on cookie values.\n             * @type {String}\n             */\n            value: options.value ? _.ensureEncoded(options.value) : undefined,\n\n            /**\n             * Any extra parameters that are not strictly a part of the Cookie spec go here.\n             *\n             * @type {Array}\n             */\n            extensions: options.extensions || undefined\n        });\n    },\n\n    /**\n     * Get the value of this cookie.\n     *\n     * @returns {String}\n     */\n    valueOf () {\n        try {\n            return decodeURIComponent(this.value);\n        }\n        // handle malformed URI sequence\n        // refer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI\n        catch (error) {\n            /* istanbul ignore next */\n            return this.value;\n        }\n    },\n\n    /**\n     * Converts the Cookie to a single Set-Cookie header string.\n     *\n     * @returns {String}\n     */\n    toString () {\n        var str = Cookie.unparseSingle(this);\n\n        if (this.expires && this.expires instanceof Date) {\n            // check for valid date\n            if (!Number.isNaN(this.expires.getTime())) {\n                str += '; Expires=' + this.expires.toUTCString();\n            }\n        }\n        else if (this.expires) {\n            str += '; Expires=' + this.expires;\n        }\n\n        if (this.maxAge && this.maxAge !== Infinity) {\n            str += '; Max-Age=' + this.maxAge;\n        }\n\n        if (this.domain && !this.hostOnly) {\n            str += '; Domain=' + this.domain;\n        }\n\n        if (this.path) {\n            str += '; Path=' + this.path;\n        }\n\n        if (this.secure) {\n            str += '; Secure';\n        }\n\n        if (this.httpOnly) {\n            str += '; HttpOnly';\n        }\n\n        if (this.extensions) {\n            this.extensions.forEach(({ key, value }) => {\n                str += `; ${key}`;\n                str += value === true ? '' : `=${value}`;\n            });\n        }\n\n        return str;\n    }\n});\n\n_.assign(Cookie, /** @lends Cookie */ {\n\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'Cookie',\n\n    // define behaviour of this object when put in list\n    _postman_propertyIndexKey: 'name',\n    _postman_propertyIndexCaseInsensitive: true,\n    _postman_propertyAllowsMultipleValues: true,\n\n    /**\n     * Check whether an object is an instance of PostmanCookie.\n     *\n     * @param {*} obj -\n     * @returns {Boolean}\n     */\n    isCookie: function (obj) {\n        return Boolean(obj) && ((obj instanceof Cookie) ||\n            _.inSuperChain(obj.constructor, '_postman_propertyName', Cookie._postman_propertyName));\n    },\n\n    /**\n     * Stringifies an Array or {@link PropertyList} of Cookies into a single string.\n     *\n     * @param {Cookie[]} cookies - List of cookie definition object\n     * @returns {String}\n     */\n    unparse: function (cookies) {\n        if (!_.isArray(cookies) && !PropertyList.isPropertyList(cookies)) {\n            return E;\n        }\n\n        return cookies.map(Cookie.unparseSingle).join(COOKIES_SEPARATOR);\n    },\n\n    /**\n     * Unparses a single Cookie.\n     *\n     * @param {Cookie} cookie - Cookie definition object\n     * @returns {String}\n     */\n    unparseSingle: function (cookie) {\n        if (!_.isObject(cookie)) { return E; }\n\n        var value = _.isNil(cookie.value) ? E : cookie.value;\n\n        // for the empty name, return just the value to match the browser behavior\n        if (!cookie.name) {\n            return value;\n        }\n\n        return cookie.name + EQ + value;\n    },\n\n    /**\n     * Cookie header parser\n     *\n     * @param {String} str -\n     * @returns {*} A plain cookie options object, use it to create a new Cookie\n     */\n    parse: function (str) {\n        if (!_.isString(str)) {\n            return str;\n        }\n\n        var obj = {},\n            pairs = str.split(PAIR_SPLIT_REGEX),\n            nameval;\n\n        nameval = Cookie.splitParam(pairs.shift()); // The first kvp is the name and value\n        obj.key = nameval.key;\n        obj.value = nameval.value;\n\n        pairs.forEach(function (pair) {\n            var keyval = Cookie.splitParam(pair),\n                value = keyval.value,\n                keyLower = keyval.key.toLowerCase();\n\n            if (cookieAttributes[keyLower]) {\n                obj[cookieAttributes[keyLower]] = value;\n            }\n            else {\n                obj.extensions = obj.extensions || [];\n                obj.extensions.push(keyval);\n            }\n        });\n        // Handle the hostOnly flag\n        if (!obj.domain) {\n            obj.hostOnly = true;\n        }\n\n        return obj;\n    },\n\n    /**\n     * Converts the Cookie to a single Set-Cookie header string.\n     *\n     * @param {Cookie} cookie - Cookie definition object\n     * @returns {String}\n     */\n    stringify: function (cookie) {\n        return Cookie.prototype.toString.call(cookie);\n    },\n\n    /**\n     * Splits a Cookie parameter into a key and a value\n     *\n     * @private\n     * @param {String} param -\n     * @returns {{key: *, value: (Boolean|*)}}\n     */\n    splitParam: function (param) {\n        var split = param.split('='),\n            key, value;\n\n        key = split[0].trim();\n        value = _.isString(split[1]) ? split[1].trim() : true;\n\n        if (_.isString(value) && value[0] === '\"') {\n            value = value.slice(1, -1);\n        }\n\n        return { key, value };\n    }\n});\n\nmodule.exports = {\n    Cookie\n};\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM;EAC7BC,YAAY,GAAGF,OAAO,CAAC,iBAAiB,CAAC,CAACE,YAAY;EACtDC,YAAY,GAAGH,OAAO,CAAC,iBAAiB,CAAC,CAACG,YAAY;EAEtDC,CAAC,GAAG,EAAE;EACNC,EAAE,GAAG,GAAG;EACRC,gBAAgB,GAAG,KAAK;EACxBC,iBAAiB,GAAG,IAAI;EAExB;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,gBAAgB,GAAG;IACfC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE,QAAQ;IAChBC,MAAM,EAAE,QAAQ;IAChBC,IAAI,EAAE,MAAM;IACZ,SAAS,EAAE,QAAQ;IACnBC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE;EACb,CAAC;EAEDC,MAAM;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,CAAC,CAACiB,OAAO;AAEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACID,MAAM,GAAG,SAASE,aAAa,CAAEC,OAAO,EAAE;EACtC;EACAH,MAAM,CAACI,MAAM,CAACC,IAAI,CAAC,IAAI,EAAEF,OAAO,CAAC;EAEjCnB,CAAC,CAACsB,QAAQ,CAACH,OAAO,CAAC,KAAKA,OAAO,GAAGH,MAAM,CAACO,KAAK,CAACJ,OAAO,CAAC,CAAC;EAExDA,OAAO,IAAI,IAAI,CAACK,MAAM,CAACL,OAAO,CAAC;AACnC,CAAC,EAAGhB,YAAY,CAAC;AAErBH,CAAC,CAACyB,MAAM,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"},"metadata":{},"sourceType":"script"}