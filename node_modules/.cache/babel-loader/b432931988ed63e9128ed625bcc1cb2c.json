{"ast":null,"code":"'use strict';\n\nvar zlib = require('zlib');\nvar stream = require('stream');\nvar inherit = require('util').inherits;\nvar Buffer = require('safe-buffer').Buffer;\nvar Inflate;\nInflate = function (options) {\n  this.options = options;\n  this._stream = null;\n  stream.Transform.call(this);\n};\ninherit(Inflate, stream.Transform);\nInflate.prototype._transform = function (chunk, encoding, callback) {\n  var self = this;\n  if (!self._stream) {\n    // If the response stream does not have a valid deflate header, use `InflateRaw`\n    if ((Buffer.from(chunk, encoding)[0] & 0x0F) === 0x08) {\n      self._stream = zlib.createInflate(self.options);\n    } else {\n      self._stream = zlib.createInflateRaw(self.options);\n    }\n    self._stream.on('error', function (error) {\n      self.emit('error', error);\n    });\n    self._stream.on('data', function (chunk) {\n      self.push(chunk);\n    });\n    self._stream.once('end', function () {\n      self._ended = true;\n      self.push(null);\n    });\n  }\n  self._stream.write(chunk, encoding, callback);\n};\nInflate.prototype._flush = function (callback) {\n  if (this._stream && !this._ended) {\n    this._stream.once('end', callback);\n    this._stream.end();\n  } else {\n    callback();\n  }\n};\n\n/**\n * Creates an intelligent inflate stream, that can handle deflate responses from older servers,\n * which do not send the correct GZip headers in the response. See http://stackoverflow.com/a/37528114\n * for details on why this is needed.\n *\n * @param {Object=} options - Are passed to the underlying `Inflate` or `InflateRaw` constructor.\n *\n * @returns {*}\n */\nmodule.exports.createInflate = function (options) {\n  return new Inflate(options);\n};","map":{"version":3,"names":["zlib","require","stream","inherit","inherits","Buffer","Inflate","options","_stream","Transform","call","prototype","_transform","chunk","encoding","callback","self","from","createInflate","createInflateRaw","on","error","emit","push","once","_ended","write","_flush","end","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-request/lib/inflate.js"],"sourcesContent":["'use strict'\n\nvar zlib = require('zlib')\nvar stream = require('stream')\nvar inherit = require('util').inherits\nvar Buffer = require('safe-buffer').Buffer\nvar Inflate\n\nInflate = function (options) {\n  this.options = options\n  this._stream = null\n  stream.Transform.call(this)\n}\n\ninherit(Inflate, stream.Transform)\n\nInflate.prototype._transform = function (chunk, encoding, callback) {\n  var self = this\n  if (!self._stream) {\n    // If the response stream does not have a valid deflate header, use `InflateRaw`\n    if ((Buffer.from(chunk, encoding)[0] & 0x0F) === 0x08) {\n      self._stream = zlib.createInflate(self.options)\n    } else {\n      self._stream = zlib.createInflateRaw(self.options)\n    }\n\n    self._stream.on('error', function (error) {\n      self.emit('error', error)\n    })\n\n    self._stream.on('data', function (chunk) {\n      self.push(chunk)\n    })\n\n    self._stream.once('end', function () {\n      self._ended = true\n      self.push(null)\n    })\n  }\n\n  self._stream.write(chunk, encoding, callback)\n}\n\nInflate.prototype._flush = function (callback) {\n  if (this._stream && !this._ended) {\n    this._stream.once('end', callback)\n    this._stream.end()\n  } else {\n    callback()\n  }\n}\n\n/**\n * Creates an intelligent inflate stream, that can handle deflate responses from older servers,\n * which do not send the correct GZip headers in the response. See http://stackoverflow.com/a/37528114\n * for details on why this is needed.\n *\n * @param {Object=} options - Are passed to the underlying `Inflate` or `InflateRaw` constructor.\n *\n * @returns {*}\n */\nmodule.exports.createInflate = function (options) {\n  return new Inflate(options)\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIE,OAAO,GAAGF,OAAO,CAAC,MAAM,CAAC,CAACG,QAAQ;AACtC,IAAIC,MAAM,GAAGJ,OAAO,CAAC,aAAa,CAAC,CAACI,MAAM;AAC1C,IAAIC,OAAO;AAEXA,OAAO,GAAG,UAAUC,OAAO,EAAE;EAC3B,IAAI,CAACA,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACC,OAAO,GAAG,IAAI;EACnBN,MAAM,CAACO,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;AAC7B,CAAC;AAEDP,OAAO,CAACG,OAAO,EAAEJ,MAAM,CAACO,SAAS,CAAC;AAElCH,OAAO,CAACK,SAAS,CAACC,UAAU,GAAG,UAAUC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EAClE,IAAIC,IAAI,GAAG,IAAI;EACf,IAAI,CAACA,IAAI,CAACR,OAAO,EAAE;IACjB;IACA,IAAI,CAACH,MAAM,CAACY,IAAI,CAACJ,KAAK,EAAEC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,EAAE;MACrDE,IAAI,CAACR,OAAO,GAAGR,IAAI,CAACkB,aAAa,CAACF,IAAI,CAACT,OAAO,CAAC;IACjD,CAAC,MAAM;MACLS,IAAI,CAACR,OAAO,GAAGR,IAAI,CAACmB,gBAAgB,CAACH,IAAI,CAACT,OAAO,CAAC;IACpD;IAEAS,IAAI,CAACR,OAAO,CAACY,EAAE,CAAC,OAAO,EAAE,UAAUC,KAAK,EAAE;MACxCL,IAAI,CAACM,IAAI,CAAC,OAAO,EAAED,KAAK,CAAC;IAC3B,CAAC,CAAC;IAEFL,IAAI,CAACR,OAAO,CAACY,EAAE,CAAC,MAAM,EAAE,UAAUP,KAAK,EAAE;MACvCG,IAAI,CAACO,IAAI,CAACV,KAAK,CAAC;IAClB,CAAC,CAAC;IAEFG,IAAI,CAACR,OAAO,CAACgB,IAAI,CAAC,KAAK,EAAE,YAAY;MACnCR,IAAI,CAACS,MAAM,GAAG,IAAI;MAClBT,IAAI,CAACO,IAAI,CAAC,IAAI,CAAC;IACjB,CAAC,CAAC;EACJ;EAEAP,IAAI,CAACR,OAAO,CAACkB,KAAK,CAACb,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,CAAC;AAC/C,CAAC;AAEDT,OAAO,CAACK,SAAS,CAACgB,MAAM,GAAG,UAAUZ,QAAQ,EAAE;EAC7C,IAAI,IAAI,CAACP,OAAO,IAAI,CAAC,IAAI,CAACiB,MAAM,EAAE;IAChC,IAAI,CAACjB,OAAO,CAACgB,IAAI,CAAC,KAAK,EAAET,QAAQ,CAAC;IAClC,IAAI,CAACP,OAAO,CAACoB,GAAG,EAAE;EACpB,CAAC,MAAM;IACLb,QAAQ,EAAE;EACZ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAc,MAAM,CAACC,OAAO,CAACZ,aAAa,GAAG,UAAUX,OAAO,EAAE;EAChD,OAAO,IAAID,OAAO,CAACC,OAAO,CAAC;AAC7B,CAAC"},"metadata":{},"sourceType":"script"}