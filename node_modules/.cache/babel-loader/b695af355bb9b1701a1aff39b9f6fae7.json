{"ast":null,"code":"/* istanbul ignore file */\n/*\n * @note options.dispatchTimeout is not implemented in browser sandbox because\n * there is no way to interrupt an infinite loop.\n * Maybe terminate and restart the worker or execute in nested worker.\n */\nconst Flatted = require('flatted'),\n  {\n    randomNumber\n  } = require('./utils'),\n  ERROR = 'error',\n  MESSAGE = 'message',\n  UVM_ID_ = '__id_uvm_',\n  // code for bridge\n  bridgeClientCode = require('./bridge-client'),\n  /**\n   * Returns the firmware code to be executed inside Web Worker.\n   *\n   * @private\n   * @param {String} code -\n   * @param {String} id -\n   * @return {String}\n   */\n  sandboxFirmware = (code, id) => {\n    // @note self.postMessage and self.addEventListener methods are cached\n    // in variable or closure because bootCode might mutate the global scope\n    return `\n            __uvm_emit = function (postMessage, args) {\n                postMessage({__id_uvm: \"${id}\",__emit_uvm: args});\n            }.bind(null, self.postMessage);\n            __uvm_addEventListener = self.addEventListener;\n            try {${code}} catch (e) { setTimeout(function () { throw e; }, 0); }\n            (function (emit, id) {\n                __uvm_addEventListener(\"message\", function (e) {\n                    (e && e.data && (typeof e.data.__emit_uvm === 'string') && (e.data.__id_uvm === id)) &&\n                        emit(e.data.__emit_uvm);\n                });\n            }(__uvm_dispatch, \"${id}\"));\n            __uvm_emit('${Flatted.stringify(['load.' + id])}');\n            __uvm_dispatch = null; __uvm_emit = null; __uvm_addEventListener = null;\n            delete __uvm_dispatch; delete __uvm_emit; delete __uvm_addEventListener;\n        `;\n  };\nmodule.exports = function (bridge, options, callback) {\n  if (!(Blob && Worker && window && window.URL && window.URL.createObjectURL)) {\n    return callback(new Error('uvm: unable to setup communication bridge, missing required APIs'));\n  }\n  let worker, bootTimer, firmwareCode, firmwareObjectURL;\n  const id = UVM_ID_ + randomNumber(),\n    // function to forward messages emitted\n    forwardEmits = e => {\n      if (!(e && e.data && typeof e.data.__emit_uvm === 'string' && e.data.__id_uvm === id)) {\n        return;\n      }\n      let args;\n      try {\n        args = Flatted.parse(e.data.__emit_uvm);\n      } catch (err) {\n        return bridge.emit(ERROR, err);\n      }\n      bridge.emit(...args);\n    },\n    // function to forward errors emitted\n    forwardErrors = e => {\n      bridge.emit(ERROR, e);\n    },\n    // function to terminate worker\n    terminateWorker = function () {\n      if (!worker) {\n        return;\n      }\n\n      // remove event listeners for this sandbox\n      worker.removeEventListener(MESSAGE, forwardEmits);\n      worker.removeEventListener(ERROR, forwardErrors);\n\n      // do not terminate sandbox worker if not spawned for the bridge\n      if (!options._sandbox) {\n        worker.terminate();\n\n        // revoke after termination. otherwise, blob reference is retained until GC\n        // refer: \"chrome://blob-internals\"\n        window.URL.revokeObjectURL(firmwareObjectURL);\n      }\n      worker = null;\n    };\n\n  // on load attach the dispatcher\n  bridge.once('load.' + id, () => {\n    // stop boot timer first\n    clearTimeout(bootTimer);\n    bridge._dispatch = function () {\n      if (!worker) {\n        return bridge.emit(ERROR, new Error('uvm: unable to dispatch \"' + arguments[0] + '\" post disconnection.'));\n      }\n      worker.postMessage({\n        __emit_uvm: Flatted.stringify(Array.prototype.slice.call(arguments)),\n        __id_uvm: id\n      });\n    };\n    callback(null, bridge);\n  });\n\n  // get firmware code string with boot code\n  firmwareCode = sandboxFirmware(bridgeClientCode(options.bootCode), id);\n\n  // start boot timer, stops once we get the load signal, terminate otherwise\n  bootTimer = setTimeout(() => {\n    terminateWorker();\n    callback(new Error(`uvm: boot timed out after ${options.bootTimeout}ms.`));\n  }, options.bootTimeout);\n\n  // if sandbox worker is provided, we simply need to init with firmware code\n  // @todo validate sandbox type or APIs\n  if (options._sandbox) {\n    worker = options._sandbox;\n    worker.postMessage({\n      __init_uvm: firmwareCode\n    });\n  }\n  // else, spawn a new worker\n  else {\n    // convert the firmware code into a blob URL\n    firmwareObjectURL = window.URL.createObjectURL(new Blob([firmwareCode], {\n      type: 'text/javascript'\n    }));\n\n    // catch CSP:worker-src violations\n    try {\n      worker = new Worker(firmwareObjectURL);\n    } catch (error) {\n      // clear blob reference\n      window.URL.revokeObjectURL(firmwareObjectURL);\n      return callback(new Error(`uvm: unable to spawn worker.\\n${error.message || error}`));\n    }\n  }\n\n  // add event listener for receiving events from worker (is removed on disconnect)\n  // don't set `onmessage` and `onerror` as it might override external sandbox\n  worker.addEventListener(MESSAGE, forwardEmits);\n  worker.addEventListener(ERROR, forwardErrors);\n\n  // equip bridge to disconnect (i.e. terminate the worker)\n  bridge._disconnect = terminateWorker;\n\n  // help GC collect large variables\n  firmwareCode = null;\n};","map":{"version":3,"names":["Flatted","require","randomNumber","ERROR","MESSAGE","UVM_ID_","bridgeClientCode","sandboxFirmware","code","id","stringify","module","exports","bridge","options","callback","Blob","Worker","window","URL","createObjectURL","Error","worker","bootTimer","firmwareCode","firmwareObjectURL","forwardEmits","e","data","__emit_uvm","__id_uvm","args","parse","err","emit","forwardErrors","terminateWorker","removeEventListener","_sandbox","terminate","revokeObjectURL","once","clearTimeout","_dispatch","arguments","postMessage","Array","prototype","slice","call","bootCode","setTimeout","bootTimeout","__init_uvm","type","error","message","addEventListener","_disconnect"],"sources":["/Users/Qusai.Qishta/node_modules/uvm/lib/bridge.browser.js"],"sourcesContent":["/* istanbul ignore file */\n/*\n * @note options.dispatchTimeout is not implemented in browser sandbox because\n * there is no way to interrupt an infinite loop.\n * Maybe terminate and restart the worker or execute in nested worker.\n */\nconst Flatted = require('flatted'),\n    { randomNumber } = require('./utils'),\n\n    ERROR = 'error',\n    MESSAGE = 'message',\n    UVM_ID_ = '__id_uvm_',\n\n    // code for bridge\n    bridgeClientCode = require('./bridge-client'),\n\n    /**\n     * Returns the firmware code to be executed inside Web Worker.\n     *\n     * @private\n     * @param {String} code -\n     * @param {String} id -\n     * @return {String}\n     */\n    sandboxFirmware = (code, id) => {\n        // @note self.postMessage and self.addEventListener methods are cached\n        // in variable or closure because bootCode might mutate the global scope\n        return `\n            __uvm_emit = function (postMessage, args) {\n                postMessage({__id_uvm: \"${id}\",__emit_uvm: args});\n            }.bind(null, self.postMessage);\n            __uvm_addEventListener = self.addEventListener;\n            try {${code}} catch (e) { setTimeout(function () { throw e; }, 0); }\n            (function (emit, id) {\n                __uvm_addEventListener(\"message\", function (e) {\n                    (e && e.data && (typeof e.data.__emit_uvm === 'string') && (e.data.__id_uvm === id)) &&\n                        emit(e.data.__emit_uvm);\n                });\n            }(__uvm_dispatch, \"${id}\"));\n            __uvm_emit('${Flatted.stringify(['load.' + id])}');\n            __uvm_dispatch = null; __uvm_emit = null; __uvm_addEventListener = null;\n            delete __uvm_dispatch; delete __uvm_emit; delete __uvm_addEventListener;\n        `;\n    };\n\nmodule.exports = function (bridge, options, callback) {\n    if (!(Blob && Worker && window && window.URL && window.URL.createObjectURL)) {\n        return callback(new Error('uvm: unable to setup communication bridge, missing required APIs'));\n    }\n\n    let worker,\n        bootTimer,\n        firmwareCode,\n        firmwareObjectURL;\n\n    const id = UVM_ID_ + randomNumber(),\n\n        // function to forward messages emitted\n        forwardEmits = (e) => {\n            if (!(e && e.data && (typeof e.data.__emit_uvm === 'string') && (e.data.__id_uvm === id))) { return; }\n\n            let args;\n\n            try { args = Flatted.parse(e.data.__emit_uvm); }\n            catch (err) { return bridge.emit(ERROR, err); }\n            bridge.emit(...args);\n        },\n\n        // function to forward errors emitted\n        forwardErrors = (e) => {\n            bridge.emit(ERROR, e);\n        },\n\n        // function to terminate worker\n        terminateWorker = function () {\n            if (!worker) { return; }\n\n            // remove event listeners for this sandbox\n            worker.removeEventListener(MESSAGE, forwardEmits);\n            worker.removeEventListener(ERROR, forwardErrors);\n\n            // do not terminate sandbox worker if not spawned for the bridge\n            if (!options._sandbox) {\n                worker.terminate();\n\n                // revoke after termination. otherwise, blob reference is retained until GC\n                // refer: \"chrome://blob-internals\"\n                window.URL.revokeObjectURL(firmwareObjectURL);\n            }\n\n            worker = null;\n        };\n\n    // on load attach the dispatcher\n    bridge.once('load.' + id, () => {\n        // stop boot timer first\n        clearTimeout(bootTimer);\n\n        bridge._dispatch = function () {\n            if (!worker) {\n                return bridge.emit(ERROR,\n                    new Error('uvm: unable to dispatch \"' + arguments[0] + '\" post disconnection.'));\n            }\n\n            worker.postMessage({\n                __emit_uvm: Flatted.stringify(Array.prototype.slice.call(arguments)),\n                __id_uvm: id\n            });\n        };\n\n        callback(null, bridge);\n    });\n\n    // get firmware code string with boot code\n    firmwareCode = sandboxFirmware(bridgeClientCode(options.bootCode), id);\n\n    // start boot timer, stops once we get the load signal, terminate otherwise\n    bootTimer = setTimeout(() => {\n        terminateWorker();\n        callback(new Error(`uvm: boot timed out after ${options.bootTimeout}ms.`));\n    }, options.bootTimeout);\n\n    // if sandbox worker is provided, we simply need to init with firmware code\n    // @todo validate sandbox type or APIs\n    if (options._sandbox) {\n        worker = options._sandbox;\n        worker.postMessage({ __init_uvm: firmwareCode });\n    }\n    // else, spawn a new worker\n    else {\n        // convert the firmware code into a blob URL\n        firmwareObjectURL = window.URL.createObjectURL(new Blob([firmwareCode], { type: 'text/javascript' }));\n\n        // catch CSP:worker-src violations\n        try { worker = new Worker(firmwareObjectURL); }\n        catch (error) {\n            // clear blob reference\n            window.URL.revokeObjectURL(firmwareObjectURL);\n\n            return callback(new Error(`uvm: unable to spawn worker.\\n${error.message || error}`));\n        }\n    }\n\n    // add event listener for receiving events from worker (is removed on disconnect)\n    // don't set `onmessage` and `onerror` as it might override external sandbox\n    worker.addEventListener(MESSAGE, forwardEmits);\n    worker.addEventListener(ERROR, forwardErrors);\n\n    // equip bridge to disconnect (i.e. terminate the worker)\n    bridge._disconnect = terminateWorker;\n\n    // help GC collect large variables\n    firmwareCode = null;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}