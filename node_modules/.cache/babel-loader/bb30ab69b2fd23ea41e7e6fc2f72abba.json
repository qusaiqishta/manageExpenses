{"ast":null,"code":"var semver = require('semver'),\n  FN = 'function',\n  generateConverter; // constructor\n\n/**\n * Prototype interface definition of a converter\n *\n * @param {Object} model - A manifest that defines the conversion process.\n * @param {String} model.input - The input version to convert from.\n * @param {String} model.output - The output version to convert to.\n * @param {Function} model.convert - A function to convert entire collections.\n * @param {Function} model.create - A function to perform creation operations.\n * @param {Function} [model.init] - An initializer function to bootstrap the generated converter.\n *\n * @throws {Error} If model definition does not meet requirements\n */\ngenerateConverter = function (model) {\n  var error;\n\n  // validate the model\n  if (!model) {\n    error = 'invalid definition of converter';\n  }\n  // ensure that the input version support is a valid semver\n  else if (!semver.valid(model.input)) {\n    error = 'input version support for converter is invalid';\n  }\n  // ensure that the output version support is a valid semver\n  else if (!semver.valid(model.output)) {\n    error = 'output version support for converter is invalid';\n  } else if (typeof model.convert !== FN) {\n    error = 'convert function is not defined';\n  } else if (typeof model.convertSingle !== FN) {\n    error = 'convertSingle function is not defined';\n  }\n  if (semver.satisfies(model.input, model.output)) {\n    error = 'input version ' + model.input + ' matches output version ' + model.output + ' for converter';\n  }\n\n  // If we had encountered any error during validation, we simply exit by executing the callback and forwarding the\n  // error.\n  if (error) {\n    throw new Error(error);\n  }\n  return model;\n};\nmodule.exports = {\n  /**\n   * All converters\n   *\n   * @type {object<Converter>}\n   *\n   * @note this form of loading is most likely not browser friendly, find browser alternative\n   */\n  converters: {\n    'converter-v1-to-v2': require('./v1.0.0/converter-v1-to-v2'),\n    'converter-v1-to-v21': require('./v1.0.0/converter-v1-to-v21'),\n    'converter-v2-to-v1': require('./v2.0.0/converter-v2-to-v1'),\n    'converter-v21-to-v1': require('./v2.1.0/converter-v21-to-v1')\n  },\n  /**\n   * Fetches a converter for the given input and output versions\n   *\n   * @param {String} inputVersion - The version to convert from.\n   * @param {String} outputVersion - The version to convert to.\n   * @returns {Converter} - A converter for the given set of options.\n   */\n  getConverter: function (inputVersion, outputVersion) {\n    var converter;\n    inputVersion = semver.clean(inputVersion);\n    outputVersion = semver.clean(outputVersion);\n    for (converter in this.converters) {\n      // eslint-disable-next-line no-prototype-builtins\n      converter = this.converters.hasOwnProperty(converter) && this.converters[converter];\n      if (converter && semver.eq(converter.input, inputVersion) && semver.eq(converter.output, outputVersion)) {\n        return generateConverter(converter);\n      }\n    }\n  },\n  /**\n   * Picks the appropriate converter and converts the given collection.\n   *\n   * @param {Object} collection - The collection to be converted.\n   * @param {Object} options - The set of options for request conversion.\n   * @param {Function} callback - The function to be invoked after the completion of conversion process.\n   */\n  convert: function (collection, options, callback) {\n    var chosenConverter = this.getConverter(options.inputVersion, options.outputVersion);\n    if (!chosenConverter) {\n      return callback(new Error('no conversion path found'));\n    }\n    return chosenConverter.convert(collection, options, callback);\n  },\n  /**\n   * Picks the appropriate converter and converts the given object.\n   *\n   * @param {Object} object - A single V1 request or a V2 Item.\n   * @param {Object} options - The set of options for request conversion.\n   * @param {Function} callback - The function to be invoked after the completion of conversion process.\n   */\n  convertSingle: function (object, options, callback) {\n    var chosenConverter = this.getConverter(options.inputVersion, options.outputVersion);\n    if (!chosenConverter) {\n      return callback(new Error('no conversion path found'));\n    }\n    return chosenConverter.convertSingle(object, options, callback);\n  },\n  /**\n   * Picks the appropriate converter and converts the given object.\n   *\n   * @param {Object} object - A single V1 Response or a V2 Response.\n   * @param {Object} options - The set of options for response conversion.\n   * @param {Function} callback - The function invoked to mark the completion of the conversion process.\n   * @returns {*}\n   */\n  convertResponse: function (object, options, callback) {\n    var chosenConverter = this.getConverter(options.inputVersion, options.outputVersion);\n    if (!chosenConverter) {\n      return callback(new Error('no conversion path found'));\n    }\n    return chosenConverter.convertResponse(object, options, callback);\n  },\n  /**\n   * Returns a builder, which can be used to convert individual requests, etc.\n   *\n   * @param {Object} options - The set of options for builder creation.\n   * @returns {Function} - The builder for the given set of options.\n   */\n  builder: function (options) {\n    var chosenConverter = this.getConverter(options.inputVersion, options.outputVersion);\n    return chosenConverter.create(options);\n  }\n};","map":{"version":3,"names":["semver","require","FN","generateConverter","model","error","valid","input","output","convert","convertSingle","satisfies","Error","module","exports","converters","getConverter","inputVersion","outputVersion","converter","clean","hasOwnProperty","eq","collection","options","callback","chosenConverter","object","convertResponse","builder","create"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection-transformer/lib/converters/index.js"],"sourcesContent":["var semver = require('semver'),\n    FN = 'function',\n    generateConverter; // constructor\n\n/**\n * Prototype interface definition of a converter\n *\n * @param {Object} model - A manifest that defines the conversion process.\n * @param {String} model.input - The input version to convert from.\n * @param {String} model.output - The output version to convert to.\n * @param {Function} model.convert - A function to convert entire collections.\n * @param {Function} model.create - A function to perform creation operations.\n * @param {Function} [model.init] - An initializer function to bootstrap the generated converter.\n *\n * @throws {Error} If model definition does not meet requirements\n */\ngenerateConverter = function (model) {\n    var error;\n\n    // validate the model\n    if (!model) {\n        error = 'invalid definition of converter';\n    }\n    // ensure that the input version support is a valid semver\n    else if (!semver.valid(model.input)) {\n        error = 'input version support for converter is invalid';\n    }\n    // ensure that the output version support is a valid semver\n    else if (!semver.valid(model.output)) {\n        error = 'output version support for converter is invalid';\n    }\n    else if (typeof model.convert !== FN) {\n        error = 'convert function is not defined';\n    }\n    else if (typeof model.convertSingle !== FN) {\n        error = 'convertSingle function is not defined';\n    }\n\n    if (semver.satisfies(model.input, model.output)) {\n        error = 'input version ' + model.input + ' matches output version ' + model.output + ' for converter';\n    }\n\n    // If we had encountered any error during validation, we simply exit by executing the callback and forwarding the\n    // error.\n    if (error) {\n        throw new Error(error);\n    }\n\n    return model;\n};\n\nmodule.exports = {\n    /**\n     * All converters\n     *\n     * @type {object<Converter>}\n     *\n     * @note this form of loading is most likely not browser friendly, find browser alternative\n     */\n    converters: {\n        'converter-v1-to-v2': require('./v1.0.0/converter-v1-to-v2'),\n        'converter-v1-to-v21': require('./v1.0.0/converter-v1-to-v21'),\n        'converter-v2-to-v1': require('./v2.0.0/converter-v2-to-v1'),\n        'converter-v21-to-v1': require('./v2.1.0/converter-v21-to-v1')\n    },\n\n    /**\n     * Fetches a converter for the given input and output versions\n     *\n     * @param {String} inputVersion - The version to convert from.\n     * @param {String} outputVersion - The version to convert to.\n     * @returns {Converter} - A converter for the given set of options.\n     */\n    getConverter: function (inputVersion, outputVersion) {\n        var converter;\n\n        inputVersion = semver.clean(inputVersion);\n        outputVersion = semver.clean(outputVersion);\n\n        for (converter in this.converters) {\n            // eslint-disable-next-line no-prototype-builtins\n            converter = this.converters.hasOwnProperty(converter) && this.converters[converter];\n            if (converter && semver.eq(converter.input, inputVersion) && semver.eq(converter.output, outputVersion)) {\n                return generateConverter(converter);\n            }\n        }\n    },\n\n    /**\n     * Picks the appropriate converter and converts the given collection.\n     *\n     * @param {Object} collection - The collection to be converted.\n     * @param {Object} options - The set of options for request conversion.\n     * @param {Function} callback - The function to be invoked after the completion of conversion process.\n     */\n    convert: function (collection, options, callback) {\n        var chosenConverter = this.getConverter(options.inputVersion, options.outputVersion);\n\n        if (!chosenConverter) {\n            return callback(new Error('no conversion path found'));\n        }\n\n        return chosenConverter.convert(collection, options, callback);\n    },\n\n    /**\n     * Picks the appropriate converter and converts the given object.\n     *\n     * @param {Object} object - A single V1 request or a V2 Item.\n     * @param {Object} options - The set of options for request conversion.\n     * @param {Function} callback - The function to be invoked after the completion of conversion process.\n     */\n    convertSingle: function (object, options, callback) {\n        var chosenConverter = this.getConverter(options.inputVersion, options.outputVersion);\n\n        if (!chosenConverter) {\n            return callback(new Error('no conversion path found'));\n        }\n\n        return chosenConverter.convertSingle(object, options, callback);\n    },\n\n    /**\n     * Picks the appropriate converter and converts the given object.\n     *\n     * @param {Object} object - A single V1 Response or a V2 Response.\n     * @param {Object} options - The set of options for response conversion.\n     * @param {Function} callback - The function invoked to mark the completion of the conversion process.\n     * @returns {*}\n     */\n    convertResponse: function (object, options, callback) {\n        var chosenConverter = this.getConverter(options.inputVersion, options.outputVersion);\n\n        if (!chosenConverter) {\n            return callback(new Error('no conversion path found'));\n        }\n\n        return chosenConverter.convertResponse(object, options, callback);\n    },\n\n    /**\n     * Returns a builder, which can be used to convert individual requests, etc.\n     *\n     * @param {Object} options - The set of options for builder creation.\n     * @returns {Function} - The builder for the given set of options.\n     */\n    builder: function (options) {\n        var chosenConverter = this.getConverter(options.inputVersion, options.outputVersion);\n\n        return chosenConverter.create(options);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}