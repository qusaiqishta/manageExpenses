{"ast":null,"code":"// default time format\n\n// format a number of seconds into hours and minutes as appropriate\nmodule.exports = function formatTime(t, options, roundToMultipleOf) {\n  function round(input) {\n    if (roundToMultipleOf) {\n      return roundToMultipleOf * Math.round(input / roundToMultipleOf);\n    } else {\n      return input;\n    }\n  }\n\n  // leading zero padding\n  function autopadding(v) {\n    return (options.autopaddingChar + v).slice(-2);\n  }\n\n  // > 1h ?\n  if (t > 3600) {\n    return autopadding(Math.floor(t / 3600)) + 'h' + autopadding(round(t % 3600 / 60)) + 'm';\n\n    // > 60s ?\n  } else if (t > 60) {\n    return autopadding(Math.floor(t / 60)) + 'm' + autopadding(round(t % 60)) + 's';\n\n    // > 10s ?\n  } else if (t > 10) {\n    return autopadding(round(t)) + 's';\n\n    // default: don't apply round to multiple\n  } else {\n    return autopadding(t) + 's';\n  }\n};","map":{"version":3,"names":["module","exports","formatTime","t","options","roundToMultipleOf","round","input","Math","autopadding","v","autopaddingChar","slice","floor"],"sources":["/Users/Qusai.Qishta/node_modules/cli-progress/lib/format-time.js"],"sourcesContent":["// default time format\n\n// format a number of seconds into hours and minutes as appropriate\nmodule.exports = function formatTime(t, options, roundToMultipleOf){\n    function round(input) {\n        if (roundToMultipleOf) {\n            return roundToMultipleOf * Math.round(input / roundToMultipleOf);\n        } else {\n            return input\n        }\n    }\n\n    // leading zero padding\n    function autopadding(v){\n        return (options.autopaddingChar + v).slice(-2);\n    }\n\n    // > 1h ?\n    if (t > 3600) {\n        return autopadding(Math.floor(t / 3600)) + 'h' + autopadding(round((t % 3600) / 60)) + 'm';\n\n    // > 60s ?\n    } else if (t > 60) {\n        return autopadding(Math.floor(t / 60)) + 'm' + autopadding(round((t % 60))) + 's';\n\n    // > 10s ?\n    } else if (t > 10) {\n        return autopadding(round(t)) + 's';\n\n    // default: don't apply round to multiple\n    }else{\n        return autopadding(t) + 's';\n    }\n}"],"mappings":"AAAA;;AAEA;AACAA,MAAM,CAACC,OAAO,GAAG,SAASC,UAAU,CAACC,CAAC,EAAEC,OAAO,EAAEC,iBAAiB,EAAC;EAC/D,SAASC,KAAK,CAACC,KAAK,EAAE;IAClB,IAAIF,iBAAiB,EAAE;MACnB,OAAOA,iBAAiB,GAAGG,IAAI,CAACF,KAAK,CAACC,KAAK,GAAGF,iBAAiB,CAAC;IACpE,CAAC,MAAM;MACH,OAAOE,KAAK;IAChB;EACJ;;EAEA;EACA,SAASE,WAAW,CAACC,CAAC,EAAC;IACnB,OAAO,CAACN,OAAO,CAACO,eAAe,GAAGD,CAAC,EAAEE,KAAK,CAAC,CAAC,CAAC,CAAC;EAClD;;EAEA;EACA,IAAIT,CAAC,GAAG,IAAI,EAAE;IACV,OAAOM,WAAW,CAACD,IAAI,CAACK,KAAK,CAACV,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,GAAG,GAAGM,WAAW,CAACH,KAAK,CAAEH,CAAC,GAAG,IAAI,GAAI,EAAE,CAAC,CAAC,GAAG,GAAG;;IAE9F;EACA,CAAC,MAAM,IAAIA,CAAC,GAAG,EAAE,EAAE;IACf,OAAOM,WAAW,CAACD,IAAI,CAACK,KAAK,CAACV,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAGM,WAAW,CAACH,KAAK,CAAEH,CAAC,GAAG,EAAE,CAAE,CAAC,GAAG,GAAG;;IAErF;EACA,CAAC,MAAM,IAAIA,CAAC,GAAG,EAAE,EAAE;IACf,OAAOM,WAAW,CAACH,KAAK,CAACH,CAAC,CAAC,CAAC,GAAG,GAAG;;IAEtC;EACA,CAAC,MAAI;IACD,OAAOM,WAAW,CAACN,CAAC,CAAC,GAAG,GAAG;EAC/B;AACJ,CAAC"},"metadata":{},"sourceType":"script"}