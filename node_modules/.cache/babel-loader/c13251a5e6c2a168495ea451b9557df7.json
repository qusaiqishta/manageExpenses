{"ast":null,"code":"var _ = require('../util').lodash,\n  Property = require('./property').Property,\n  PropertyList = require('./property-list').PropertyList,\n  EventList = require('./event-list').EventList,\n  Item = require('./item').Item,\n  Request = require('./request').Request,\n  RequestAuth = require('./request-auth').RequestAuth,\n  ItemGroup,\n  /**\n   * @private\n   * @type {String}\n   */\n  OBJECT = 'object';\n\n/**\n * The following defines the object (or JSON) structure that one can pass to the ItemGroup while creating a new\n * ItemGroup instance. This is also the object structure returned when `.toJSON()` is called on an ItemGroup instance.\n *\n * @typedef ItemGroup.definition\n * @property {Array<ItemGroup.definition|Item.definition>=} [item]\n * @property {RequestAuth.definition=} [auth]\n * @property {Array<Event.definition>=} [event]\n *\n * @example\n * {\n *     \"name\": \"Echo Get Requests\",\n *     \"id\": \"echo-get-requests\",\n *     \"item\": [{\n *         \"request\": \"https://postman-echo.com/get\"\n *     }, {\n *         \"request\": \"https://postman-echo.com/headers\"\n *     }],\n *     \"auth\": {\n *         \"type\": \"basic\",\n *         \"basic\": {\n *             \"username\": \"jean\",\n *             \"password\": \"{{somethingsecret}}\"\n *         }\n *     },\n *     \"event\": [{\n *         \"listen\": \"prerequest\",\n *         \"script\": {\n *             \"type\": \"text/javascript\",\n *             \"exec\": \"console.log(new Date())\"\n *         }\n *     }]\n * }\n */\n_.inherit(\n/**\n * An ItemGroup represents a composite list of {@link Item} or ItemGroup. In terms of Postman App, ItemGroup\n * represents a \"Folder\". This allows one to group Items into subsets that can have their own meaning. An\n * ItemGroup also allows one to define a subset of common properties to be applied to each Item within it. For\n * example, a `test` event defined on an ItemGroup is executed while testing any Item that belongs to that group.\n * Similarly, ItemGroups can have a common {@RequestAuth} defined so that every {@link Request}, when processed,\n * requires to be authenticated using the `auth` defined in the group.\n *\n * Essentially, {@link Collection} too is a special type of ItemGroup ;-).\n *\n * @constructor\n * @extends {Property}\n *\n * @param {ItemGroup.definition=} [definition] While creating a new instance of ItemGroup, one can provide the\n * initial configuration of the item group with the requests it contains, the authentication applied to all\n * requests, events that the requests responds to, etc.\n *\n * @example <caption>Add a new ItemGroup to a collection instance</caption>\n * var Collection = require('postman-collection').Collection,\n *     ItemGroup = require('postman-collection').ItemGroup,\n *     myCollection;\n *\n * myCollection = new Collection(); // create an empty collection\n * myCollection.items.add(new ItemGroup({ // add a folder called \"blank folder\"\n *     \"name\": \"This is a blank folder\"\n * }));\n */\nItemGroup = function PostmanItemGroup(definition) {\n  // this constructor is intended to inherit and as such the super constructor is required to be executed\n  ItemGroup.super_.apply(this, arguments);\n  _.mergeDefined(this, /** @lends ItemGroup.prototype */{\n    /**\n     * This is a {@link PropertyList} that holds the list of {@link Item}s or {@link ItemGroup}s belonging to a\n     * {@link Collection} or to an {@link ItemGroup}. Operation on an individual item in this list can be\n     * performed using various functions available to a {@link PropertyList}.\n     *\n     * @type {PropertyList<(Item|ItemGroup)>}\n     *\n     * @example <caption>Fetch empty ItemGroups in a list loaded from a file</caption>\n     * var fs = require('fs'), // needed to read JSON file from disk\n     *     Collection = require('postman-collection').Collection,\n     *     myCollection,\n     *     emptyGroups;\n      * // Load a collection to memory from a JSON file on disk (say, sample-collection.json)\n     * myCollection = new Collection(JSON.stringify(fs.readFileSync('sample-collection.json').toString()));\n     *\n     * // Filter items in Collection root that is an empty ItemGroup\n     * emptyGroups = myCollection.items.filter(function (item) {\n     *     return item && item.items && (item.items.count() === 0);\n     * });\n     *\n     * // Log the emptyGroups array to check it's contents\n     * console.log(emptyGroups);\n     */\n    items: new PropertyList(ItemGroup._createNewGroupOrItem, this, definition && definition.item),\n    /**\n     * One can define the default authentication method required for every item that belongs to this list.\n     * Individual {@link Request}s can override this in their own definitions. More on how to define an\n     * authentication method is outlined in the {@link RequestAuth} property.\n     *\n     * @type {RequestAuth}\n     *\n     * @example <caption>Define an entire ItemGroup (folder) or Collection to follow Basic Auth</caption>\n     * var fs = require('fs'),\n     *     Collection = require('postman-collection').Collection,\n     *     RequestAuth = require('postman-collection').RequestAuth,\n     *     mycollection;\n     *\n     * // Create a collection having two requests\n     * myCollection = new Collection();\n     * myCollection.items.add([\n     *     { name: 'GET Request', request: 'https://postman-echo.com/get?auth=basic' },\n     *     { name: 'PUT Request', request: 'https://postman-echo.com/put?auth=basic' }\n     * ]);\n     *\n     * // Add basic auth to the Collection, to be applied on all requests.\n     * myCollection.auth = new RequestAuth({\n     *     type: 'basic',\n     *     username: 'postman',\n     *     password: 'password'\n     * });\n     */\n    // auth is a special case, empty RequestAuth should not be created for falsy values\n    // to allow inheritance from parent\n    auth: definition && definition.auth ? new RequestAuth(definition.auth) : undefined,\n    /**\n     * In this list, one can define the {@link Script}s to be executed when an event is triggered. Events are\n     * triggered before certain actions are taken on a Collection, Request, etc. For example, executing a\n     * request causes the `prerequest` and the `test` events to be triggered.\n     *\n     * @type {EventList}\n     * @memberOf Collection.prototype\n     *\n     * @example <caption>Executing a common test script for all requests in a collection</caption>\n     * var fs = require('fs'), // needed to read JSON file from disk\n     *     Collection = require('postman-collection').Collection,\n     *     myCollection;\n     *\n     * // Load a collection to memory from a JSON file on disk (say, sample-collection.json)\n     * myCollection = new Collection(JSON.stringify(fs.readFileSync('sample-collection.json').toString()));\n     *\n     * // Add an event listener to the collection that listens to the `test` event.\n     * myCollection.events.add({\n     *     listen: 'test',\n     *     script: {\n     *         exec: 'tests[\"Status code is 200\"] = (responseCode.code === 200)'\n     *     }\n     * });\n     */\n    events: new EventList(this, definition && definition.event),\n    /**\n     * Set of configurations used to alter the usual behavior of sending the request.\n     *\n     * @type {Object}\n     * @property {Boolean} disableBodyPruning Disable body pruning for request methods like GET, HEAD etc.\n     */\n    protocolProfileBehavior: definition && typeof definition.protocolProfileBehavior === OBJECT ? definition.protocolProfileBehavior : undefined\n  });\n}, Property);\n_.assign(ItemGroup.prototype, /** @lends ItemGroup.prototype */{\n  /**\n   * Defines that this property requires an ID field\n   *\n   * @private\n   * @readonly\n   */\n  _postman_propertyRequiresId: true,\n  /**\n   * Calls the callback for each item belonging to itself. If any ItemGroups are encountered,\n   * they will call the callback on their own Items.\n   *\n   * @private\n   * @param {Function} callback -\n   */\n  forEachItem: function forEachItem(callback) {\n    this.items.each(function (item) {\n      return ItemGroup.isItemGroup(item) ? item.forEachItem(callback) : callback(item, this);\n    }, this);\n  },\n  /**\n   * Calls the callback for each itemgroup belonging to itself. All ItemGroups encountered will also,\n   * call the callback on their own ItemGroups\n   *\n   * @private\n   * @param {Function} callback -\n   */\n  forEachItemGroup: function forEachItemGroup(callback) {\n    this.items.each(function (item) {\n      if (ItemGroup.isItemGroup(item)) {\n        item.forEachItemGroup(callback);\n        callback(item, this); // eslint-disable-line callback-return\n      }\n    }, this);\n  },\n  /**\n   * Finds the first item with the given name or id in the current ItemGroup.\n   *\n   * @param {String} idOrName -\n   */\n  oneDeep: function (idOrName) {\n    if (!_.isString(idOrName)) {\n      return;\n    }\n    var item;\n    this.items.each(function (eachItem) {\n      if (eachItem.id === idOrName || eachItem.name === idOrName) {\n        item = eachItem;\n        return false; // we found something, so bail out of the for loop.\n      }\n\n      if (ItemGroup.isItemGroup(eachItem)) {\n        item = eachItem.oneDeep(idOrName);\n        return !item; // bail out of the for loop if we found anything\n      }\n    });\n\n    return item;\n  },\n  /**\n   * Fetches protocol profile behavior for the current ItemGroup\n   *\n   * @private\n   * @returns {Object}\n   *\n   * @note This will not inherit protocol profile behaviors from parent,\n   * use `getProtocolProfileBehaviorResolved` to achieve that behavior.\n   */\n  getProtocolProfileBehavior: Item.prototype.getProtocolProfileBehavior,\n  /**\n   * Fetches protocol profile behavior applicable for the current ItemGroup,\n   * inherited from parent ItemGroups(s).\n   *\n   * @private\n   * @returns {Object}\n   */\n  getProtocolProfileBehaviorResolved: Item.prototype.getProtocolProfileBehaviorResolved,\n  /**\n   * Set or update protocol profile behavior for the current ItemGroup.\n   *\n   * @example <caption> Set or update protocol profile behavior </caption>\n   * itemGroup.setProtocolProfileBehavior('strictSSL', false);\n   *\n   * @private\n   * @param {String} key - protocol profile behavior name\n   * @param {*} value - protocol profile behavior value\n   * @returns {ItemGroup}\n   */\n  setProtocolProfileBehavior: Item.prototype.setProtocolProfileBehavior,\n  /**\n   * Unset or delete protocol profile behavior for the current ItemGroup.\n   *\n   * @example <caption> Unset protocol profile behavior </caption>\n   * itemGroup.unsetProtocolProfileBehavior('strictSSL');\n   *\n   * @private\n   * @param {String} key - protocol profile behavior name to unset\n   * @returns {ItemGroup}\n   */\n  unsetProtocolProfileBehavior: Item.prototype.unsetProtocolProfileBehavior,\n  /**\n   * Sets authentication method for all the items within this group\n   *\n   * @param {?String|RequestAuth.definition} type\n   * @param {VariableList=} [options]\n   *\n   * @note This function was previously (in v2 of SDK) used to clone request and populate headers. Now it is used to\n   * only set auth information to request\n   */\n  authorizeRequestsUsing: Request.prototype.authorizeUsing\n});\n_.assign(ItemGroup, /** @lends ItemGroup */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'ItemGroup',\n  /**\n   * Iterator function to update an itemgroup's item array with appropriate objects from definition.\n   *\n   * @private\n   * @this {ItemGroup}\n   * @param {Object} item - the definition of an item or group\n   * @returns {ItemGroup|Item}\n   * @note\n   * This function is intended to be used in scope of an instance of a {@link ItemGroup).\n   */\n  _createNewGroupOrItem: function (item) {\n    if (Item.isItem(item) || ItemGroup.isItemGroup(item)) {\n      return item;\n    }\n    return item && item.item ? new ItemGroup(item) : new Item(item);\n  },\n  /**\n   * Check whether an object is an instance of {@link ItemGroup}.\n   *\n   * @param {*} obj -\n   * @returns {Boolean}\n   */\n  isItemGroup: function (obj) {\n    return Boolean(obj) && (obj instanceof ItemGroup || _.inSuperChain(obj.constructor, '_postman_propertyName', ItemGroup._postman_propertyName));\n  }\n});\nmodule.exports = {\n  ItemGroup\n};","map":{"version":3,"names":["_","require","lodash","Property","PropertyList","EventList","Item","Request","RequestAuth","ItemGroup","OBJECT","inherit","PostmanItemGroup","definition","super_","apply","arguments","mergeDefined","items","_createNewGroupOrItem","item","auth","undefined","events","event","protocolProfileBehavior","assign","prototype","_postman_propertyRequiresId","forEachItem","callback","each","isItemGroup","forEachItemGroup","oneDeep","idOrName","isString","eachItem","id","name","getProtocolProfileBehavior","getProtocolProfileBehaviorResolved","setProtocolProfileBehavior","unsetProtocolProfileBehavior","authorizeRequestsUsing","authorizeUsing","_postman_propertyName","isItem","obj","Boolean","inSuperChain","constructor","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/item-group.js"],"sourcesContent":["var _ = require('../util').lodash,\n    Property = require('./property').Property,\n    PropertyList = require('./property-list').PropertyList,\n    EventList = require('./event-list').EventList,\n    Item = require('./item').Item,\n    Request = require('./request').Request,\n    RequestAuth = require('./request-auth').RequestAuth,\n\n    ItemGroup,\n\n    /**\n     * @private\n     * @type {String}\n     */\n    OBJECT = 'object';\n\n/**\n * The following defines the object (or JSON) structure that one can pass to the ItemGroup while creating a new\n * ItemGroup instance. This is also the object structure returned when `.toJSON()` is called on an ItemGroup instance.\n *\n * @typedef ItemGroup.definition\n * @property {Array<ItemGroup.definition|Item.definition>=} [item]\n * @property {RequestAuth.definition=} [auth]\n * @property {Array<Event.definition>=} [event]\n *\n * @example\n * {\n *     \"name\": \"Echo Get Requests\",\n *     \"id\": \"echo-get-requests\",\n *     \"item\": [{\n *         \"request\": \"https://postman-echo.com/get\"\n *     }, {\n *         \"request\": \"https://postman-echo.com/headers\"\n *     }],\n *     \"auth\": {\n *         \"type\": \"basic\",\n *         \"basic\": {\n *             \"username\": \"jean\",\n *             \"password\": \"{{somethingsecret}}\"\n *         }\n *     },\n *     \"event\": [{\n *         \"listen\": \"prerequest\",\n *         \"script\": {\n *             \"type\": \"text/javascript\",\n *             \"exec\": \"console.log(new Date())\"\n *         }\n *     }]\n * }\n */\n_.inherit((\n\n    /**\n     * An ItemGroup represents a composite list of {@link Item} or ItemGroup. In terms of Postman App, ItemGroup\n     * represents a \"Folder\". This allows one to group Items into subsets that can have their own meaning. An\n     * ItemGroup also allows one to define a subset of common properties to be applied to each Item within it. For\n     * example, a `test` event defined on an ItemGroup is executed while testing any Item that belongs to that group.\n     * Similarly, ItemGroups can have a common {@RequestAuth} defined so that every {@link Request}, when processed,\n     * requires to be authenticated using the `auth` defined in the group.\n     *\n     * Essentially, {@link Collection} too is a special type of ItemGroup ;-).\n     *\n     * @constructor\n     * @extends {Property}\n     *\n     * @param {ItemGroup.definition=} [definition] While creating a new instance of ItemGroup, one can provide the\n     * initial configuration of the item group with the requests it contains, the authentication applied to all\n     * requests, events that the requests responds to, etc.\n     *\n     * @example <caption>Add a new ItemGroup to a collection instance</caption>\n     * var Collection = require('postman-collection').Collection,\n     *     ItemGroup = require('postman-collection').ItemGroup,\n     *     myCollection;\n     *\n     * myCollection = new Collection(); // create an empty collection\n     * myCollection.items.add(new ItemGroup({ // add a folder called \"blank folder\"\n     *     \"name\": \"This is a blank folder\"\n     * }));\n     */\n    ItemGroup = function PostmanItemGroup (definition) {\n        // this constructor is intended to inherit and as such the super constructor is required to be executed\n        ItemGroup.super_.apply(this, arguments);\n\n        _.mergeDefined(this, /** @lends ItemGroup.prototype */ {\n            /**\n             * This is a {@link PropertyList} that holds the list of {@link Item}s or {@link ItemGroup}s belonging to a\n             * {@link Collection} or to an {@link ItemGroup}. Operation on an individual item in this list can be\n             * performed using various functions available to a {@link PropertyList}.\n             *\n             * @type {PropertyList<(Item|ItemGroup)>}\n             *\n             * @example <caption>Fetch empty ItemGroups in a list loaded from a file</caption>\n             * var fs = require('fs'), // needed to read JSON file from disk\n             *     Collection = require('postman-collection').Collection,\n             *     myCollection,\n             *     emptyGroups;\n\n             * // Load a collection to memory from a JSON file on disk (say, sample-collection.json)\n             * myCollection = new Collection(JSON.stringify(fs.readFileSync('sample-collection.json').toString()));\n             *\n             * // Filter items in Collection root that is an empty ItemGroup\n             * emptyGroups = myCollection.items.filter(function (item) {\n             *     return item && item.items && (item.items.count() === 0);\n             * });\n             *\n             * // Log the emptyGroups array to check it's contents\n             * console.log(emptyGroups);\n             */\n            items: new PropertyList(ItemGroup._createNewGroupOrItem, this, definition && definition.item),\n\n            /**\n             * One can define the default authentication method required for every item that belongs to this list.\n             * Individual {@link Request}s can override this in their own definitions. More on how to define an\n             * authentication method is outlined in the {@link RequestAuth} property.\n             *\n             * @type {RequestAuth}\n             *\n             * @example <caption>Define an entire ItemGroup (folder) or Collection to follow Basic Auth</caption>\n             * var fs = require('fs'),\n             *     Collection = require('postman-collection').Collection,\n             *     RequestAuth = require('postman-collection').RequestAuth,\n             *     mycollection;\n             *\n             * // Create a collection having two requests\n             * myCollection = new Collection();\n             * myCollection.items.add([\n             *     { name: 'GET Request', request: 'https://postman-echo.com/get?auth=basic' },\n             *     { name: 'PUT Request', request: 'https://postman-echo.com/put?auth=basic' }\n             * ]);\n             *\n             * // Add basic auth to the Collection, to be applied on all requests.\n             * myCollection.auth = new RequestAuth({\n             *     type: 'basic',\n             *     username: 'postman',\n             *     password: 'password'\n             * });\n             */\n            // auth is a special case, empty RequestAuth should not be created for falsy values\n            // to allow inheritance from parent\n            auth: definition && definition.auth ? new RequestAuth(definition.auth) : undefined,\n\n            /**\n             * In this list, one can define the {@link Script}s to be executed when an event is triggered. Events are\n             * triggered before certain actions are taken on a Collection, Request, etc. For example, executing a\n             * request causes the `prerequest` and the `test` events to be triggered.\n             *\n             * @type {EventList}\n             * @memberOf Collection.prototype\n             *\n             * @example <caption>Executing a common test script for all requests in a collection</caption>\n             * var fs = require('fs'), // needed to read JSON file from disk\n             *     Collection = require('postman-collection').Collection,\n             *     myCollection;\n             *\n             * // Load a collection to memory from a JSON file on disk (say, sample-collection.json)\n             * myCollection = new Collection(JSON.stringify(fs.readFileSync('sample-collection.json').toString()));\n             *\n             * // Add an event listener to the collection that listens to the `test` event.\n             * myCollection.events.add({\n             *     listen: 'test',\n             *     script: {\n             *         exec: 'tests[\"Status code is 200\"] = (responseCode.code === 200)'\n             *     }\n             * });\n             */\n            events: new EventList(this, definition && definition.event),\n\n            /**\n             * Set of configurations used to alter the usual behavior of sending the request.\n             *\n             * @type {Object}\n             * @property {Boolean} disableBodyPruning Disable body pruning for request methods like GET, HEAD etc.\n             */\n            protocolProfileBehavior: definition && typeof definition.protocolProfileBehavior === OBJECT ?\n                definition.protocolProfileBehavior : undefined\n        });\n    }), Property);\n\n_.assign(ItemGroup.prototype, /** @lends ItemGroup.prototype */ {\n    /**\n     * Defines that this property requires an ID field\n     *\n     * @private\n     * @readonly\n     */\n    _postman_propertyRequiresId: true,\n\n    /**\n     * Calls the callback for each item belonging to itself. If any ItemGroups are encountered,\n     * they will call the callback on their own Items.\n     *\n     * @private\n     * @param {Function} callback -\n     */\n    forEachItem: function forEachItem (callback) {\n        this.items.each(function (item) {\n            return ItemGroup.isItemGroup(item) ? item.forEachItem(callback) : callback(item, this);\n        }, this);\n    },\n\n    /**\n     * Calls the callback for each itemgroup belonging to itself. All ItemGroups encountered will also,\n     * call the callback on their own ItemGroups\n     *\n     * @private\n     * @param {Function} callback -\n     */\n    forEachItemGroup: function forEachItemGroup (callback) {\n        this.items.each(function (item) {\n            if (ItemGroup.isItemGroup(item)) {\n                item.forEachItemGroup(callback);\n                callback(item, this); // eslint-disable-line callback-return\n            }\n        }, this);\n    },\n\n    /**\n     * Finds the first item with the given name or id in the current ItemGroup.\n     *\n     * @param {String} idOrName -\n     */\n    oneDeep: function (idOrName) {\n        if (!_.isString(idOrName)) { return; }\n\n        var item;\n\n        this.items.each(function (eachItem) {\n            if (eachItem.id === idOrName || eachItem.name === idOrName) {\n                item = eachItem;\n\n                return false; // we found something, so bail out of the for loop.\n            }\n\n            if (ItemGroup.isItemGroup(eachItem)) {\n                item = eachItem.oneDeep(idOrName);\n\n                return !item; // bail out of the for loop if we found anything\n            }\n        });\n\n        return item;\n    },\n\n    /**\n     * Fetches protocol profile behavior for the current ItemGroup\n     *\n     * @private\n     * @returns {Object}\n     *\n     * @note This will not inherit protocol profile behaviors from parent,\n     * use `getProtocolProfileBehaviorResolved` to achieve that behavior.\n     */\n    getProtocolProfileBehavior: Item.prototype.getProtocolProfileBehavior,\n\n    /**\n     * Fetches protocol profile behavior applicable for the current ItemGroup,\n     * inherited from parent ItemGroups(s).\n     *\n     * @private\n     * @returns {Object}\n     */\n    getProtocolProfileBehaviorResolved: Item.prototype.getProtocolProfileBehaviorResolved,\n\n    /**\n     * Set or update protocol profile behavior for the current ItemGroup.\n     *\n     * @example <caption> Set or update protocol profile behavior </caption>\n     * itemGroup.setProtocolProfileBehavior('strictSSL', false);\n     *\n     * @private\n     * @param {String} key - protocol profile behavior name\n     * @param {*} value - protocol profile behavior value\n     * @returns {ItemGroup}\n     */\n    setProtocolProfileBehavior: Item.prototype.setProtocolProfileBehavior,\n\n    /**\n     * Unset or delete protocol profile behavior for the current ItemGroup.\n     *\n     * @example <caption> Unset protocol profile behavior </caption>\n     * itemGroup.unsetProtocolProfileBehavior('strictSSL');\n     *\n     * @private\n     * @param {String} key - protocol profile behavior name to unset\n     * @returns {ItemGroup}\n     */\n    unsetProtocolProfileBehavior: Item.prototype.unsetProtocolProfileBehavior,\n\n    /**\n     * Sets authentication method for all the items within this group\n     *\n     * @param {?String|RequestAuth.definition} type\n     * @param {VariableList=} [options]\n     *\n     * @note This function was previously (in v2 of SDK) used to clone request and populate headers. Now it is used to\n     * only set auth information to request\n     */\n    authorizeRequestsUsing: Request.prototype.authorizeUsing\n});\n\n_.assign(ItemGroup, /** @lends ItemGroup */ {\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'ItemGroup',\n\n    /**\n     * Iterator function to update an itemgroup's item array with appropriate objects from definition.\n     *\n     * @private\n     * @this {ItemGroup}\n     * @param {Object} item - the definition of an item or group\n     * @returns {ItemGroup|Item}\n     * @note\n     * This function is intended to be used in scope of an instance of a {@link ItemGroup).\n     */\n    _createNewGroupOrItem: function (item) {\n        if (Item.isItem(item) || ItemGroup.isItemGroup(item)) { return item; }\n\n        return item && item.item ? new ItemGroup(item) : new Item(item);\n    },\n\n    /**\n     * Check whether an object is an instance of {@link ItemGroup}.\n     *\n     * @param {*} obj -\n     * @returns {Boolean}\n     */\n    isItemGroup: function (obj) {\n        return Boolean(obj) && ((obj instanceof ItemGroup) ||\n            _.inSuperChain(obj.constructor, '_postman_propertyName', ItemGroup._postman_propertyName));\n    }\n});\n\nmodule.exports = {\n    ItemGroup\n};\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM;EAC7BC,QAAQ,GAAGF,OAAO,CAAC,YAAY,CAAC,CAACE,QAAQ;EACzCC,YAAY,GAAGH,OAAO,CAAC,iBAAiB,CAAC,CAACG,YAAY;EACtDC,SAAS,GAAGJ,OAAO,CAAC,cAAc,CAAC,CAACI,SAAS;EAC7CC,IAAI,GAAGL,OAAO,CAAC,QAAQ,CAAC,CAACK,IAAI;EAC7BC,OAAO,GAAGN,OAAO,CAAC,WAAW,CAAC,CAACM,OAAO;EACtCC,WAAW,GAAGP,OAAO,CAAC,gBAAgB,CAAC,CAACO,WAAW;EAEnDC,SAAS;EAET;AACJ;AACA;AACA;EACIC,MAAM,GAAG,QAAQ;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,CAAC,CAACW,OAAO;AAEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIF,SAAS,GAAG,SAASG,gBAAgB,CAAEC,UAAU,EAAE;EAC/C;EACAJ,SAAS,CAACK,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAEvChB,CAAC,CAACiB,YAAY,CAAC,IAAI,EAAE,iCAAkC;IACnD;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAEYC,KAAK,EAAE,IAAId,YAAY,CAACK,SAAS,CAACU,qBAAqB,EAAE,IAAI,EAAEN,UAAU,IAAIA,UAAU,CAACO,IAAI,CAAC;IAE7F;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"script"}