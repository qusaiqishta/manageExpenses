{"ast":null,"code":"var util = require('../util'),\n  _ = util.lodash,\n  PropertyBase = require('./property-base').PropertyBase,\n  Property = require('./property').Property,\n  Url = require('./url').Url,\n  ProxyConfig = require('./proxy-config').ProxyConfig,\n  Certificate = require('./certificate').Certificate,\n  HeaderList = require('./header-list').HeaderList,\n  RequestBody = require('./request-body').RequestBody,\n  RequestAuth = require('./request-auth').RequestAuth,\n  Request,\n  /**\n   * Default request method\n   *\n   * @private\n   * @const\n   * @type {String}\n   */\n  DEFAULT_REQ_METHOD = 'GET',\n  /**\n   * Content length header name\n   *\n   * @private\n   * @const\n   * @type {String}\n   */\n  CONTENT_LENGTH = 'Content-Length',\n  /**\n   * Single space\n   *\n   * @private\n   * @const\n   * @type {String}\n   */\n  SP = ' ',\n  /**\n   * Carriage return + line feed\n   *\n   * @private\n   * @const\n   * @type {String}\n   */\n  CRLF = '\\r\\n',\n  /**\n   * HTTP version\n   *\n   * @private\n   * @const\n   * @type {String}\n   */\n  HTTP_X_X = 'HTTP/X.X',\n  /**\n   * @private\n   * @type {Boolean}\n   */\n  supportsBuffer = typeof Buffer !== undefined && _.isFunction(Buffer.byteLength),\n  /**\n   * Source of request body size calculation.\n   * Either computed from body or used Content-Length header value.\n   *\n   * @private\n   * @const\n   * @type {Object}\n   */\n  SIZE_SOURCE = {\n    computed: 'COMPUTED',\n    contentLength: 'CONTENT-LENGTH'\n  };\n\n/**\n * @typedef Request.definition\n * @property {String|Url} url The URL of the request. This can be a {@link Url.definition} or a string.\n * @property {String} method The request method, e.g: \"GET\" or \"POST\".\n * @property {Array<Header.definition>} header The headers that should be sent as a part of this request.\n * @property {RequestBody.definition} body The request body definition.\n * @property {RequestAuth.definition} auth The authentication/signing information for this request.\n * @property {ProxyConfig.definition} proxy The proxy information for this request.\n * @property {Certificate.definition} certificate The certificate information for this request.\n */\n_.inherit(\n/**\n * A Postman HTTP request object.\n *\n * @constructor\n * @extends {Property}\n * @param {Request.definition} options -\n */\nRequest = function PostmanRequest(options) {\n  // this constructor is intended to inherit and as such the super constructor is required to be executed\n  Request.super_.apply(this, arguments);\n\n  // if the definition is a string, it implies that this is a get of URL\n  typeof options === 'string' && (options = {\n    url: options\n  });\n\n  // Create the default properties\n  _.assign(this, /** @lends Request.prototype */{\n    /**\n     * @type {Url}\n     */\n    url: new Url(),\n    /**\n     * @type {HeaderList}\n     */\n    headers: new HeaderList(this, options && options.header),\n    // Although a similar check is being done in the .update call below, this handles falsy options as well.\n    /**\n     * @type {String}\n     * @todo: Clean this up\n     */\n    // the negated condition is required to keep DEFAULT_REQ_METHOD as a fallback\n    method: _.has(options, 'method') && !_.isNil(options.method) ? String(options.method).toUpperCase() : DEFAULT_REQ_METHOD\n  });\n  this.update(options);\n}, Property);\n_.assign(Request.prototype, /** @lends Request.prototype */{\n  /**\n   * Updates the different properties of the request.\n   *\n   * @param {Request.definition} options -\n   */\n  update: function (options) {\n    // Nothing to do\n    if (!options) {\n      return;\n    }\n\n    // The existing url is updated.\n    _.has(options, 'url') && this.url.update(options.url);\n\n    // The existing list of headers must be cleared before adding the given headers to it.\n    options.header && this.headers.repopulate(options.header);\n\n    // Only update the method if one is provided.\n    _.has(options, 'method') && (this.method = _.isNil(options.method) ? DEFAULT_REQ_METHOD : String(options.method).toUpperCase());\n\n    // The rest of the properties are not assumed to exist so we merge in the defined ones.\n    _.mergeDefined(this, /** @lends Request.prototype */{\n      /**\n       * @type {RequestBody|undefined}\n       */\n      body: _.createDefined(options, 'body', RequestBody),\n      // auth is a special case, empty RequestAuth should not be created for falsy values\n      // to allow inheritance from parent\n      /**\n       * @type {RequestAuth}\n       */\n      auth: options.auth ? new RequestAuth(options.auth) : undefined,\n      /**\n       * @type {ProxyConfig}\n       */\n      proxy: options.proxy && new ProxyConfig(options.proxy),\n      /**\n       * @type {Certificate|undefined}\n       */\n      certificate: options.certificate && new Certificate(options.certificate)\n    });\n  },\n  /**\n   * Sets authentication method for the request\n   *\n   * @param {?String|RequestAuth.definition} type -\n   * @param {VariableList=} [options] -\n   *\n   * @note This function was previously (in v2 of SDK) used to clone request and populate headers. Now it is used to\n   * only set auth information to request\n   *\n   * @note that ItemGroup#authorizeUsing depends on this function\n   */\n  authorizeUsing: function (type, options) {\n    if (_.isObject(type) && _.isNil(options)) {\n      options = _.omit(type, 'type');\n      type = type.type;\n    }\n\n    // null = delete request\n    if (type === null) {\n      _.has(this, 'auth') && delete this.auth;\n      return;\n    }\n    if (!RequestAuth.isValidType(type)) {\n      return;\n    }\n\n    // create a new authentication data\n    if (!this.auth) {\n      this.auth = new RequestAuth(null, this);\n    } else {\n      this.auth.clear(type);\n    }\n    this.auth.use(type, options);\n  },\n  /**\n   * Returns an object where the key is a header name and value is the header value.\n   *\n   * @param {Object=} options -\n   * @param {Boolean} options.ignoreCase When set to \"true\", will ensure that all the header keys are lower case.\n   * @param {Boolean} options.enabled Only get the enabled headers\n   * @param {Boolean} options.multiValue When set to \"true\", duplicate header values will be stored in an array\n   * @param {Boolean} options.sanitizeKeys When set to \"true\", headers with falsy keys are removed\n   * @returns {Object}\n   * @note If multiple headers are present in the same collection with same name, but different case\n   * (E.g \"x-forward-port\" and \"X-Forward-Port\", and `options.ignoreCase` is set to true,\n   * the values will be stored in an array.\n   */\n  getHeaders: function getHeaders(options) {\n    !options && (options = {});\n\n    // @note: options.multiValue will not be respected since, Header._postman_propertyAllowsMultipleValues\n    // gets higher precedence in PropertyLists.toObject.\n    // @todo: sanitizeKeys for headers by default.\n    return this.headers.toObject(options.enabled, !options.ignoreCase, options.multiValue, options.sanitizeKeys);\n  },\n  /**\n   * Calls the given callback on each Header object contained within the request.\n   *\n   * @param {Function} callback -\n   */\n  forEachHeader: function forEachHeader(callback) {\n    this.headers.all().forEach(function (header) {\n      return callback(header, this);\n    }, this);\n  },\n  /**\n   * Adds a header to the PropertyList of headers.\n   *\n   * @param {Header| {key: String, value: String}} header Can be a {Header} object, or a raw header object.\n   */\n  addHeader: function (header) {\n    this.headers.add(header);\n  },\n  /**\n   * Removes a header from the request.\n   *\n   * @param {String|Header} toRemove A header object to remove, or a string containing the header key.\n   * @param {Object} options -\n   * @param {Boolean} options.ignoreCase If set to true, ignores case while removing the header.\n   */\n  removeHeader: function (toRemove, options) {\n    toRemove = _.isString(toRemove) ? toRemove : toRemove.key;\n    options = options || {};\n    if (!toRemove) {\n      // Nothing to remove :(\n      return;\n    }\n    options.ignoreCase && (toRemove = toRemove.toLowerCase());\n    this.headers.remove(function (header) {\n      var key = options.ignoreCase ? header.key.toLowerCase() : header.key;\n      return key === toRemove;\n    });\n  },\n  /**\n   * Updates or inserts the given header.\n   *\n   * @param {Object} header -\n   */\n  upsertHeader: function (header) {\n    if (!(header && header.key)) {\n      return;\n    } // if no valid header is provided, do nothing\n\n    var existing = this.headers.find({\n      key: header.key\n    });\n    if (!existing) {\n      return this.headers.add(header);\n    }\n    existing.value = header.value;\n  },\n  /**\n   * Add query parameters to the request.\n   *\n   * @todo: Rename this?\n   * @param {Array<QueryParam>|String} params -\n   */\n  addQueryParams: function (params) {\n    this.url.addQueryParams(params);\n  },\n  /**\n   * Removes parameters passed in params.\n   *\n   * @param {String|Array} params -\n   */\n  removeQueryParams: function (params) {\n    this.url.removeQueryParams(params);\n  },\n  /**\n   * Get the request size by computing the headers and body or using the\n   * actual content length header once the request is sent.\n   *\n   * @returns {Object}\n   */\n  size: function () {\n    var contentLength = this.headers.get(CONTENT_LENGTH),\n      requestTarget = this.url.getPathWithQuery(),\n      bodyString,\n      sizeInfo = {\n        body: 0,\n        header: 0,\n        total: 0,\n        source: SIZE_SOURCE.computed\n      };\n\n    // if 'Content-Length' header is present, we take body as declared by\n    // the client(postman-request or user-defined). else we need to compute the same.\n    if (contentLength && util.isNumeric(contentLength)) {\n      sizeInfo.body = parseInt(contentLength, 10);\n      sizeInfo.source = SIZE_SOURCE.contentLength;\n    }\n    // otherwise, if body is defined, we calculate the length of the body\n    else if (this.body) {\n      // @note body.toString() returns E for formdata or file mode\n      bodyString = this.body.toString();\n      sizeInfo.body = supportsBuffer ? Buffer.byteLength(bodyString) : /* istanbul ignore next */\n      bodyString.length;\n    }\n\n    // https://tools.ietf.org/html/rfc7230#section-3\n    // HTTP-message   = start-line (request-line / status-line)\n    //                  *( header-field CRLF )\n    //                  CRLF\n    //                  [ message-body ]\n    // request-line = method SP request-target SP HTTP-version CRLF\n    sizeInfo.header = (this.method + SP + requestTarget + SP + HTTP_X_X + CRLF + CRLF).length + this.headers.contentSize();\n\n    // compute the approximate total body size by adding size of header and body\n    sizeInfo.total = (sizeInfo.body || 0) + sizeInfo.header;\n    return sizeInfo;\n  },\n  /**\n   * Converts the Request to a plain JavaScript object, which is also how the request is\n   * represented in a collection file.\n   *\n   * @returns {{url: (*|String), method: *, header: (undefined|*), body: *, auth: *, certificate: *}}\n   */\n  toJSON: function () {\n    var obj = PropertyBase.toJSON(this);\n\n    // remove header array if blank\n    if (_.isArray(obj.header) && !obj.header.length) {\n      delete obj.header;\n    }\n    return obj;\n  },\n  /**\n   * Creates a clone of this request\n   *\n   * @returns {Request}\n   */\n  clone: function () {\n    return new Request(this.toJSON());\n  }\n});\n_.assign(Request, /** @lends Request */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'Request',\n  /**\n   * Check whether an object is an instance of {@link ItemGroup}.\n   *\n   * @param {*} obj -\n   * @returns {Boolean}\n   */\n  isRequest: function (obj) {\n    return Boolean(obj) && (obj instanceof Request || _.inSuperChain(obj.constructor, '_postman_propertyName', Request._postman_propertyName));\n  }\n});\nmodule.exports = {\n  Request\n};","map":{"version":3,"names":["util","require","_","lodash","PropertyBase","Property","Url","ProxyConfig","Certificate","HeaderList","RequestBody","RequestAuth","Request","DEFAULT_REQ_METHOD","CONTENT_LENGTH","SP","CRLF","HTTP_X_X","supportsBuffer","Buffer","undefined","isFunction","byteLength","SIZE_SOURCE","computed","contentLength","inherit","PostmanRequest","options","super_","apply","arguments","url","assign","headers","header","method","has","isNil","String","toUpperCase","update","prototype","repopulate","mergeDefined","body","createDefined","auth","proxy","certificate","authorizeUsing","type","isObject","omit","isValidType","clear","use","getHeaders","toObject","enabled","ignoreCase","multiValue","sanitizeKeys","forEachHeader","callback","all","forEach","addHeader","add","removeHeader","toRemove","isString","key","toLowerCase","remove","upsertHeader","existing","find","value","addQueryParams","params","removeQueryParams","size","get","requestTarget","getPathWithQuery","bodyString","sizeInfo","total","source","isNumeric","parseInt","toString","length","contentSize","toJSON","obj","isArray","clone","_postman_propertyName","isRequest","Boolean","inSuperChain","constructor","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/request.js"],"sourcesContent":["var util = require('../util'),\n    _ = util.lodash,\n    PropertyBase = require('./property-base').PropertyBase,\n    Property = require('./property').Property,\n    Url = require('./url').Url,\n    ProxyConfig = require('./proxy-config').ProxyConfig,\n    Certificate = require('./certificate').Certificate,\n    HeaderList = require('./header-list').HeaderList,\n    RequestBody = require('./request-body').RequestBody,\n    RequestAuth = require('./request-auth').RequestAuth,\n\n    Request,\n\n    /**\n     * Default request method\n     *\n     * @private\n     * @const\n     * @type {String}\n     */\n    DEFAULT_REQ_METHOD = 'GET',\n\n    /**\n     * Content length header name\n     *\n     * @private\n     * @const\n     * @type {String}\n     */\n    CONTENT_LENGTH = 'Content-Length',\n\n    /**\n     * Single space\n     *\n     * @private\n     * @const\n     * @type {String}\n     */\n    SP = ' ',\n\n    /**\n     * Carriage return + line feed\n     *\n     * @private\n     * @const\n     * @type {String}\n     */\n    CRLF = '\\r\\n',\n\n    /**\n     * HTTP version\n     *\n     * @private\n     * @const\n     * @type {String}\n     */\n    HTTP_X_X = 'HTTP/X.X',\n\n    /**\n     * @private\n     * @type {Boolean}\n     */\n    supportsBuffer = (typeof Buffer !== undefined) && _.isFunction(Buffer.byteLength),\n\n    /**\n     * Source of request body size calculation.\n     * Either computed from body or used Content-Length header value.\n     *\n     * @private\n     * @const\n     * @type {Object}\n     */\n    SIZE_SOURCE = {\n        computed: 'COMPUTED',\n        contentLength: 'CONTENT-LENGTH'\n    };\n\n/**\n * @typedef Request.definition\n * @property {String|Url} url The URL of the request. This can be a {@link Url.definition} or a string.\n * @property {String} method The request method, e.g: \"GET\" or \"POST\".\n * @property {Array<Header.definition>} header The headers that should be sent as a part of this request.\n * @property {RequestBody.definition} body The request body definition.\n * @property {RequestAuth.definition} auth The authentication/signing information for this request.\n * @property {ProxyConfig.definition} proxy The proxy information for this request.\n * @property {Certificate.definition} certificate The certificate information for this request.\n */\n_.inherit((\n\n    /**\n     * A Postman HTTP request object.\n     *\n     * @constructor\n     * @extends {Property}\n     * @param {Request.definition} options -\n     */\n    Request = function PostmanRequest (options) {\n        // this constructor is intended to inherit and as such the super constructor is required to be executed\n        Request.super_.apply(this, arguments);\n\n        // if the definition is a string, it implies that this is a get of URL\n        (typeof options === 'string') && (options = {\n            url: options\n        });\n\n        // Create the default properties\n        _.assign(this, /** @lends Request.prototype */ {\n            /**\n             * @type {Url}\n             */\n            url: new Url(),\n\n            /**\n             * @type {HeaderList}\n             */\n            headers: new HeaderList(this, options && options.header),\n\n            // Although a similar check is being done in the .update call below, this handles falsy options as well.\n            /**\n             * @type {String}\n             * @todo: Clean this up\n             */\n            // the negated condition is required to keep DEFAULT_REQ_METHOD as a fallback\n            method: _.has(options, 'method') && !_.isNil(options.method) ?\n                String(options.method).toUpperCase() : DEFAULT_REQ_METHOD\n        });\n\n        this.update(options);\n    }), Property);\n\n_.assign(Request.prototype, /** @lends Request.prototype */ {\n\n    /**\n     * Updates the different properties of the request.\n     *\n     * @param {Request.definition} options -\n     */\n    update: function (options) {\n        // Nothing to do\n        if (!options) { return; }\n\n        // The existing url is updated.\n        _.has(options, 'url') && this.url.update(options.url);\n\n        // The existing list of headers must be cleared before adding the given headers to it.\n        options.header && this.headers.repopulate(options.header);\n\n        // Only update the method if one is provided.\n        _.has(options, 'method') && (this.method = _.isNil(options.method) ?\n            DEFAULT_REQ_METHOD : String(options.method).toUpperCase());\n\n        // The rest of the properties are not assumed to exist so we merge in the defined ones.\n        _.mergeDefined(this, /** @lends Request.prototype */ {\n            /**\n             * @type {RequestBody|undefined}\n             */\n            body: _.createDefined(options, 'body', RequestBody),\n\n            // auth is a special case, empty RequestAuth should not be created for falsy values\n            // to allow inheritance from parent\n            /**\n             * @type {RequestAuth}\n             */\n            auth: options.auth ? new RequestAuth(options.auth) : undefined,\n\n            /**\n             * @type {ProxyConfig}\n             */\n            proxy: options.proxy && new ProxyConfig(options.proxy),\n\n            /**\n             * @type {Certificate|undefined}\n             */\n            certificate: options.certificate && new Certificate(options.certificate)\n        });\n    },\n\n    /**\n     * Sets authentication method for the request\n     *\n     * @param {?String|RequestAuth.definition} type -\n     * @param {VariableList=} [options] -\n     *\n     * @note This function was previously (in v2 of SDK) used to clone request and populate headers. Now it is used to\n     * only set auth information to request\n     *\n     * @note that ItemGroup#authorizeUsing depends on this function\n     */\n    authorizeUsing: function (type, options) {\n        if (_.isObject(type) && _.isNil(options)) {\n            options = _.omit(type, 'type');\n            type = type.type;\n        }\n\n        // null = delete request\n        if (type === null) {\n            _.has(this, 'auth') && (delete this.auth);\n\n            return;\n        }\n\n        if (!RequestAuth.isValidType(type)) {\n            return;\n        }\n\n        // create a new authentication data\n        if (!this.auth) {\n            this.auth = new RequestAuth(null, this);\n        }\n        else {\n            this.auth.clear(type);\n        }\n\n        this.auth.use(type, options);\n    },\n\n    /**\n     * Returns an object where the key is a header name and value is the header value.\n     *\n     * @param {Object=} options -\n     * @param {Boolean} options.ignoreCase When set to \"true\", will ensure that all the header keys are lower case.\n     * @param {Boolean} options.enabled Only get the enabled headers\n     * @param {Boolean} options.multiValue When set to \"true\", duplicate header values will be stored in an array\n     * @param {Boolean} options.sanitizeKeys When set to \"true\", headers with falsy keys are removed\n     * @returns {Object}\n     * @note If multiple headers are present in the same collection with same name, but different case\n     * (E.g \"x-forward-port\" and \"X-Forward-Port\", and `options.ignoreCase` is set to true,\n     * the values will be stored in an array.\n     */\n    getHeaders: function getHeaders (options) {\n        !options && (options = {});\n\n        // @note: options.multiValue will not be respected since, Header._postman_propertyAllowsMultipleValues\n        // gets higher precedence in PropertyLists.toObject.\n        // @todo: sanitizeKeys for headers by default.\n        return this.headers.toObject(options.enabled, !options.ignoreCase, options.multiValue, options.sanitizeKeys);\n    },\n\n    /**\n     * Calls the given callback on each Header object contained within the request.\n     *\n     * @param {Function} callback -\n     */\n    forEachHeader: function forEachHeader (callback) {\n        this.headers.all().forEach(function (header) {\n            return callback(header, this);\n        }, this);\n    },\n\n    /**\n     * Adds a header to the PropertyList of headers.\n     *\n     * @param {Header| {key: String, value: String}} header Can be a {Header} object, or a raw header object.\n     */\n    addHeader: function (header) {\n        this.headers.add(header);\n    },\n\n    /**\n     * Removes a header from the request.\n     *\n     * @param {String|Header} toRemove A header object to remove, or a string containing the header key.\n     * @param {Object} options -\n     * @param {Boolean} options.ignoreCase If set to true, ignores case while removing the header.\n     */\n    removeHeader: function (toRemove, options) {\n        toRemove = _.isString(toRemove) ? toRemove : toRemove.key;\n\n        options = options || {};\n\n        if (!toRemove) { // Nothing to remove :(\n            return;\n        }\n\n        options.ignoreCase && (toRemove = toRemove.toLowerCase());\n\n        this.headers.remove(function (header) {\n            var key = options.ignoreCase ? header.key.toLowerCase() : header.key;\n\n            return key === toRemove;\n        });\n    },\n\n    /**\n     * Updates or inserts the given header.\n     *\n     * @param {Object} header -\n     */\n    upsertHeader: function (header) {\n        if (!(header && header.key)) { return; } // if no valid header is provided, do nothing\n\n        var existing = this.headers.find({ key: header.key });\n\n        if (!existing) {\n            return this.headers.add(header);\n        }\n\n        existing.value = header.value;\n    },\n\n    /**\n     * Add query parameters to the request.\n     *\n     * @todo: Rename this?\n     * @param {Array<QueryParam>|String} params -\n     */\n    addQueryParams: function (params) {\n        this.url.addQueryParams(params);\n    },\n\n    /**\n     * Removes parameters passed in params.\n     *\n     * @param {String|Array} params -\n     */\n    removeQueryParams: function (params) {\n        this.url.removeQueryParams(params);\n    },\n\n    /**\n     * Get the request size by computing the headers and body or using the\n     * actual content length header once the request is sent.\n     *\n     * @returns {Object}\n     */\n    size: function () {\n        var contentLength = this.headers.get(CONTENT_LENGTH),\n            requestTarget = this.url.getPathWithQuery(),\n            bodyString,\n            sizeInfo = {\n                body: 0,\n                header: 0,\n                total: 0,\n                source: SIZE_SOURCE.computed\n            };\n\n        // if 'Content-Length' header is present, we take body as declared by\n        // the client(postman-request or user-defined). else we need to compute the same.\n        if (contentLength && util.isNumeric(contentLength)) {\n            sizeInfo.body = parseInt(contentLength, 10);\n            sizeInfo.source = SIZE_SOURCE.contentLength;\n        }\n        // otherwise, if body is defined, we calculate the length of the body\n        else if (this.body) {\n            // @note body.toString() returns E for formdata or file mode\n            bodyString = this.body.toString();\n            sizeInfo.body = supportsBuffer ? Buffer.byteLength(bodyString) :\n                /* istanbul ignore next */\n                bodyString.length;\n        }\n\n        // https://tools.ietf.org/html/rfc7230#section-3\n        // HTTP-message   = start-line (request-line / status-line)\n        //                  *( header-field CRLF )\n        //                  CRLF\n        //                  [ message-body ]\n        // request-line = method SP request-target SP HTTP-version CRLF\n        sizeInfo.header = (this.method + SP + requestTarget + SP + HTTP_X_X + CRLF + CRLF).length +\n            this.headers.contentSize();\n\n        // compute the approximate total body size by adding size of header and body\n        sizeInfo.total = (sizeInfo.body || 0) + (sizeInfo.header);\n\n        return sizeInfo;\n    },\n\n    /**\n     * Converts the Request to a plain JavaScript object, which is also how the request is\n     * represented in a collection file.\n     *\n     * @returns {{url: (*|String), method: *, header: (undefined|*), body: *, auth: *, certificate: *}}\n     */\n    toJSON: function () {\n        var obj = PropertyBase.toJSON(this);\n\n        // remove header array if blank\n        if (_.isArray(obj.header) && !obj.header.length) {\n            delete obj.header;\n        }\n\n        return obj;\n    },\n\n    /**\n     * Creates a clone of this request\n     *\n     * @returns {Request}\n     */\n    clone: function () {\n        return new Request(this.toJSON());\n    }\n});\n\n_.assign(Request, /** @lends Request */ {\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'Request',\n\n    /**\n     * Check whether an object is an instance of {@link ItemGroup}.\n     *\n     * @param {*} obj -\n     * @returns {Boolean}\n     */\n    isRequest: function (obj) {\n        return Boolean(obj) && ((obj instanceof Request) ||\n            _.inSuperChain(obj.constructor, '_postman_propertyName', Request._postman_propertyName));\n    }\n});\n\nmodule.exports = {\n    Request\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}