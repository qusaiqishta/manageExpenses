{"ast":null,"code":"var BEARER_AUTH_PREFIX = 'Bearer ';\n\n/**\n * @implements {AuthHandlerInterface}\n */\nmodule.exports = {\n  /**\n   * @property {AuthHandlerInterface~AuthManifest}\n   */\n  manifest: {\n    info: {\n      name: 'bearer',\n      version: '1.0.0'\n    },\n    updates: [{\n      property: 'Authorization',\n      type: 'header'\n    }]\n  },\n  /**\n   * Initializes an item (extracts parameters from intermediate requests if any, etc)\n   * before the actual authorization step\n   *\n   * @param {AuthInterface} auth -\n   * @param {Response} response -\n   * @param {AuthHandlerInterface~authInitHookCallback} done -\n   */\n  init: function (auth, response, done) {\n    done();\n  },\n  /**\n   * Verifies whether the request has required parameters\n   *\n   * @param {AuthInterface} auth -\n   * @param {AuthHandlerInterface~authPreHookCallback} done -\n   */\n  pre: function (auth, done) {\n    return done(null, Boolean(auth.get('token')));\n  },\n  /**\n   * Verifies whether the auth succeeded\n   *\n   * @param {AuthInterface} auth -\n   * @param {Response} response -\n   * @param {AuthHandlerInterface~authPostHookCallback} done -\n   */\n  post: function (auth, response, done) {\n    done(null, true);\n  },\n  /**\n   * Signs the request\n   *\n   * @param {AuthInterface} auth -\n   * @param {Request} request -\n   * @param {AuthHandlerInterface~authSignHookCallback} done -\n   */\n  sign: function (auth, request, done) {\n    var token = auth.get('token');\n    if (!token) {\n      return done(); // Nothing to do if required parameters are not present.\n    }\n\n    // @TODO Should we support adding to query params and/or body also?\n    // According to the RFC#6750 they are supported but not recommended!\n\n    request.removeHeader('Authorization', {\n      ignoreCase: true\n    });\n    request.addHeader({\n      key: 'Authorization',\n      value: BEARER_AUTH_PREFIX + token,\n      system: true\n    });\n    return done();\n  }\n};","map":{"version":3,"names":["BEARER_AUTH_PREFIX","module","exports","manifest","info","name","version","updates","property","type","init","auth","response","done","pre","Boolean","get","post","sign","request","token","removeHeader","ignoreCase","addHeader","key","value","system"],"sources":["/Users/Qusai.Qishta/node_modules/postman-runtime/lib/authorizer/bearer.js"],"sourcesContent":["\nvar BEARER_AUTH_PREFIX = 'Bearer ';\n\n/**\n * @implements {AuthHandlerInterface}\n */\nmodule.exports = {\n    /**\n     * @property {AuthHandlerInterface~AuthManifest}\n     */\n    manifest: {\n        info: {\n            name: 'bearer',\n            version: '1.0.0'\n        },\n        updates: [\n            {\n                property: 'Authorization',\n                type: 'header'\n            }\n        ]\n    },\n\n    /**\n     * Initializes an item (extracts parameters from intermediate requests if any, etc)\n     * before the actual authorization step\n     *\n     * @param {AuthInterface} auth -\n     * @param {Response} response -\n     * @param {AuthHandlerInterface~authInitHookCallback} done -\n     */\n    init: function (auth, response, done) {\n        done();\n    },\n\n    /**\n     * Verifies whether the request has required parameters\n     *\n     * @param {AuthInterface} auth -\n     * @param {AuthHandlerInterface~authPreHookCallback} done -\n     */\n    pre: function (auth, done) {\n        return done(null, Boolean(auth.get('token')));\n    },\n\n    /**\n     * Verifies whether the auth succeeded\n     *\n     * @param {AuthInterface} auth -\n     * @param {Response} response -\n     * @param {AuthHandlerInterface~authPostHookCallback} done -\n     */\n    post: function (auth, response, done) {\n        done(null, true);\n    },\n\n    /**\n     * Signs the request\n     *\n     * @param {AuthInterface} auth -\n     * @param {Request} request -\n     * @param {AuthHandlerInterface~authSignHookCallback} done -\n     */\n    sign: function (auth, request, done) {\n        var token = auth.get('token');\n\n        if (!token) {\n            return done(); // Nothing to do if required parameters are not present.\n        }\n\n        // @TODO Should we support adding to query params and/or body also?\n        // According to the RFC#6750 they are supported but not recommended!\n\n        request.removeHeader('Authorization', { ignoreCase: true });\n        request.addHeader({\n            key: 'Authorization',\n            value: BEARER_AUTH_PREFIX + token,\n            system: true\n        });\n\n        return done();\n    }\n};\n"],"mappings":"AACA,IAAIA,kBAAkB,GAAG,SAAS;;AAElC;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG;EACb;AACJ;AACA;EACIC,QAAQ,EAAE;IACNC,IAAI,EAAE;MACFC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAE;IACb,CAAC;IACDC,OAAO,EAAE,CACL;MACIC,QAAQ,EAAE,eAAe;MACzBC,IAAI,EAAE;IACV,CAAC;EAET,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,IAAI,EAAE,UAAUC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAClCA,IAAI,EAAE;EACV,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIC,GAAG,EAAE,UAAUH,IAAI,EAAEE,IAAI,EAAE;IACvB,OAAOA,IAAI,CAAC,IAAI,EAAEE,OAAO,CAACJ,IAAI,CAACK,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;EACjD,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,IAAI,EAAE,UAAUN,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAClCA,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;EACpB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIK,IAAI,EAAE,UAAUP,IAAI,EAAEQ,OAAO,EAAEN,IAAI,EAAE;IACjC,IAAIO,KAAK,GAAGT,IAAI,CAACK,GAAG,CAAC,OAAO,CAAC;IAE7B,IAAI,CAACI,KAAK,EAAE;MACR,OAAOP,IAAI,EAAE,CAAC,CAAC;IACnB;;IAEA;IACA;;IAEAM,OAAO,CAACE,YAAY,CAAC,eAAe,EAAE;MAAEC,UAAU,EAAE;IAAK,CAAC,CAAC;IAC3DH,OAAO,CAACI,SAAS,CAAC;MACdC,GAAG,EAAE,eAAe;MACpBC,KAAK,EAAEzB,kBAAkB,GAAGoB,KAAK;MACjCM,MAAM,EAAE;IACZ,CAAC,CAAC;IAEF,OAAOb,IAAI,EAAE;EACjB;AACJ,CAAC"},"metadata":{},"sourceType":"script"}