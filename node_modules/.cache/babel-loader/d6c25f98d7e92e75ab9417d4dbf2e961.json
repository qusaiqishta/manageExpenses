{"ast":null,"code":"const _ = require('lodash'),\n  uuid = require('./vendor/uuid'),\n  UniversalVM = require('uvm'),\n  PostmanEvent = require('postman-collection').Event,\n  teleportJS = require('teleport-javascript'),\n  bootcode = require('./bootcode'),\n  TO_WAIT_BUFFER = 500,\n  // time to wait for sandbox to declare timeout\n  EXECUTION_TIMEOUT_ERROR_MESSAGE = 'sandbox not responding',\n  BRIDGE_DISCONNECTING_ERROR_MESSAGE = 'sandbox: execution interrupted, bridge disconnecting.';\nclass PostmanSandbox extends UniversalVM {\n  constructor() {\n    super();\n    this._executing = {};\n  }\n  initialize(options, callback) {\n    // ensure options is an object and is shallow cloned\n    options = _.assign({}, options);\n    this.debug = Boolean(options.debug);\n\n    // set the dispatch timeout of UVM based on what is set in options unless original options sends the same\n    _.isFinite(options.timeout) && (options.dispatchTimeout = this.executionTimeout = options.timeout);\n    super.connect(options, (err, context) => {\n      if (err) {\n        return callback(err);\n      }\n      context.ping(err => {\n        // eslint-disable-next-line callback-return\n        callback(err, context);\n        context = null;\n      });\n    });\n  }\n  ping(callback) {\n    const packet = uuid(),\n      start = Date.now();\n    this.once('pong', echo => {\n      callback(echo !== packet ? new Error('sandbox: ping packet mismatch') : null, Date.now() - start, packet);\n    });\n    this.dispatch('ping', packet);\n  }\n\n  /**\n   * @param {Event|String} target - can optionally be the code to execute\n   * @param {Object} options -\n   * @param {String} options.id -\n   * @param {Boolean} options.debug -\n   * @param {Number} options.timeout -\n   * @param {Object} options.cursor -\n   * @param {Object} options.context -\n   * @param {Boolean} options.serializeLogs -\n   * @param {Function} callback -\n   */\n  execute(target, options, callback) {\n    if (_.isFunction(options) && !callback) {\n      callback = options;\n      options = null;\n    }\n    !_.isObject(options) && (options = {});\n    !_.isFunction(callback) && (callback = _.noop);\n\n    // if the target is simple code, we make a generic event out of it\n    if (_.isString(target) || _.isArray(target)) {\n      target = new PostmanEvent({\n        script: target\n      });\n    }\n    // if target is not a code and instead is not something that can be cast to an event, it is definitely an error\n    else if (!_.isObject(target)) {\n      return callback(new Error('sandbox: no target provided for execution'));\n    }\n    const id = _.isString(options.id) ? options.id : uuid(),\n      executionEventName = 'execution.result.' + id,\n      consoleEventName = 'execution.console.' + id,\n      executionTimeout = _.get(options, 'timeout', this.executionTimeout),\n      cursor = _.clone(_.get(options, 'cursor', {})),\n      // clone the cursor as it travels through IPC for mutation\n      debugMode = _.has(options, 'debug') ? options.debug : this.debug;\n    let waiting;\n\n    // set the execution id in cursor\n    cursor.execution = id;\n\n    // set execution timeout and store the interrupt in a global object (so that we can clear during dispose)\n    // force trigger of the `execution.${id}` event so that the normal error flow is taken\n    this._executing[id] = _.isFinite(executionTimeout) ? waiting = setTimeout(() => {\n      waiting = null;\n      this.emit.bind(executionEventName, new Error(EXECUTION_TIMEOUT_ERROR_MESSAGE));\n    }, executionTimeout + TO_WAIT_BUFFER) : null;\n\n    // @todo decide how the results will return in a more managed fashion\n    // listen to this once, so that subsequent calls are simply dropped. especially during timeout and other\n    // errors\n    this.once(executionEventName, (err, result) => {\n      waiting && (waiting = clearTimeout(waiting)); // clear timeout interrupt\n      if (Object.hasOwnProperty.call(this._executing, id)) {\n        // clear any pending timeouts\n        this._executing[id] && clearTimeout(this._executing[id]);\n        delete this._executing[id];\n      }\n      this.emit('execution', err, id, result);\n      callback(err, result);\n    });\n    this.on(consoleEventName, (cursor, level, args) => {\n      if (_.get(options, 'serializeLogs')) {\n        return this.emit('console', cursor, level, args);\n      }\n      args = teleportJS.parse(args);\n      args.unshift('console', cursor, level);\n\n      // eslint-disable-next-line prefer-spread\n      this.emit.apply(this, args);\n    });\n\n    // send the code to the sandbox to be intercepted and executed\n    this.dispatch('execute', id, target, _.get(options, 'context', {}), {\n      cursor: cursor,\n      debug: debugMode,\n      timeout: executionTimeout,\n      legacy: _.get(options, 'legacy')\n    });\n  }\n  dispose() {\n    _.forEach(this._executing, (irq, id) => {\n      irq && clearTimeout(irq);\n\n      // send an abort event to the sandbox so that it can do cleanups\n      this.dispatch('execution.abort.' + id);\n\n      // even though sandbox could bubble the result event upon receiving abort, that would reduce\n      // stability of the system in case sandbox was unresponsive.\n      this.emit('execution.result.' + id, new Error(BRIDGE_DISCONNECTING_ERROR_MESSAGE));\n    });\n    this.disconnect();\n  }\n}\nmodule.exports = {\n  /**\n   * Creates a new instance of sandbox from the options that have been provided\n   *\n   * @param {Object=} [options] -\n   * @param {Function} callback -\n   */\n  createContext(options, callback) {\n    if (_.isFunction(options) && !callback) {\n      callback = options;\n      options = {};\n    }\n    options = _.clone(options);\n    bootcode((err, code) => {\n      if (err) {\n        return callback(err);\n      }\n      if (!code) {\n        return callback(new Error('sandbox: bootcode missing!'));\n      }\n      options.bootCode = code; // assign the code in options\n\n      new PostmanSandbox().initialize(options, callback);\n    });\n  }\n};","map":{"version":3,"names":["_","require","uuid","UniversalVM","PostmanEvent","Event","teleportJS","bootcode","TO_WAIT_BUFFER","EXECUTION_TIMEOUT_ERROR_MESSAGE","BRIDGE_DISCONNECTING_ERROR_MESSAGE","PostmanSandbox","constructor","_executing","initialize","options","callback","assign","debug","Boolean","isFinite","timeout","dispatchTimeout","executionTimeout","connect","err","context","ping","packet","start","Date","now","once","echo","Error","dispatch","execute","target","isFunction","isObject","noop","isString","isArray","script","id","executionEventName","consoleEventName","get","cursor","clone","debugMode","has","waiting","execution","setTimeout","emit","bind","result","clearTimeout","Object","hasOwnProperty","call","on","level","args","parse","unshift","apply","legacy","dispose","forEach","irq","disconnect","module","exports","createContext","code","bootCode"],"sources":["/Users/Qusai.Qishta/node_modules/postman-sandbox/lib/index.js"],"sourcesContent":["const _ = require('lodash'),\n    uuid = require('./vendor/uuid'),\n    UniversalVM = require('uvm'),\n    PostmanEvent = require('postman-collection').Event,\n    teleportJS = require('teleport-javascript'),\n    bootcode = require('./bootcode'),\n\n    TO_WAIT_BUFFER = 500, // time to wait for sandbox to declare timeout\n    EXECUTION_TIMEOUT_ERROR_MESSAGE = 'sandbox not responding',\n    BRIDGE_DISCONNECTING_ERROR_MESSAGE = 'sandbox: execution interrupted, bridge disconnecting.';\n\nclass PostmanSandbox extends UniversalVM {\n    constructor () {\n        super();\n\n        this._executing = {};\n    }\n\n    initialize (options, callback) {\n        // ensure options is an object and is shallow cloned\n        options = _.assign({}, options);\n        this.debug = Boolean(options.debug);\n\n        // set the dispatch timeout of UVM based on what is set in options unless original options sends the same\n        _.isFinite(options.timeout) && (options.dispatchTimeout = this.executionTimeout = options.timeout);\n\n        super.connect(options, (err, context) => {\n            if (err) { return callback(err); }\n            context.ping((err) => {\n                // eslint-disable-next-line callback-return\n                callback(err, context);\n                context = null;\n            });\n        });\n    }\n\n    ping (callback) {\n        const packet = uuid(),\n            start = Date.now();\n\n        this.once('pong', (echo) => {\n            callback((echo !== packet ? new Error('sandbox: ping packet mismatch') : null), Date.now() - start, packet);\n        });\n\n        this.dispatch('ping', packet);\n    }\n\n    /**\n     * @param {Event|String} target - can optionally be the code to execute\n     * @param {Object} options -\n     * @param {String} options.id -\n     * @param {Boolean} options.debug -\n     * @param {Number} options.timeout -\n     * @param {Object} options.cursor -\n     * @param {Object} options.context -\n     * @param {Boolean} options.serializeLogs -\n     * @param {Function} callback -\n     */\n    execute (target, options, callback) {\n        if (_.isFunction(options) && !callback) {\n            callback = options;\n            options = null;\n        }\n\n        !_.isObject(options) && (options = {});\n        !_.isFunction(callback) && (callback = _.noop);\n\n        // if the target is simple code, we make a generic event out of it\n        if (_.isString(target) || _.isArray(target)) {\n            target = new PostmanEvent({ script: target });\n        }\n        // if target is not a code and instead is not something that can be cast to an event, it is definitely an error\n        else if (!_.isObject(target)) {\n            return callback(new Error('sandbox: no target provided for execution'));\n        }\n\n        const id = _.isString(options.id) ? options.id : uuid(),\n            executionEventName = 'execution.result.' + id,\n            consoleEventName = 'execution.console.' + id,\n            executionTimeout = _.get(options, 'timeout', this.executionTimeout),\n            cursor = _.clone(_.get(options, 'cursor', {})), // clone the cursor as it travels through IPC for mutation\n            debugMode = _.has(options, 'debug') ? options.debug : this.debug;\n\n        let waiting;\n\n        // set the execution id in cursor\n        cursor.execution = id;\n\n        // set execution timeout and store the interrupt in a global object (so that we can clear during dispose)\n        // force trigger of the `execution.${id}` event so that the normal error flow is taken\n        this._executing[id] = _.isFinite(executionTimeout) ? (waiting = setTimeout(() => {\n            waiting = null;\n            this.emit.bind(executionEventName, new Error(EXECUTION_TIMEOUT_ERROR_MESSAGE));\n        }, executionTimeout + TO_WAIT_BUFFER)) : null;\n\n        // @todo decide how the results will return in a more managed fashion\n        // listen to this once, so that subsequent calls are simply dropped. especially during timeout and other\n        // errors\n        this.once(executionEventName, (err, result) => {\n            waiting && (waiting = clearTimeout(waiting)); // clear timeout interrupt\n            if (Object.hasOwnProperty.call(this._executing, id)) { // clear any pending timeouts\n                this._executing[id] && clearTimeout(this._executing[id]);\n                delete this._executing[id];\n            }\n\n            this.emit('execution', err, id, result);\n            callback(err, result);\n        });\n\n        this.on(consoleEventName, (cursor, level, args) => {\n            if (_.get(options, 'serializeLogs')) {\n                return this.emit('console', cursor, level, args);\n            }\n\n            args = teleportJS.parse(args);\n            args.unshift('console', cursor, level);\n\n            // eslint-disable-next-line prefer-spread\n            this.emit.apply(this, args);\n        });\n\n        // send the code to the sandbox to be intercepted and executed\n        this.dispatch('execute', id, target, _.get(options, 'context', {}), {\n            cursor: cursor,\n            debug: debugMode,\n            timeout: executionTimeout,\n            legacy: _.get(options, 'legacy')\n        });\n    }\n\n    dispose () {\n        _.forEach(this._executing, (irq, id) => {\n            irq && clearTimeout(irq);\n\n            // send an abort event to the sandbox so that it can do cleanups\n            this.dispatch('execution.abort.' + id);\n\n            // even though sandbox could bubble the result event upon receiving abort, that would reduce\n            // stability of the system in case sandbox was unresponsive.\n            this.emit('execution.result.' + id, new Error(BRIDGE_DISCONNECTING_ERROR_MESSAGE));\n        });\n\n        this.disconnect();\n    }\n}\n\nmodule.exports = {\n    /**\n     * Creates a new instance of sandbox from the options that have been provided\n     *\n     * @param {Object=} [options] -\n     * @param {Function} callback -\n     */\n    createContext (options, callback) {\n        if (_.isFunction(options) && !callback) {\n            callback = options;\n            options = {};\n        }\n\n        options = _.clone(options);\n        bootcode((err, code) => {\n            if (err) { return callback(err); }\n            if (!code) { return callback(new Error('sandbox: bootcode missing!')); }\n\n            options.bootCode = code; // assign the code in options\n\n            new PostmanSandbox().initialize(options, callback);\n        });\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}