{"ast":null,"code":"/**\n * This module helps to encode different URL components and expose utility\n * methods to percent-encode a given string using an {@link EncodeSet}.\n *\n * @example\n * const encoder = require('postman-url-encoder/encoder')\n *\n * // returns 'xn--48jwgn17gdel797d.com'\n * encoder.encodeHost('郵便屋さん.com')\n *\n * @example <caption>Using EncodeSet</caption>\n * var EncodeSet = require('postman-url-encoder/encoder').EncodeSet\n *\n * var fragmentEncodeSet = new EncodeSet([' ', '\"', '<', '>', '`'])\n *\n * // returns false\n * fragmentEncodeSet.has('['.charCodeAt(0))\n *\n * // returns true\n * fragmentEncodeSet.has('<'.charCodeAt(0))\n *\n * @module postman-url-encoder/encoder\n * @see {@link https://url.spec.whatwg.org/#url-representation}\n */\n\n/**\n * @fileoverview\n * This module determines which of the reserved characters in the different\n * URL components should be percent-encoded and which can be safely used.\n *\n * The generic URI syntax consists of a hierarchical sequence of components\n * referred to as the scheme, authority, path, query, and fragment.\n *\n *      URI         = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n *\n *      hier-part   = \"//\" authority path-abempty\n *                  / path-absolute\n *                  / path-rootless\n *                  / path-empty\n *\n *      authority   = [ userinfo \"@\" ] host [ \":\" port ]\n *\n * @see {@link https://tools.ietf.org/html/rfc3986#section-2}\n * @see {@link https://tools.ietf.org/html/rfc3986#section-3}\n */\n\nconst encodeSet = require('./encode-set'),\n  _percentEncode = require('./percent-encode').encode,\n  _percentEncodeCharCode = require('./percent-encode').encodeCharCode,\n  EncodeSet = encodeSet.EncodeSet,\n  PATH_ENCODE_SET = encodeSet.PATH_ENCODE_SET,\n  QUERY_ENCODE_SET = encodeSet.QUERY_ENCODE_SET,\n  USERINFO_ENCODE_SET = encodeSet.USERINFO_ENCODE_SET,\n  FRAGMENT_ENCODE_SET = encodeSet.FRAGMENT_ENCODE_SET,\n  C0_CONTROL_ENCODE_SET = encodeSet.C0_CONTROL_ENCODE_SET,\n  PARAM_VALUE_ENCODE_SET = EncodeSet.extend(QUERY_ENCODE_SET, ['&']).seal(),\n  PARAM_KEY_ENCODE_SET = EncodeSet.extend(QUERY_ENCODE_SET, ['&', '=']).seal(),\n  E = '',\n  EQUALS = '=',\n  AMPERSAND = '&',\n  STRING = 'string',\n  OBJECT = 'object',\n  PATH_SEPARATOR = '/',\n  DOMAIN_SEPARATOR = '.',\n  /**\n   * Returns the Punycode ASCII serialization of the domain.\n   *\n   * @private\n   * @function\n   * @param {String} domain domain name\n   * @returns {String} punycode encoded domain name\n   */\n  domainToASCII = function () {\n    // @note `url.domainToASCII` returns empty string for invalid domain.\n    const domainToASCII = require('url').domainToASCII;\n\n    // use faster native `url` method in Node.js\n    /* istanbul ignore next */\n    if (typeof domainToASCII === 'function') {\n      return domainToASCII;\n    }\n\n    // else, lazy load `punycode` dependency in browser\n    /* istanbul ignore next */\n    return require('punycode').toASCII;\n  }();\n\n/**\n * Returns the Punycode ASCII serialization of the domain.\n *\n * @note Returns input hostname on invalid domain.\n *\n * @example\n * // returns 'xn--fiq228c.com'\n * encodeHost('中文.com')\n *\n * // returns 'xn--48jwgn17gdel797d.com'\n * encodeHost(['郵便屋さん', 'com'])\n *\n * // returns '127.0.0.1'\n * encodeHost('127.1')\n *\n * // returns 'xn--iñvalid.com'\n * encodeHost('xn--iñvalid.com')\n *\n * @param {String|String[]} hostName host or domain name\n * @returns {String} Punycode-encoded hostname\n */\nfunction encodeHost(hostName) {\n  if (Array.isArray(hostName)) {\n    hostName = hostName.join(DOMAIN_SEPARATOR);\n  }\n  if (typeof hostName !== STRING) {\n    return E;\n  }\n\n  // return input host name if `domainToASCII` returned an empty string\n  return domainToASCII(hostName) || hostName;\n}\n\n/**\n * Encodes URL path or individual path segments.\n *\n * @example\n * // returns 'foo/bar&baz'\n * encodePath('foo/bar&baz')\n *\n * // returns 'foo/bar/%20%22%3C%3E%60%23%3F%7B%7D'\n * encodePath(['foo', 'bar', ' \"<>\\`#?{}'])\n *\n * @param {String|String[]} path Path or path segments\n * @returns {String} Percent-encoded path\n */\nfunction encodePath(path) {\n  if (Array.isArray(path) && path.length) {\n    path = path.join(PATH_SEPARATOR);\n  }\n  if (typeof path !== STRING) {\n    return E;\n  }\n  return _percentEncode(path, PATH_ENCODE_SET);\n}\n\n/**\n * Encodes URL userinfo (username / password) fields.\n *\n * @example\n * // returns 'info~%20%22%3C%3E%60%23%3F%7B%7D%2F%3A%3B%3D%40%5B%5C%5D%5E%7C'\n * encodeAuth('info~ \"<>`#?{}/:;=@[\\\\]^|')\n *\n * @param {String} param Parameter to encode\n * @returns {String} Percent-encoded parameter\n */\nfunction encodeUserInfo(param) {\n  if (typeof param !== STRING) {\n    return E;\n  }\n  return _percentEncode(param, USERINFO_ENCODE_SET);\n}\n\n/**\n * Encodes URL fragment identifier or hash.\n *\n * @example\n * // returns 'fragment#%20%22%3C%3E%60'\n * encodeHash('fragment# \"<>`')\n *\n * @param {String} fragment Hash or fragment identifier to encode\n * @returns {String} Percent-encoded fragment\n */\nfunction encodeFragment(fragment) {\n  if (typeof fragment !== STRING) {\n    return E;\n  }\n  return _percentEncode(fragment, FRAGMENT_ENCODE_SET);\n}\n\n/**\n * Encodes single query parameter and returns as a string.\n *\n * @example\n * // returns 'param%20%22%23%27%3C%3E'\n * encodeQueryParam('param \"#\\'<>')\n *\n * // returns 'foo=bar'\n * encodeQueryParam({ key: 'foo', value: 'bar' })\n *\n * @param {Object|String} param Query param to encode\n * @returns {String} Percent-encoded query param\n */\nfunction encodeQueryParam(param) {\n  if (!param) {\n    return E;\n  }\n  if (typeof param === STRING) {\n    return _percentEncode(param, QUERY_ENCODE_SET);\n  }\n  let key = param.key,\n    value = param.value,\n    result;\n  if (typeof key === STRING) {\n    result = _percentEncode(key, PARAM_KEY_ENCODE_SET);\n  } else {\n    result = E;\n  }\n  if (typeof value === STRING) {\n    result += EQUALS + _percentEncode(value, PARAM_VALUE_ENCODE_SET);\n  }\n  return result;\n}\n\n/**\n * Encodes list of query parameters and returns encoded query string.\n *\n * @example\n * // returns 'foo=bar&=foo%26bar'\n * encodeQueryParams([{ key: 'foo', value: 'bar' }, { value: 'foo&bar' }])\n *\n * // returns 'q1=foo&q2=bar&q2=baz'\n * encodeQueryParams({ q1: 'foo', q2: ['bar', 'baz'] })\n *\n * @param {Object|Object[]} params Query params to encode\n * @returns {String} Percent-encoded query string\n */\nfunction encodeQueryParams(params) {\n  let i,\n    j,\n    ii,\n    jj,\n    paramKey,\n    paramKeys,\n    paramValue,\n    result = E,\n    notFirstParam = false;\n  if (!(params && typeof params === OBJECT)) {\n    return E;\n  }\n\n  // handle array of query params\n  if (Array.isArray(params)) {\n    for (i = 0, ii = params.length; i < ii; i++) {\n      // @todo Add helper in PropertyList to filter disabled QueryParam\n      if (!params[i] || params[i].disabled === true) {\n        continue;\n      }\n\n      // don't add '&' for the very first enabled param\n      notFirstParam && (result += AMPERSAND);\n      notFirstParam = true;\n      result += encodeQueryParam(params[i]);\n    }\n    return result;\n  }\n\n  // handle object with query params\n  paramKeys = Object.keys(params);\n  for (i = 0, ii = paramKeys.length; i < ii; i++) {\n    paramKey = paramKeys[i];\n    paramValue = params[paramKey];\n\n    // { key: ['value1', 'value2', 'value3'] }\n    if (Array.isArray(paramValue)) {\n      for (j = 0, jj = paramValue.length; j < jj; j++) {\n        notFirstParam && (result += AMPERSAND);\n        notFirstParam = true;\n        result += encodeQueryParam({\n          key: paramKey,\n          value: paramValue[j]\n        });\n      }\n    }\n    // { key: 'value' }\n    else {\n      notFirstParam && (result += AMPERSAND);\n      notFirstParam = true;\n      result += encodeQueryParam({\n        key: paramKey,\n        value: paramValue\n      });\n    }\n  }\n  return result;\n}\n\n/**\n * Percent-encode the given string with the given {@link EncodeSet}.\n *\n * @example <caption>Defaults to C0_CONTROL_ENCODE_SET</caption>\n * // returns 'foo %00 bar'\n * percentEncode('foo \\u0000 bar')\n *\n * @example <caption>Encode literal @ using custom EncodeSet</caption>\n * // returns 'foo%40bar'\n * percentEncode('foo@bar', new EncodeSet(['@']))\n *\n * @param {String} value String to percent-encode\n * @param {EncodeSet} [encodeSet=C0_CONTROL_ENCODE_SET] EncodeSet to use for encoding\n * @returns {String} Percent-encoded string\n */\nfunction percentEncode(value, encodeSet) {\n  if (!(value && typeof value === STRING)) {\n    return E;\n  }\n\n  // defaults to C0_CONTROL_ENCODE_SET\n  if (!EncodeSet.isEncodeSet(encodeSet)) {\n    encodeSet = C0_CONTROL_ENCODE_SET;\n  }\n  return _percentEncode(value, encodeSet);\n}\n\n/**\n * Percent encode a character with given code.\n *\n * @example\n * // returns '%20'\n * percentEncodeCharCode(32)\n *\n * @param {Number} code Character code\n * @returns {String} Percent-encoded character\n */\nfunction percentEncodeCharCode(code) {\n  // ensure [0x00, 0xFF] range\n  if (!(Number.isInteger(code) && code >= 0 && code <= 0xFF)) {\n    return E;\n  }\n  return _percentEncodeCharCode(code);\n}\nmodule.exports = {\n  // URL components\n  encodeHost,\n  encodePath,\n  encodeUserInfo,\n  encodeFragment,\n  encodeQueryParam,\n  encodeQueryParams,\n  /** @type EncodeSet */\n  EncodeSet,\n  // Utilities\n  percentEncode,\n  percentEncodeCharCode\n};","map":{"version":3,"names":["encodeSet","require","_percentEncode","encode","_percentEncodeCharCode","encodeCharCode","EncodeSet","PATH_ENCODE_SET","QUERY_ENCODE_SET","USERINFO_ENCODE_SET","FRAGMENT_ENCODE_SET","C0_CONTROL_ENCODE_SET","PARAM_VALUE_ENCODE_SET","extend","seal","PARAM_KEY_ENCODE_SET","E","EQUALS","AMPERSAND","STRING","OBJECT","PATH_SEPARATOR","DOMAIN_SEPARATOR","domainToASCII","toASCII","encodeHost","hostName","Array","isArray","join","encodePath","path","length","encodeUserInfo","param","encodeFragment","fragment","encodeQueryParam","key","value","result","encodeQueryParams","params","i","j","ii","jj","paramKey","paramKeys","paramValue","notFirstParam","disabled","Object","keys","percentEncode","isEncodeSet","percentEncodeCharCode","code","Number","isInteger","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-url-encoder/encoder/index.js"],"sourcesContent":["/**\n * This module helps to encode different URL components and expose utility\n * methods to percent-encode a given string using an {@link EncodeSet}.\n *\n * @example\n * const encoder = require('postman-url-encoder/encoder')\n *\n * // returns 'xn--48jwgn17gdel797d.com'\n * encoder.encodeHost('郵便屋さん.com')\n *\n * @example <caption>Using EncodeSet</caption>\n * var EncodeSet = require('postman-url-encoder/encoder').EncodeSet\n *\n * var fragmentEncodeSet = new EncodeSet([' ', '\"', '<', '>', '`'])\n *\n * // returns false\n * fragmentEncodeSet.has('['.charCodeAt(0))\n *\n * // returns true\n * fragmentEncodeSet.has('<'.charCodeAt(0))\n *\n * @module postman-url-encoder/encoder\n * @see {@link https://url.spec.whatwg.org/#url-representation}\n */\n\n/**\n * @fileoverview\n * This module determines which of the reserved characters in the different\n * URL components should be percent-encoded and which can be safely used.\n *\n * The generic URI syntax consists of a hierarchical sequence of components\n * referred to as the scheme, authority, path, query, and fragment.\n *\n *      URI         = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n *\n *      hier-part   = \"//\" authority path-abempty\n *                  / path-absolute\n *                  / path-rootless\n *                  / path-empty\n *\n *      authority   = [ userinfo \"@\" ] host [ \":\" port ]\n *\n * @see {@link https://tools.ietf.org/html/rfc3986#section-2}\n * @see {@link https://tools.ietf.org/html/rfc3986#section-3}\n */\n\nconst encodeSet = require('./encode-set'),\n\n    _percentEncode = require('./percent-encode').encode,\n    _percentEncodeCharCode = require('./percent-encode').encodeCharCode,\n\n    EncodeSet = encodeSet.EncodeSet,\n\n    PATH_ENCODE_SET = encodeSet.PATH_ENCODE_SET,\n    QUERY_ENCODE_SET = encodeSet.QUERY_ENCODE_SET,\n    USERINFO_ENCODE_SET = encodeSet.USERINFO_ENCODE_SET,\n    FRAGMENT_ENCODE_SET = encodeSet.FRAGMENT_ENCODE_SET,\n    C0_CONTROL_ENCODE_SET = encodeSet.C0_CONTROL_ENCODE_SET,\n\n    PARAM_VALUE_ENCODE_SET = EncodeSet.extend(QUERY_ENCODE_SET, ['&']).seal(),\n    PARAM_KEY_ENCODE_SET = EncodeSet.extend(QUERY_ENCODE_SET, ['&', '=']).seal(),\n\n    E = '',\n    EQUALS = '=',\n    AMPERSAND = '&',\n    STRING = 'string',\n    OBJECT = 'object',\n\n    PATH_SEPARATOR = '/',\n    DOMAIN_SEPARATOR = '.',\n\n    /**\n     * Returns the Punycode ASCII serialization of the domain.\n     *\n     * @private\n     * @function\n     * @param {String} domain domain name\n     * @returns {String} punycode encoded domain name\n     */\n    domainToASCII = (function () {\n        // @note `url.domainToASCII` returns empty string for invalid domain.\n        const domainToASCII = require('url').domainToASCII;\n\n        // use faster native `url` method in Node.js\n        /* istanbul ignore next */\n        if (typeof domainToASCII === 'function') {\n            return domainToASCII;\n        }\n\n        // else, lazy load `punycode` dependency in browser\n        /* istanbul ignore next */\n        return require('punycode').toASCII;\n    }());\n\n/**\n * Returns the Punycode ASCII serialization of the domain.\n *\n * @note Returns input hostname on invalid domain.\n *\n * @example\n * // returns 'xn--fiq228c.com'\n * encodeHost('中文.com')\n *\n * // returns 'xn--48jwgn17gdel797d.com'\n * encodeHost(['郵便屋さん', 'com'])\n *\n * // returns '127.0.0.1'\n * encodeHost('127.1')\n *\n * // returns 'xn--iñvalid.com'\n * encodeHost('xn--iñvalid.com')\n *\n * @param {String|String[]} hostName host or domain name\n * @returns {String} Punycode-encoded hostname\n */\nfunction encodeHost (hostName) {\n    if (Array.isArray(hostName)) {\n        hostName = hostName.join(DOMAIN_SEPARATOR);\n    }\n\n    if (typeof hostName !== STRING) {\n        return E;\n    }\n\n    // return input host name if `domainToASCII` returned an empty string\n    return domainToASCII(hostName) || hostName;\n}\n\n/**\n * Encodes URL path or individual path segments.\n *\n * @example\n * // returns 'foo/bar&baz'\n * encodePath('foo/bar&baz')\n *\n * // returns 'foo/bar/%20%22%3C%3E%60%23%3F%7B%7D'\n * encodePath(['foo', 'bar', ' \"<>\\`#?{}'])\n *\n * @param {String|String[]} path Path or path segments\n * @returns {String} Percent-encoded path\n */\nfunction encodePath (path) {\n    if (Array.isArray(path) && path.length) {\n        path = path.join(PATH_SEPARATOR);\n    }\n\n    if (typeof path !== STRING) {\n        return E;\n    }\n\n    return _percentEncode(path, PATH_ENCODE_SET);\n}\n\n/**\n * Encodes URL userinfo (username / password) fields.\n *\n * @example\n * // returns 'info~%20%22%3C%3E%60%23%3F%7B%7D%2F%3A%3B%3D%40%5B%5C%5D%5E%7C'\n * encodeAuth('info~ \"<>`#?{}/:;=@[\\\\]^|')\n *\n * @param {String} param Parameter to encode\n * @returns {String} Percent-encoded parameter\n */\nfunction encodeUserInfo (param) {\n    if (typeof param !== STRING) {\n        return E;\n    }\n\n    return _percentEncode(param, USERINFO_ENCODE_SET);\n}\n\n/**\n * Encodes URL fragment identifier or hash.\n *\n * @example\n * // returns 'fragment#%20%22%3C%3E%60'\n * encodeHash('fragment# \"<>`')\n *\n * @param {String} fragment Hash or fragment identifier to encode\n * @returns {String} Percent-encoded fragment\n */\nfunction encodeFragment (fragment) {\n    if (typeof fragment !== STRING) {\n        return E;\n    }\n\n    return _percentEncode(fragment, FRAGMENT_ENCODE_SET);\n}\n\n/**\n * Encodes single query parameter and returns as a string.\n *\n * @example\n * // returns 'param%20%22%23%27%3C%3E'\n * encodeQueryParam('param \"#\\'<>')\n *\n * // returns 'foo=bar'\n * encodeQueryParam({ key: 'foo', value: 'bar' })\n *\n * @param {Object|String} param Query param to encode\n * @returns {String} Percent-encoded query param\n */\nfunction encodeQueryParam (param) {\n    if (!param) {\n        return E;\n    }\n\n    if (typeof param === STRING) {\n        return _percentEncode(param, QUERY_ENCODE_SET);\n    }\n\n    let key = param.key,\n        value = param.value,\n        result;\n\n    if (typeof key === STRING) {\n        result = _percentEncode(key, PARAM_KEY_ENCODE_SET);\n    }\n    else {\n        result = E;\n    }\n\n    if (typeof value === STRING) {\n        result += EQUALS + _percentEncode(value, PARAM_VALUE_ENCODE_SET);\n    }\n\n    return result;\n}\n\n/**\n * Encodes list of query parameters and returns encoded query string.\n *\n * @example\n * // returns 'foo=bar&=foo%26bar'\n * encodeQueryParams([{ key: 'foo', value: 'bar' }, { value: 'foo&bar' }])\n *\n * // returns 'q1=foo&q2=bar&q2=baz'\n * encodeQueryParams({ q1: 'foo', q2: ['bar', 'baz'] })\n *\n * @param {Object|Object[]} params Query params to encode\n * @returns {String} Percent-encoded query string\n */\nfunction encodeQueryParams (params) {\n    let i,\n        j,\n        ii,\n        jj,\n        paramKey,\n        paramKeys,\n        paramValue,\n        result = E,\n        notFirstParam = false;\n\n    if (!(params && typeof params === OBJECT)) {\n        return E;\n    }\n\n    // handle array of query params\n    if (Array.isArray(params)) {\n        for (i = 0, ii = params.length; i < ii; i++) {\n            // @todo Add helper in PropertyList to filter disabled QueryParam\n            if (!params[i] || params[i].disabled === true) {\n                continue;\n            }\n\n            // don't add '&' for the very first enabled param\n            notFirstParam && (result += AMPERSAND);\n            notFirstParam = true;\n\n            result += encodeQueryParam(params[i]);\n        }\n\n        return result;\n    }\n\n    // handle object with query params\n    paramKeys = Object.keys(params);\n\n    for (i = 0, ii = paramKeys.length; i < ii; i++) {\n        paramKey = paramKeys[i];\n        paramValue = params[paramKey];\n\n        // { key: ['value1', 'value2', 'value3'] }\n        if (Array.isArray(paramValue)) {\n            for (j = 0, jj = paramValue.length; j < jj; j++) {\n                notFirstParam && (result += AMPERSAND);\n                notFirstParam = true;\n\n                result += encodeQueryParam({ key: paramKey, value: paramValue[j] });\n            }\n        }\n        // { key: 'value' }\n        else {\n            notFirstParam && (result += AMPERSAND);\n            notFirstParam = true;\n\n            result += encodeQueryParam({ key: paramKey, value: paramValue });\n        }\n    }\n\n    return result;\n}\n\n/**\n * Percent-encode the given string with the given {@link EncodeSet}.\n *\n * @example <caption>Defaults to C0_CONTROL_ENCODE_SET</caption>\n * // returns 'foo %00 bar'\n * percentEncode('foo \\u0000 bar')\n *\n * @example <caption>Encode literal @ using custom EncodeSet</caption>\n * // returns 'foo%40bar'\n * percentEncode('foo@bar', new EncodeSet(['@']))\n *\n * @param {String} value String to percent-encode\n * @param {EncodeSet} [encodeSet=C0_CONTROL_ENCODE_SET] EncodeSet to use for encoding\n * @returns {String} Percent-encoded string\n */\nfunction percentEncode (value, encodeSet) {\n    if (!(value && typeof value === STRING)) {\n        return E;\n    }\n\n    // defaults to C0_CONTROL_ENCODE_SET\n    if (!EncodeSet.isEncodeSet(encodeSet)) {\n        encodeSet = C0_CONTROL_ENCODE_SET;\n    }\n\n    return _percentEncode(value, encodeSet);\n}\n\n/**\n * Percent encode a character with given code.\n *\n * @example\n * // returns '%20'\n * percentEncodeCharCode(32)\n *\n * @param {Number} code Character code\n * @returns {String} Percent-encoded character\n */\nfunction percentEncodeCharCode (code) {\n    // ensure [0x00, 0xFF] range\n    if (!(Number.isInteger(code) && code >= 0 && code <= 0xFF)) {\n        return E;\n    }\n\n    return _percentEncodeCharCode(code);\n}\n\nmodule.exports = {\n    // URL components\n    encodeHost,\n    encodePath,\n    encodeUserInfo,\n    encodeFragment,\n    encodeQueryParam,\n    encodeQueryParams,\n\n    /** @type EncodeSet */\n    EncodeSet,\n\n    // Utilities\n    percentEncode,\n    percentEncodeCharCode\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}