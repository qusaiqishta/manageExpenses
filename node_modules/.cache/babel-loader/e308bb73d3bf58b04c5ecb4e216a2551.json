{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ISO_2022_CN = exports.ISO_2022_KR = exports.ISO_2022_JP = void 0;\nconst match_1 = __importDefault(require(\"../match\"));\nclass ISO_2022 {\n  constructor() {\n    this.escapeSequences = [];\n  }\n  name() {\n    return 'ISO_2022';\n  }\n  match(det) {\n    let i, j;\n    let escN;\n    let hits = 0;\n    let misses = 0;\n    let shifts = 0;\n    let confidence;\n    const text = det.inputBytes;\n    const textLen = det.inputLen;\n    scanInput: for (i = 0; i < textLen; i++) {\n      if (text[i] == 0x1b) {\n        checkEscapes: for (escN = 0; escN < this.escapeSequences.length; escN++) {\n          const seq = this.escapeSequences[escN];\n          if (textLen - i < seq.length) continue checkEscapes;\n          for (j = 1; j < seq.length; j++) if (seq[j] != text[i + j]) continue checkEscapes;\n          hits++;\n          i += seq.length - 1;\n          continue scanInput;\n        }\n        misses++;\n      }\n      if (text[i] == 0x0e || text[i] == 0x0f) shifts++;\n    }\n    if (hits == 0) return null;\n    confidence = (100 * hits - 100 * misses) / (hits + misses);\n    if (hits + shifts < 5) confidence -= (5 - (hits + shifts)) * 10;\n    return confidence <= 0 ? null : (0, match_1.default)(det, this, confidence);\n  }\n}\nclass ISO_2022_JP extends ISO_2022 {\n  constructor() {\n    super(...arguments);\n    this.escapeSequences = [[0x1b, 0x24, 0x28, 0x43], [0x1b, 0x24, 0x28, 0x44], [0x1b, 0x24, 0x40], [0x1b, 0x24, 0x41], [0x1b, 0x24, 0x42], [0x1b, 0x26, 0x40], [0x1b, 0x28, 0x42], [0x1b, 0x28, 0x48], [0x1b, 0x28, 0x49], [0x1b, 0x28, 0x4a], [0x1b, 0x2e, 0x41], [0x1b, 0x2e, 0x46]];\n  }\n  name() {\n    return 'ISO-2022-JP';\n  }\n  language() {\n    return 'ja';\n  }\n}\nexports.ISO_2022_JP = ISO_2022_JP;\nclass ISO_2022_KR extends ISO_2022 {\n  constructor() {\n    super(...arguments);\n    this.escapeSequences = [[0x1b, 0x24, 0x29, 0x43]];\n  }\n  name() {\n    return 'ISO-2022-KR';\n  }\n  language() {\n    return 'kr';\n  }\n}\nexports.ISO_2022_KR = ISO_2022_KR;\nclass ISO_2022_CN extends ISO_2022 {\n  constructor() {\n    super(...arguments);\n    this.escapeSequences = [[0x1b, 0x24, 0x29, 0x41], [0x1b, 0x24, 0x29, 0x47], [0x1b, 0x24, 0x2a, 0x48], [0x1b, 0x24, 0x29, 0x45], [0x1b, 0x24, 0x2b, 0x49], [0x1b, 0x24, 0x2b, 0x4a], [0x1b, 0x24, 0x2b, 0x4b], [0x1b, 0x24, 0x2b, 0x4c], [0x1b, 0x24, 0x2b, 0x4d], [0x1b, 0x4e], [0x1b, 0x4f]];\n  }\n  name() {\n    return 'ISO-2022-CN';\n  }\n  language() {\n    return 'zh';\n  }\n}\nexports.ISO_2022_CN = ISO_2022_CN;","map":{"version":3,"mappings":"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","names":["ISO_2022","constructor","name","match","det","i","j","escN","hits","misses","shifts","confidence","text","inputBytes","textLen","inputLen","scanInput","checkEscapes","escapeSequences","length","seq","ISO_2022_JP","language","exports","ISO_2022_KR","ISO_2022_CN"],"sourceRoot":"","sources":["../../src/encoding/iso2022.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}