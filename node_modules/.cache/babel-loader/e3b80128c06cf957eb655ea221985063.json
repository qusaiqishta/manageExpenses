{"ast":null,"code":"var _ = require('../util').lodash,\n  PropertyList = require('../collection/property-list').PropertyList,\n  Url = require('../collection/url').Url,\n  UrlMatchPattern = require('./url-match-pattern').UrlMatchPattern,\n  MATCH_ALL_URLS = UrlMatchPattern.MATCH_ALL_URLS,\n  UrlMatchPatternList;\n_.inherit(\n/**\n * UrlMatchPattern is a list of UrlMatchPatterns.\n * This allows you to test for any url over a list of match patterns.\n *\n * @constructor\n * @extends {PropertyList}\n *\n * @param {Object} parent -\n * @param {String[]} list -\n * @example <caption>An example UrlMatchPatternList</caption>\n * var matchPatternList = new UrlMatchPatternList(['https://*.google.com/*']);\n*/\nUrlMatchPatternList = function (parent, list) {\n  UrlMatchPatternList.super_.call(this, UrlMatchPattern, parent, list);\n}, PropertyList);\n_.assign(UrlMatchPatternList.prototype, /** @lends UrlMatchPatternList.prototype */{\n  /**\n   * Allows this property to be serialised into its plural form.\n   * This is here because Property.prototype.toJSON() tries to singularise\n   * the keys which are PropertyLists.\n   * i.e. when a property has a key - `matches = new PropertyList()`,\n   * toJSON on the property tries to singularise 'matches' and ends up with 'matche'.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_proprtyIsSerialisedAsPlural: true,\n  /**\n    * Tests the url string with the match pattern list provided to see if it matches any of it.\n    * Follows the https://developer.chrome.com/extensions/match_patterns pattern for pattern validation and matching\n    *\n    * @param {String=} [urlStr] The url string for which the proxy match needs to be done.\n    * @returns {Boolean=}\n    */\n  test: function (urlStr) {\n    /*\n     * Similar to the UrlMatchPattern.test, however instead of testing\n     * MATCH_ALL_URLS and Regex conditions serially with each of the pattern,\n     * this method first searches for MATCH_ALL_URLS in all patterns\n     * and then moves on to the slower Regex based searches.\n     */\n    var url, matchAllUrlsPattern, matchedSpecificPattern;\n    matchAllUrlsPattern = this.find(function (urlMatchPattern) {\n      return urlMatchPattern.pattern === MATCH_ALL_URLS;\n    });\n    if (_.isObject(matchAllUrlsPattern)) {\n      return true;\n    }\n    url = new Url(urlStr);\n    matchedSpecificPattern = this.find(function (urlMatchPattern) {\n      var matchRegexObject = urlMatchPattern._matchPatternObject;\n\n      // Empty matchRegexObject represents the match is INVALID match\n      if (_.isEmpty(matchRegexObject)) {\n        return false;\n      }\n      return urlMatchPattern.testProtocol(url.protocol) && urlMatchPattern.testHost(url.getHost()) && urlMatchPattern.testPort(url.port, url.protocol) && urlMatchPattern.testPath(url.getPath());\n    });\n    return Boolean(matchedSpecificPattern);\n  }\n});\n_.assign(UrlMatchPatternList, /** @lends UrlMatchPatternList */{\n  /**\n   * Defines the name of this property for internal use\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'UrlMatchPatternList'\n});\nmodule.exports = {\n  UrlMatchPatternList\n};","map":{"version":3,"names":["_","require","lodash","PropertyList","Url","UrlMatchPattern","MATCH_ALL_URLS","UrlMatchPatternList","inherit","parent","list","super_","call","assign","prototype","_postman_proprtyIsSerialisedAsPlural","test","urlStr","url","matchAllUrlsPattern","matchedSpecificPattern","find","urlMatchPattern","pattern","isObject","matchRegexObject","_matchPatternObject","isEmpty","testProtocol","protocol","testHost","getHost","testPort","port","testPath","getPath","Boolean","_postman_propertyName","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/url-pattern/url-match-pattern-list.js"],"sourcesContent":["var _ = require('../util').lodash,\n    PropertyList = require('../collection/property-list').PropertyList,\n    Url = require('../collection/url').Url,\n    UrlMatchPattern = require('./url-match-pattern').UrlMatchPattern,\n\n    MATCH_ALL_URLS = UrlMatchPattern.MATCH_ALL_URLS,\n\n    UrlMatchPatternList;\n\n_.inherit((\n\n    /**\n     * UrlMatchPattern is a list of UrlMatchPatterns.\n     * This allows you to test for any url over a list of match patterns.\n     *\n     * @constructor\n     * @extends {PropertyList}\n     *\n     * @param {Object} parent -\n     * @param {String[]} list -\n     * @example <caption>An example UrlMatchPatternList</caption>\n     * var matchPatternList = new UrlMatchPatternList(['https://*.google.com/*']);\n    */\n    UrlMatchPatternList = function (parent, list) {\n        UrlMatchPatternList.super_.call(this, UrlMatchPattern, parent, list);\n    }), PropertyList);\n\n_.assign(UrlMatchPatternList.prototype, /** @lends UrlMatchPatternList.prototype */ {\n\n    /**\n     * Allows this property to be serialised into its plural form.\n     * This is here because Property.prototype.toJSON() tries to singularise\n     * the keys which are PropertyLists.\n     * i.e. when a property has a key - `matches = new PropertyList()`,\n     * toJSON on the property tries to singularise 'matches' and ends up with 'matche'.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_proprtyIsSerialisedAsPlural: true,\n\n    /**\n      * Tests the url string with the match pattern list provided to see if it matches any of it.\n      * Follows the https://developer.chrome.com/extensions/match_patterns pattern for pattern validation and matching\n      *\n      * @param {String=} [urlStr] The url string for which the proxy match needs to be done.\n      * @returns {Boolean=}\n      */\n    test: function (urlStr) {\n        /*\n         * Similar to the UrlMatchPattern.test, however instead of testing\n         * MATCH_ALL_URLS and Regex conditions serially with each of the pattern,\n         * this method first searches for MATCH_ALL_URLS in all patterns\n         * and then moves on to the slower Regex based searches.\n         */\n        var url,\n            matchAllUrlsPattern,\n            matchedSpecificPattern;\n\n        matchAllUrlsPattern = this.find(function (urlMatchPattern) {\n            return urlMatchPattern.pattern === MATCH_ALL_URLS;\n        });\n\n        if (_.isObject(matchAllUrlsPattern)) {\n            return true;\n        }\n\n        url = new Url(urlStr);\n\n        matchedSpecificPattern = this.find(function (urlMatchPattern) {\n            var matchRegexObject = urlMatchPattern._matchPatternObject;\n\n            // Empty matchRegexObject represents the match is INVALID match\n            if (_.isEmpty(matchRegexObject)) {\n                return false;\n            }\n\n            return (urlMatchPattern.testProtocol(url.protocol) &&\n                urlMatchPattern.testHost(url.getHost()) &&\n                urlMatchPattern.testPort(url.port, url.protocol) &&\n                urlMatchPattern.testPath(url.getPath()));\n        });\n\n        return Boolean(matchedSpecificPattern);\n    }\n});\n\n_.assign(UrlMatchPatternList, /** @lends UrlMatchPatternList */ {\n    /**\n     * Defines the name of this property for internal use\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'UrlMatchPatternList'\n});\n\nmodule.exports = {\n    UrlMatchPatternList\n};\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM;EAC7BC,YAAY,GAAGF,OAAO,CAAC,6BAA6B,CAAC,CAACE,YAAY;EAClEC,GAAG,GAAGH,OAAO,CAAC,mBAAmB,CAAC,CAACG,GAAG;EACtCC,eAAe,GAAGJ,OAAO,CAAC,qBAAqB,CAAC,CAACI,eAAe;EAEhEC,cAAc,GAAGD,eAAe,CAACC,cAAc;EAE/CC,mBAAmB;AAEvBP,CAAC,CAACQ,OAAO;AAEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACID,mBAAmB,GAAG,UAAUE,MAAM,EAAEC,IAAI,EAAE;EAC1CH,mBAAmB,CAACI,MAAM,CAACC,IAAI,CAAC,IAAI,EAAEP,eAAe,EAAEI,MAAM,EAAEC,IAAI,CAAC;AACxE,CAAC,EAAGP,YAAY,CAAC;AAErBH,CAAC,CAACa,MAAM,CAACN,mBAAmB,CAACO,SAAS,EAAE,2CAA4C;EAEhF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,oCAAoC,EAAE,IAAI;EAE1C;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,IAAI,EAAE,UAAUC,MAAM,EAAE;IACpB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAIC,GAAG,EACHC,mBAAmB,EACnBC,sBAAsB;IAE1BD,mBAAmB,GAAG,IAAI,CAACE,IAAI,CAAC,UAAUC,eAAe,EAAE;MACvD,OAAOA,eAAe,CAACC,OAAO,KAAKjB,cAAc;IACrD,CAAC,CAAC;IAEF,IAAIN,CAAC,CAACwB,QAAQ,CAACL,mBAAmB,CAAC,EAAE;MACjC,OAAO,IAAI;IACf;IAEAD,GAAG,GAAG,IAAId,GAAG,CAACa,MAAM,CAAC;IAErBG,sBAAsB,GAAG,IAAI,CAACC,IAAI,CAAC,UAAUC,eAAe,EAAE;MAC1D,IAAIG,gBAAgB,GAAGH,eAAe,CAACI,mBAAmB;;MAE1D;MACA,IAAI1B,CAAC,CAAC2B,OAAO,CAACF,gBAAgB,CAAC,EAAE;QAC7B,OAAO,KAAK;MAChB;MAEA,OAAQH,eAAe,CAACM,YAAY,CAACV,GAAG,CAACW,QAAQ,CAAC,IAC9CP,eAAe,CAACQ,QAAQ,CAACZ,GAAG,CAACa,OAAO,EAAE,CAAC,IACvCT,eAAe,CAACU,QAAQ,CAACd,GAAG,CAACe,IAAI,EAAEf,GAAG,CAACW,QAAQ,CAAC,IAChDP,eAAe,CAACY,QAAQ,CAAChB,GAAG,CAACiB,OAAO,EAAE,CAAC;IAC/C,CAAC,CAAC;IAEF,OAAOC,OAAO,CAAChB,sBAAsB,CAAC;EAC1C;AACJ,CAAC,CAAC;AAEFpB,CAAC,CAACa,MAAM,CAACN,mBAAmB,EAAE,iCAAkC;EAC5D;AACJ;AACA;AACA;AACA;AACA;AACA;EACI8B,qBAAqB,EAAE;AAC3B,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAG;EACbhC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}