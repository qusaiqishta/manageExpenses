{"ast":null,"code":"var _ = require('lodash'),\n  HEADER = 'header',\n  QUERY_PARAMS = 'queryParams',\n  BEARER = 'bearer',\n  MAC = 'mac',\n  AUTHORIZATION = 'Authorization',\n  ACCESS_TOKEN = 'access_token',\n  AUTHORIZATION_PREFIX = 'Bearer',\n  OAUTH2_PARAMETERS = ['accessToken', 'addTokenTo', 'tokenType', 'headerPrefix'];\n\n/**\n * @implements {AuthHandlerInterface}\n */\nmodule.exports = {\n  /**\n   * @property {AuthHandlerInterface~AuthManifest}\n   */\n  manifest: {\n    info: {\n      name: 'oauth2',\n      version: '1.0.0'\n    },\n    updates: [{\n      property: AUTHORIZATION,\n      type: 'header'\n    }, {\n      property: ACCESS_TOKEN,\n      type: 'url.param'\n    }]\n  },\n  /**\n   * Initializes an item (extracts parameters from intermediate requests if any, etc)\n   * before the actual authorization step.\n   *\n   * @param {AuthInterface} auth -\n   * @param {Response} response -\n   * @param {AuthHandlerInterface~authInitHookCallback} done -\n   */\n  init: function (auth, response, done) {\n    done(null);\n  },\n  /**\n   * Verifies whether the request has valid basic auth credentials (which is always).\n   * Sanitizes the auth parameters if needed.\n   *\n   * @param {AuthInterface} auth -\n   * @param {AuthHandlerInterface~authPreHookCallback} done -\n   */\n  pre: function (auth, done) {\n    done(null, Boolean(auth.get('accessToken')));\n  },\n  /**\n   * Verifies whether the basic auth succeeded.\n   *\n   * @param {AuthInterface} auth -\n   * @param {Response} response -\n   * @param {AuthHandlerInterface~authPostHookCallback} done -\n   */\n  post: function (auth, response, done) {\n    done(null, true);\n  },\n  /**\n   * Signs a request.\n   *\n   * @param {AuthInterface} auth -\n   * @param {Request} request -\n   * @param {AuthHandlerInterface~authSignHookCallback} done -\n   */\n  sign: function (auth, request, done) {\n    var params = auth.get(OAUTH2_PARAMETERS),\n      tokenType;\n\n    // Validation\n    if (!params.accessToken) {\n      return done(); // Nothing to do if required parameters are not present.\n    }\n\n    // Defaults\n    params.addTokenTo = params.addTokenTo || HEADER; // Add token to header by default\n    params.tokenType = params.tokenType || BEARER; // Use `Bearer` token type by default\n    params.headerPrefix = _.isNil(params.headerPrefix) ? AUTHORIZATION_PREFIX : _.trim(String(params.headerPrefix));\n\n    // add a space after prefix only if there is any prefix\n    params.headerPrefix && (params.headerPrefix += ' ');\n\n    // Some servers send 'Bearer' while others send 'bearer'\n    tokenType = _.toLower(params.tokenType);\n\n    // @TODO Add support for HMAC\n    if (tokenType === MAC) {\n      return done();\n    }\n\n    // treat every token types (other than MAC) as bearer token\n\n    // clean conflicting headers and query params\n    // @todo: we should be able to get conflicting params from auth manifest\n    // and clear them before the sign step for any auth\n    request.removeHeader(AUTHORIZATION, {\n      ignoreCase: true\n    });\n    request.removeQueryParams([ACCESS_TOKEN]);\n    if (params.addTokenTo === QUERY_PARAMS) {\n      request.addQueryParams({\n        key: ACCESS_TOKEN,\n        value: params.accessToken,\n        system: true\n      });\n    } else if (params.addTokenTo === HEADER) {\n      request.addHeader({\n        key: AUTHORIZATION,\n        value: params.headerPrefix + params.accessToken,\n        system: true\n      });\n    }\n    return done();\n  }\n};","map":{"version":3,"names":["_","require","HEADER","QUERY_PARAMS","BEARER","MAC","AUTHORIZATION","ACCESS_TOKEN","AUTHORIZATION_PREFIX","OAUTH2_PARAMETERS","module","exports","manifest","info","name","version","updates","property","type","init","auth","response","done","pre","Boolean","get","post","sign","request","params","tokenType","accessToken","addTokenTo","headerPrefix","isNil","trim","String","toLower","removeHeader","ignoreCase","removeQueryParams","addQueryParams","key","value","system","addHeader"],"sources":["/Users/Qusai.Qishta/node_modules/postman-runtime/lib/authorizer/oauth2.js"],"sourcesContent":["var _ = require('lodash'),\n\n    HEADER = 'header',\n    QUERY_PARAMS = 'queryParams',\n    BEARER = 'bearer',\n    MAC = 'mac',\n    AUTHORIZATION = 'Authorization',\n    ACCESS_TOKEN = 'access_token',\n    AUTHORIZATION_PREFIX = 'Bearer',\n    OAUTH2_PARAMETERS = [\n        'accessToken',\n        'addTokenTo',\n        'tokenType',\n        'headerPrefix'\n    ];\n\n/**\n * @implements {AuthHandlerInterface}\n */\nmodule.exports = {\n    /**\n     * @property {AuthHandlerInterface~AuthManifest}\n     */\n    manifest: {\n        info: {\n            name: 'oauth2',\n            version: '1.0.0'\n        },\n        updates: [\n            {\n                property: AUTHORIZATION,\n                type: 'header'\n            },\n            {\n                property: ACCESS_TOKEN,\n                type: 'url.param'\n            }\n        ]\n    },\n\n    /**\n     * Initializes an item (extracts parameters from intermediate requests if any, etc)\n     * before the actual authorization step.\n     *\n     * @param {AuthInterface} auth -\n     * @param {Response} response -\n     * @param {AuthHandlerInterface~authInitHookCallback} done -\n     */\n    init: function (auth, response, done) {\n        done(null);\n    },\n\n    /**\n     * Verifies whether the request has valid basic auth credentials (which is always).\n     * Sanitizes the auth parameters if needed.\n     *\n     * @param {AuthInterface} auth -\n     * @param {AuthHandlerInterface~authPreHookCallback} done -\n     */\n    pre: function (auth, done) {\n        done(null, Boolean(auth.get('accessToken')));\n    },\n\n    /**\n     * Verifies whether the basic auth succeeded.\n     *\n     * @param {AuthInterface} auth -\n     * @param {Response} response -\n     * @param {AuthHandlerInterface~authPostHookCallback} done -\n     */\n    post: function (auth, response, done) {\n        done(null, true);\n    },\n\n    /**\n     * Signs a request.\n     *\n     * @param {AuthInterface} auth -\n     * @param {Request} request -\n     * @param {AuthHandlerInterface~authSignHookCallback} done -\n     */\n    sign: function (auth, request, done) {\n        var params = auth.get(OAUTH2_PARAMETERS),\n            tokenType;\n\n        // Validation\n        if (!params.accessToken) {\n            return done(); // Nothing to do if required parameters are not present.\n        }\n\n        // Defaults\n        params.addTokenTo = params.addTokenTo || HEADER; // Add token to header by default\n        params.tokenType = params.tokenType || BEARER; // Use `Bearer` token type by default\n        params.headerPrefix = _.isNil(params.headerPrefix) ?\n            AUTHORIZATION_PREFIX : _.trim(String(params.headerPrefix));\n\n        // add a space after prefix only if there is any prefix\n        params.headerPrefix && (params.headerPrefix += ' ');\n\n        // Some servers send 'Bearer' while others send 'bearer'\n        tokenType = _.toLower(params.tokenType);\n\n        // @TODO Add support for HMAC\n        if (tokenType === MAC) {\n            return done();\n        }\n\n        // treat every token types (other than MAC) as bearer token\n\n        // clean conflicting headers and query params\n        // @todo: we should be able to get conflicting params from auth manifest\n        // and clear them before the sign step for any auth\n        request.removeHeader(AUTHORIZATION, { ignoreCase: true });\n        request.removeQueryParams([ACCESS_TOKEN]);\n\n        if (params.addTokenTo === QUERY_PARAMS) {\n            request.addQueryParams({\n                key: ACCESS_TOKEN,\n                value: params.accessToken,\n                system: true\n            });\n        }\n        else if (params.addTokenTo === HEADER) {\n            request.addHeader({\n                key: AUTHORIZATION,\n                value: params.headerPrefix + params.accessToken,\n                system: true\n            });\n        }\n\n        return done();\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}