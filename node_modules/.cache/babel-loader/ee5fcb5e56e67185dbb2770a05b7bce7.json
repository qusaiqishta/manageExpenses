{"ast":null,"code":"var _ = require('lodash'),\n  xml = require('xmlbuilder'),\n  util = require('../../util'),\n  JunitReporter;\n\n/**\n * A function that creates raw XML to be written to Newman JUnit reports.\n *\n * @param {Object} newman - The collection run object, with a event handler setter, used to enable event wise reporting.\n * @param {Object} reporterOptions - A set of JUnit reporter run options.\n * @param {String=} reporterOptions.export - Optional custom path to create the XML report at.\n * @returns {*}\n */\nJunitReporter = function (newman, reporterOptions) {\n  newman.on('beforeDone', function () {\n    var report = _.get(newman, 'summary.run.executions'),\n      collection = _.get(newman, 'summary.collection'),\n      cache,\n      root,\n      testSuitesExecutionTime = 0,\n      executionTime = 0,\n      timestamp,\n      classname;\n    if (!report) {\n      return;\n    }\n    classname = _.upperFirst(_.camelCase(collection.name).replace(/\\W/g, ''));\n    root = xml.create('testsuites', {\n      version: '1.0',\n      encoding: 'UTF-8'\n    });\n    root.att('name', collection.name);\n    root.att('tests', _.get(newman, 'summary.run.stats.tests.total', 'unknown'));\n    cache = _.transform(report, function (accumulator, execution) {\n      accumulator[execution.item.id] = accumulator[execution.id] || [];\n      accumulator[execution.item.id].push(execution);\n    }, {});\n    timestamp = new Date(_.get(newman, 'summary.run.timings.started')).toISOString();\n    _.forEach(cache, function (executions, itemId) {\n      var suite = root.ele('testsuite'),\n        currentItem,\n        tests = {},\n        errors = 0,\n        failures = 0,\n        errorMessages;\n      collection.forEachItem(function (item) {\n        item.id === itemId && (currentItem = item);\n      });\n      if (!currentItem) {\n        return;\n      }\n      suite.att('name', util.getFullName(currentItem));\n      suite.att('id', currentItem.id);\n      suite.att('timestamp', timestamp);\n      _.forEach(executions, function (execution) {\n        var iteration = execution.cursor.iteration,\n          errored,\n          msg = `Iteration: ${iteration}\\n`;\n\n        // Process errors\n        if (execution.requestError) {\n          ++errors;\n          errored = true;\n          msg += 'RequestError: ' + execution.requestError.stack + '\\n';\n        }\n        msg += '\\n---\\n';\n        _.forEach(['testScript', 'prerequestScript'], function (prop) {\n          _.forEach(execution[prop], function (err) {\n            if (err.error) {\n              ++errors;\n              errored = true;\n              msg = msg + prop + 'Error: ' + (err.error.stack || err.error.message);\n              msg += '\\n---\\n';\n            }\n          });\n        });\n        if (errored) {\n          errorMessages = _.isString(errorMessages) ? errorMessages + msg : msg;\n        }\n\n        // Process assertions\n        _.forEach(execution.assertions, function (assertion) {\n          var name = assertion.assertion,\n            err = assertion.error;\n          if (err) {\n            ++failures;\n            _.isArray(tests[name]) ? tests[name].push(err) : tests[name] = [err];\n          } else {\n            tests[name] = [];\n          }\n        });\n        if (execution.assertions) {\n          suite.att('tests', execution.assertions.length);\n        } else {\n          suite.att('tests', 0);\n        }\n        suite.att('failures', failures);\n        suite.att('errors', errors);\n      });\n      suite.att('time', _.mean(_.map(executions, function (execution) {\n        executionTime = _.get(execution, 'response.responseTime') / 1000 || 0;\n        testSuitesExecutionTime += executionTime;\n        return executionTime;\n      })).toFixed(3));\n      errorMessages && suite.ele('system-err').dat(errorMessages);\n      _.forOwn(tests, function (failures, name) {\n        var testcase = suite.ele('testcase'),\n          failure;\n        testcase.att('name', name);\n        testcase.att('time', executionTime.toFixed(3));\n\n        // Set the same classname for all the tests\n        testcase.att('classname', _.get(testcase.up(), 'attributes.name.value', classname));\n        if (failures && failures.length) {\n          failure = testcase.ele('failure');\n          failure.att('type', 'AssertionFailure');\n          failure.dat('Failed ' + failures.length + ' times.');\n          failure.dat('Collection JSON ID: ' + collection.id + '.');\n          failure.dat('Collection name: ' + collection.name + '.');\n          failure.dat('Request name: ' + util.getFullName(currentItem) + '.');\n          failure.dat('Test description: ' + name + '.');\n          if (failures.length !== 0) {\n            failure.att('message', failures[0].message);\n            failure.dat('Error message: ' + failures[0].message + '.');\n            failure.dat('Stacktrace: ' + failures[0].stack + '.');\n          }\n        }\n      });\n    });\n    root.att('time', testSuitesExecutionTime.toFixed(3));\n    newman.exports.push({\n      name: 'junit-reporter',\n      default: 'newman-run-report.xml',\n      path: reporterOptions.export,\n      content: root.end({\n        pretty: true,\n        indent: '  ',\n        newline: '\\n',\n        allowEmpty: false\n      })\n    });\n  });\n};\nmodule.exports = JunitReporter;","map":{"version":3,"names":["_","require","xml","util","JunitReporter","newman","reporterOptions","on","report","get","collection","cache","root","testSuitesExecutionTime","executionTime","timestamp","classname","upperFirst","camelCase","name","replace","create","version","encoding","att","transform","accumulator","execution","item","id","push","Date","toISOString","forEach","executions","itemId","suite","ele","currentItem","tests","errors","failures","errorMessages","forEachItem","getFullName","iteration","cursor","errored","msg","requestError","stack","prop","err","error","message","isString","assertions","assertion","isArray","length","mean","map","toFixed","dat","forOwn","testcase","failure","up","exports","default","path","export","content","end","pretty","indent","newline","allowEmpty","module"],"sources":["/Users/Qusai.Qishta/node_modules/newman/lib/reporters/junit/index.js"],"sourcesContent":["var _ = require('lodash'),\n    xml = require('xmlbuilder'),\n\n    util = require('../../util'),\n    JunitReporter;\n\n/**\n * A function that creates raw XML to be written to Newman JUnit reports.\n *\n * @param {Object} newman - The collection run object, with a event handler setter, used to enable event wise reporting.\n * @param {Object} reporterOptions - A set of JUnit reporter run options.\n * @param {String=} reporterOptions.export - Optional custom path to create the XML report at.\n * @returns {*}\n */\nJunitReporter = function (newman, reporterOptions) {\n    newman.on('beforeDone', function () {\n        var report = _.get(newman, 'summary.run.executions'),\n            collection = _.get(newman, 'summary.collection'),\n            cache,\n            root,\n            testSuitesExecutionTime = 0,\n            executionTime = 0,\n            timestamp,\n            classname;\n\n        if (!report) {\n            return;\n        }\n\n        classname = _.upperFirst(_.camelCase(collection.name).replace(/\\W/g, ''));\n\n        root = xml.create('testsuites', { version: '1.0', encoding: 'UTF-8' });\n        root.att('name', collection.name);\n        root.att('tests', _.get(newman, 'summary.run.stats.tests.total', 'unknown'));\n\n        cache = _.transform(report, function (accumulator, execution) {\n            accumulator[execution.item.id] = accumulator[execution.id] || [];\n            accumulator[execution.item.id].push(execution);\n        }, {});\n\n        timestamp = new Date(_.get(newman, 'summary.run.timings.started')).toISOString();\n\n        _.forEach(cache, function (executions, itemId) {\n            var suite = root.ele('testsuite'),\n                currentItem,\n                tests = {},\n                errors = 0,\n                failures = 0,\n                errorMessages;\n\n            collection.forEachItem(function (item) {\n                (item.id === itemId) && (currentItem = item);\n            });\n\n            if (!currentItem) { return; }\n\n            suite.att('name', util.getFullName(currentItem));\n            suite.att('id', currentItem.id);\n\n            suite.att('timestamp', timestamp);\n\n            _.forEach(executions, function (execution) {\n                var iteration = execution.cursor.iteration,\n                    errored,\n                    msg = `Iteration: ${iteration}\\n`;\n\n                // Process errors\n                if (execution.requestError) {\n                    ++errors;\n                    errored = true;\n                    msg += ('RequestError: ' + (execution.requestError.stack) + '\\n');\n                }\n                msg += '\\n---\\n';\n                _.forEach(['testScript', 'prerequestScript'], function (prop) {\n                    _.forEach(execution[prop], function (err) {\n                        if (err.error) {\n                            ++errors;\n                            errored = true;\n                            msg = (msg + prop + 'Error: ' + (err.error.stack || err.error.message));\n                            msg += '\\n---\\n';\n                        }\n                    });\n                });\n\n                if (errored) {\n                    errorMessages = _.isString(errorMessages) ? (errorMessages + msg) : msg;\n                }\n\n                // Process assertions\n                _.forEach(execution.assertions, function (assertion) {\n                    var name = assertion.assertion,\n                        err = assertion.error;\n\n                    if (err) {\n                        ++failures;\n                        (_.isArray(tests[name]) ? tests[name].push(err) : (tests[name] = [err]));\n                    }\n                    else {\n                        tests[name] = [];\n                    }\n                });\n                if (execution.assertions) {\n                    suite.att('tests', execution.assertions.length);\n                }\n                else {\n                    suite.att('tests', 0);\n                }\n\n                suite.att('failures', failures);\n                suite.att('errors', errors);\n            });\n\n            suite.att('time', _.mean(_.map(executions, function (execution) {\n                executionTime = _.get(execution, 'response.responseTime') / 1000 || 0;\n                testSuitesExecutionTime += executionTime;\n\n                return executionTime;\n            })).toFixed(3));\n            errorMessages && suite.ele('system-err').dat(errorMessages);\n\n            _.forOwn(tests, function (failures, name) {\n                var testcase = suite.ele('testcase'),\n                    failure;\n\n                testcase.att('name', name);\n                testcase.att('time', executionTime.toFixed(3));\n\n                // Set the same classname for all the tests\n                testcase.att('classname', _.get(testcase.up(), 'attributes.name.value',\n                    classname));\n\n                if (failures && failures.length) {\n                    failure = testcase.ele('failure');\n                    failure.att('type', 'AssertionFailure');\n                    failure.dat('Failed ' + failures.length + ' times.');\n                    failure.dat('Collection JSON ID: ' + collection.id + '.');\n                    failure.dat('Collection name: ' + collection.name + '.');\n                    failure.dat('Request name: ' + util.getFullName(currentItem) + '.');\n                    failure.dat('Test description: ' + name + '.');\n                    if (failures.length !== 0) {\n                        failure.att('message', failures[0].message);\n                        failure.dat('Error message: ' + failures[0].message + '.');\n                        failure.dat('Stacktrace: ' + failures[0].stack + '.');\n                    }\n                }\n            });\n        });\n\n        root.att('time', testSuitesExecutionTime.toFixed(3));\n        newman.exports.push({\n            name: 'junit-reporter',\n            default: 'newman-run-report.xml',\n            path: reporterOptions.export,\n            content: root.end({\n                pretty: true,\n                indent: '  ',\n                newline: '\\n',\n                allowEmpty: false\n            })\n        });\n    });\n};\n\nmodule.exports = JunitReporter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}