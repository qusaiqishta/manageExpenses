{"ast":null,"code":"var _ = require('../util').lodash,\n  PropertyList = require('./property-list').PropertyList,\n  Event = require('./event').Event,\n  EventList;\n_.inherit(\n/**\n * A type of {@link PropertyList}, EventList handles resolving events from parents. If an {@link ItemGroup} contains\n * a set of events, each {@link Item} in that group will inherit those events from its parent, and so on.\n *\n * @constructor\n * @param {Object} parent -\n * @param {Object[]} populate -\n * @extends {PropertyList}\n *\n * This is useful when we need to have a common test across all requests.\n */\nEventList = function PostmanEventList(parent, populate) {\n  // this constructor is intended to inherit and as such the super constructor is required to be executed\n  EventList.super_.call(this, Event, parent, populate);\n}, PropertyList);\n_.assign(EventList.prototype, /** @lends EventList.prototype */{\n  /**\n   * Returns an array of listeners filtered by the listener name\n   *\n   * @note\n   * If one needs to access disabled events, use {@link PropertyList#all} or\n   * any other similar {@link PropertyList} method.\n   *\n   * @param {String} name -\n   * @returns {Array<Event>}\n   */\n  listeners(name) {\n    var all;\n\n    // we first procure all matching events from this list\n    all = this.listenersOwn(name);\n    this.eachParent(function (parent) {\n      var parentEvents;\n\n      // we check that the parent is not immediate mother. then we check whether the non immediate mother has a\n      // valid `events` store and only if this store has events with specified listener, we push them to the\n      // array we are compiling for return\n      parent !== this.__parent && EventList.isEventList(parent.events) && (parentEvents = parent.events.listenersOwn(name)) && parentEvents.length && all.unshift.apply(all, parentEvents); // eslint-disable-line prefer-spread\n    }, this);\n    return all;\n  },\n  /**\n   * Returns all events with specific listeners only within this list. Refer to {@link EventList#listeners} for\n   * procuring all inherited events\n   *\n   * @param {string} name -\n   * @returns {Array<Event>}\n   */\n  listenersOwn(name) {\n    return this.filter(function (event) {\n      return !event.disabled && event.listen === name;\n    });\n  }\n});\n_.assign(EventList, /** @lends EventList */{\n  /**\n   * Defines the name of this property for internal use.\n   *\n   * @private\n   * @readOnly\n   * @type {String}\n   */\n  _postman_propertyName: 'EventList',\n  /**\n   * Checks if the given object is an EventList.\n   *\n   * @param {*} obj -\n   * @returns {Boolean}\n   */\n  isEventList: function (obj) {\n    return Boolean(obj) && (obj instanceof EventList || _.inSuperChain(obj.constructor, '_postman_propertyName', EventList._postman_propertyName));\n  }\n});\nmodule.exports = {\n  EventList\n};","map":{"version":3,"names":["_","require","lodash","PropertyList","Event","EventList","inherit","PostmanEventList","parent","populate","super_","call","assign","prototype","listeners","name","all","listenersOwn","eachParent","parentEvents","__parent","isEventList","events","length","unshift","apply","filter","event","disabled","listen","_postman_propertyName","obj","Boolean","inSuperChain","constructor","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/postman-collection/lib/collection/event-list.js"],"sourcesContent":["var _ = require('../util').lodash,\n    PropertyList = require('./property-list').PropertyList,\n    Event = require('./event').Event,\n\n    EventList;\n\n_.inherit((\n\n    /**\n     * A type of {@link PropertyList}, EventList handles resolving events from parents. If an {@link ItemGroup} contains\n     * a set of events, each {@link Item} in that group will inherit those events from its parent, and so on.\n     *\n     * @constructor\n     * @param {Object} parent -\n     * @param {Object[]} populate -\n     * @extends {PropertyList}\n     *\n     * This is useful when we need to have a common test across all requests.\n     */\n    EventList = function PostmanEventList (parent, populate) {\n        // this constructor is intended to inherit and as such the super constructor is required to be executed\n        EventList.super_.call(this, Event, parent, populate);\n    }), PropertyList);\n\n_.assign(EventList.prototype, /** @lends EventList.prototype */ {\n    /**\n     * Returns an array of listeners filtered by the listener name\n     *\n     * @note\n     * If one needs to access disabled events, use {@link PropertyList#all} or\n     * any other similar {@link PropertyList} method.\n     *\n     * @param {String} name -\n     * @returns {Array<Event>}\n     */\n    listeners (name) {\n        var all;\n\n        // we first procure all matching events from this list\n        all = this.listenersOwn(name);\n\n        this.eachParent(function (parent) {\n            var parentEvents;\n\n            // we check that the parent is not immediate mother. then we check whether the non immediate mother has a\n            // valid `events` store and only if this store has events with specified listener, we push them to the\n            // array we are compiling for return\n            (parent !== this.__parent) && EventList.isEventList(parent.events) &&\n                (parentEvents = parent.events.listenersOwn(name)) && parentEvents.length &&\n                all.unshift.apply(all, parentEvents); // eslint-disable-line prefer-spread\n        }, this);\n\n        return all;\n    },\n\n    /**\n     * Returns all events with specific listeners only within this list. Refer to {@link EventList#listeners} for\n     * procuring all inherited events\n     *\n     * @param {string} name -\n     * @returns {Array<Event>}\n     */\n    listenersOwn (name) {\n        return this.filter(function (event) {\n            return (!event.disabled && event.listen === name);\n        });\n    }\n});\n\n_.assign(EventList, /** @lends EventList */ {\n    /**\n     * Defines the name of this property for internal use.\n     *\n     * @private\n     * @readOnly\n     * @type {String}\n     */\n    _postman_propertyName: 'EventList',\n\n    /**\n     * Checks if the given object is an EventList.\n     *\n     * @param {*} obj -\n     * @returns {Boolean}\n     */\n    isEventList: function (obj) {\n        return Boolean(obj) && ((obj instanceof EventList) ||\n            _.inSuperChain(obj.constructor, '_postman_propertyName', EventList._postman_propertyName));\n    }\n});\n\nmodule.exports = {\n    EventList\n};\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM;EAC7BC,YAAY,GAAGF,OAAO,CAAC,iBAAiB,CAAC,CAACE,YAAY;EACtDC,KAAK,GAAGH,OAAO,CAAC,SAAS,CAAC,CAACG,KAAK;EAEhCC,SAAS;AAEbL,CAAC,CAACM,OAAO;AAEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACID,SAAS,GAAG,SAASE,gBAAgB,CAAEC,MAAM,EAAEC,QAAQ,EAAE;EACrD;EACAJ,SAAS,CAACK,MAAM,CAACC,IAAI,CAAC,IAAI,EAAEP,KAAK,EAAEI,MAAM,EAAEC,QAAQ,CAAC;AACxD,CAAC,EAAGN,YAAY,CAAC;AAErBH,CAAC,CAACY,MAAM,CAACP,SAAS,CAACQ,SAAS,EAAE,iCAAkC;EAC5D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,SAAS,CAAEC,IAAI,EAAE;IACb,IAAIC,GAAG;;IAEP;IACAA,GAAG,GAAG,IAAI,CAACC,YAAY,CAACF,IAAI,CAAC;IAE7B,IAAI,CAACG,UAAU,CAAC,UAAUV,MAAM,EAAE;MAC9B,IAAIW,YAAY;;MAEhB;MACA;MACA;MACCX,MAAM,KAAK,IAAI,CAACY,QAAQ,IAAKf,SAAS,CAACgB,WAAW,CAACb,MAAM,CAACc,MAAM,CAAC,KAC7DH,YAAY,GAAGX,MAAM,CAACc,MAAM,CAACL,YAAY,CAACF,IAAI,CAAC,CAAC,IAAII,YAAY,CAACI,MAAM,IACxEP,GAAG,CAACQ,OAAO,CAACC,KAAK,CAACT,GAAG,EAAEG,YAAY,CAAC,CAAC,CAAC;IAC9C,CAAC,EAAE,IAAI,CAAC;IAER,OAAOH,GAAG;EACd,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,YAAY,CAAEF,IAAI,EAAE;IAChB,OAAO,IAAI,CAACW,MAAM,CAAC,UAAUC,KAAK,EAAE;MAChC,OAAQ,CAACA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACE,MAAM,KAAKd,IAAI;IACpD,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEFf,CAAC,CAACY,MAAM,CAACP,SAAS,EAAE,uBAAwB;EACxC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIyB,qBAAqB,EAAE,WAAW;EAElC;AACJ;AACA;AACA;AACA;AACA;EACIT,WAAW,EAAE,UAAUU,GAAG,EAAE;IACxB,OAAOC,OAAO,CAACD,GAAG,CAAC,KAAMA,GAAG,YAAY1B,SAAS,IAC7CL,CAAC,CAACiC,YAAY,CAACF,GAAG,CAACG,WAAW,EAAE,uBAAuB,EAAE7B,SAAS,CAACyB,qBAAqB,CAAC,CAAC;EAClG;AACJ,CAAC,CAAC;AAEFK,MAAM,CAACC,OAAO,GAAG;EACb/B;AACJ,CAAC"},"metadata":{},"sourceType":"script"}