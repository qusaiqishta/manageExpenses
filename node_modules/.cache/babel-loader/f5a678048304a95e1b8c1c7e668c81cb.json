{"ast":null,"code":"var _ = require('lodash'),\n  async = require('async'),\n  env = require('./process-env'),\n  rcfile = require('./rc-file');\n\n/**\n * Reads configuration from config file, environment variables and CLI arguments. The CLI arguments override environment\n * variables and environment variables override the configuration read from a file.\n *\n * @param {Object} overrides - Configuration overrides (these usually come from the CLI).\n * @param {Object} options - The wrapper object of settings used for selective configuration loading.\n * @param {String} options.command - Command name. Used for loading the required options from the config file.\n * @param {Boolean=} options.ignoreRcFile - If true, the RC file is ignored.\n * @param {Boolean=} options.ignoreProcessEnvironment - If true, the process environment variables are ignored.\n * @param {Object=} options.loaders - Custom loaders for specific configuration options.\n * @param {Function} callback - Is called after merging values from the overrides with the values from the rc file and\n * environment variables.\n * @returns {*}\n */\nmodule.exports.get = (overrides, options, callback) => {\n  !callback && _.isFunction(options) && (callback = options, options = {});\n  var loaders = options.loaders,\n    commonOptions = _.pick(overrides, ['postmanApiKey']);\n  async.waterfall([\n  // Load RC Files.\n  !options.ignoreRcFile ? rcfile.load : cb => {\n    return cb(null, {});\n  },\n  // Load Process Environment overrides\n  (fileOptions, cb) => {\n    fileOptions[options.command] && (fileOptions = fileOptions[options.command]);\n    return cb(null, _.merge(fileOptions, options.ignoreProcessEnvironment ? {} : env));\n  }], (err, options) => {\n    if (err) {\n      return callback(err);\n    }\n    options = _.mergeWith({}, options, overrides, (dest, src) => {\n      // If the newer value is a null, do not override it.\n      return src === null ? dest : undefined;\n    });\n    if (_.isEmpty(loaders)) {\n      return callback(null, options);\n    }\n    // sanitize environment option\n    if (!options.environment) {\n      options.environment = {};\n    }\n    // sanitize globals option\n    if (!options.globals) {\n      options.globals = {};\n    }\n    async.mapValues(options, (value, name, cb) => {\n      return value && _.isFunction(loaders[name]) ? loaders[name](value, commonOptions, cb) : cb(null, value);\n    }, callback);\n  });\n};","map":{"version":3,"names":["_","require","async","env","rcfile","module","exports","get","overrides","options","callback","isFunction","loaders","commonOptions","pick","waterfall","ignoreRcFile","load","cb","fileOptions","command","merge","ignoreProcessEnvironment","err","mergeWith","dest","src","undefined","isEmpty","environment","globals","mapValues","value","name"],"sources":["/Users/Qusai.Qishta/node_modules/newman/lib/config/index.js"],"sourcesContent":["var _ = require('lodash'),\n    async = require('async'),\n\n    env = require('./process-env'),\n    rcfile = require('./rc-file');\n\n/**\n * Reads configuration from config file, environment variables and CLI arguments. The CLI arguments override environment\n * variables and environment variables override the configuration read from a file.\n *\n * @param {Object} overrides - Configuration overrides (these usually come from the CLI).\n * @param {Object} options - The wrapper object of settings used for selective configuration loading.\n * @param {String} options.command - Command name. Used for loading the required options from the config file.\n * @param {Boolean=} options.ignoreRcFile - If true, the RC file is ignored.\n * @param {Boolean=} options.ignoreProcessEnvironment - If true, the process environment variables are ignored.\n * @param {Object=} options.loaders - Custom loaders for specific configuration options.\n * @param {Function} callback - Is called after merging values from the overrides with the values from the rc file and\n * environment variables.\n * @returns {*}\n */\nmodule.exports.get = (overrides, options, callback) => {\n    !callback && _.isFunction(options) && (callback = options, options = {});\n\n    var loaders = options.loaders,\n        commonOptions = _.pick(overrides, ['postmanApiKey']);\n\n    async.waterfall([\n        // Load RC Files.\n        !options.ignoreRcFile ? rcfile.load : (cb) => {\n            return cb(null, {});\n        },\n        // Load Process Environment overrides\n        (fileOptions, cb) => {\n            fileOptions[options.command] && (fileOptions = fileOptions[options.command]);\n\n            return cb(null, _.merge(fileOptions, options.ignoreProcessEnvironment ? {} : env));\n        }\n    ], (err, options) => {\n        if (err) {\n            return callback(err);\n        }\n\n        options = _.mergeWith({}, options, overrides, (dest, src) => {\n            // If the newer value is a null, do not override it.\n            return (src === null) ? dest : undefined;\n        });\n\n        if (_.isEmpty(loaders)) {\n            return callback(null, options);\n        }\n        // sanitize environment option\n        if (!options.environment) {\n            options.environment = {};\n        }\n        // sanitize globals option\n        if (!options.globals) {\n            options.globals = {};\n        }\n\n        async.mapValues(options, (value, name, cb) => {\n            return (value && _.isFunction(loaders[name])) ? loaders[name](value, commonOptions, cb) : cb(null, value);\n        }, callback);\n    });\n};\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;EACrBC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;EAExBE,GAAG,GAAGF,OAAO,CAAC,eAAe,CAAC;EAC9BG,MAAM,GAAGH,OAAO,CAAC,WAAW,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,MAAM,CAACC,OAAO,CAACC,GAAG,GAAG,CAACC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,KAAK;EACnD,CAACA,QAAQ,IAAIV,CAAC,CAACW,UAAU,CAACF,OAAO,CAAC,KAAKC,QAAQ,GAAGD,OAAO,EAAEA,OAAO,GAAG,CAAC,CAAC,CAAC;EAExE,IAAIG,OAAO,GAAGH,OAAO,CAACG,OAAO;IACzBC,aAAa,GAAGb,CAAC,CAACc,IAAI,CAACN,SAAS,EAAE,CAAC,eAAe,CAAC,CAAC;EAExDN,KAAK,CAACa,SAAS,CAAC;EACZ;EACA,CAACN,OAAO,CAACO,YAAY,GAAGZ,MAAM,CAACa,IAAI,GAAIC,EAAE,IAAK;IAC1C,OAAOA,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;EACvB,CAAC;EACD;EACA,CAACC,WAAW,EAAED,EAAE,KAAK;IACjBC,WAAW,CAACV,OAAO,CAACW,OAAO,CAAC,KAAKD,WAAW,GAAGA,WAAW,CAACV,OAAO,CAACW,OAAO,CAAC,CAAC;IAE5E,OAAOF,EAAE,CAAC,IAAI,EAAElB,CAAC,CAACqB,KAAK,CAACF,WAAW,EAAEV,OAAO,CAACa,wBAAwB,GAAG,CAAC,CAAC,GAAGnB,GAAG,CAAC,CAAC;EACtF,CAAC,CACJ,EAAE,CAACoB,GAAG,EAAEd,OAAO,KAAK;IACjB,IAAIc,GAAG,EAAE;MACL,OAAOb,QAAQ,CAACa,GAAG,CAAC;IACxB;IAEAd,OAAO,GAAGT,CAAC,CAACwB,SAAS,CAAC,CAAC,CAAC,EAAEf,OAAO,EAAED,SAAS,EAAE,CAACiB,IAAI,EAAEC,GAAG,KAAK;MACzD;MACA,OAAQA,GAAG,KAAK,IAAI,GAAID,IAAI,GAAGE,SAAS;IAC5C,CAAC,CAAC;IAEF,IAAI3B,CAAC,CAAC4B,OAAO,CAAChB,OAAO,CAAC,EAAE;MACpB,OAAOF,QAAQ,CAAC,IAAI,EAAED,OAAO,CAAC;IAClC;IACA;IACA,IAAI,CAACA,OAAO,CAACoB,WAAW,EAAE;MACtBpB,OAAO,CAACoB,WAAW,GAAG,CAAC,CAAC;IAC5B;IACA;IACA,IAAI,CAACpB,OAAO,CAACqB,OAAO,EAAE;MAClBrB,OAAO,CAACqB,OAAO,GAAG,CAAC,CAAC;IACxB;IAEA5B,KAAK,CAAC6B,SAAS,CAACtB,OAAO,EAAE,CAACuB,KAAK,EAAEC,IAAI,EAAEf,EAAE,KAAK;MAC1C,OAAQc,KAAK,IAAIhC,CAAC,CAACW,UAAU,CAACC,OAAO,CAACqB,IAAI,CAAC,CAAC,GAAIrB,OAAO,CAACqB,IAAI,CAAC,CAACD,KAAK,EAAEnB,aAAa,EAAEK,EAAE,CAAC,GAAGA,EAAE,CAAC,IAAI,EAAEc,KAAK,CAAC;IAC7G,CAAC,EAAEtB,QAAQ,CAAC;EAChB,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"script"}