{"ast":null,"code":"const _readline = require('readline');\n\n// low-level terminal interactions\nclass Terminal {\n  constructor(outputStream) {\n    this.stream = outputStream;\n\n    // default: line wrapping enabled\n    this.linewrap = true;\n\n    // current, relative y position\n    this.dy = 0;\n  }\n\n  // save cursor position + settings\n  cursorSave() {\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    // save position\n    this.stream.write('\\x1B7');\n  }\n\n  // restore last cursor position + settings\n  cursorRestore() {\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    // restore cursor\n    this.stream.write('\\x1B8');\n  }\n\n  // show/hide cursor\n  cursor(enabled) {\n    if (!this.stream.isTTY) {\n      return;\n    }\n    if (enabled) {\n      this.stream.write('\\x1B[?25h');\n    } else {\n      this.stream.write('\\x1B[?25l');\n    }\n  }\n\n  // change cursor positionn\n  cursorTo() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    // move cursor absolute\n    _readline.cursorTo(this.stream, x, y);\n  }\n\n  // change relative cursor position\n  cursorRelative() {\n    let dx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let dy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    // store current position\n    this.dy = this.dy + dy;\n\n    // move cursor relative\n    _readline.moveCursor(this.stream, dx, dy);\n  }\n\n  // relative reset\n  cursorRelativeReset() {\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    // move cursor to initial line\n    _readline.moveCursor(this.stream, 0, -this.dy);\n\n    // first char\n    _readline.cursorTo(this.stream, 0, null);\n\n    // reset counter\n    this.dy = 0;\n  }\n\n  // clear to the right from cursor\n  clearRight() {\n    if (!this.stream.isTTY) {\n      return;\n    }\n    _readline.clearLine(this.stream, 1);\n  }\n\n  // clear the full line\n  clearLine() {\n    if (!this.stream.isTTY) {\n      return;\n    }\n    _readline.clearLine(this.stream, 0);\n  }\n\n  // clear everyting beyond the current line\n  clearBottom() {\n    if (!this.stream.isTTY) {\n      return;\n    }\n    _readline.clearScreenDown(this.stream);\n  }\n\n  // add new line; increment counter\n  newline() {\n    this.stream.write('\\n');\n    this.dy++;\n  }\n\n  // write content to output stream\n  // @TODO use string-width to strip length\n  write(s) {\n    // line wrapping enabled ? trim output\n    if (this.linewrap === true) {\n      this.stream.write(s.substr(0, this.getWidth()));\n    } else {\n      this.stream.write(s);\n    }\n  }\n\n  // control line wrapping\n  lineWrapping(enabled) {\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    // store state\n    this.linewrap = enabled;\n    if (enabled) {\n      this.stream.write('\\x1B[?7h');\n    } else {\n      this.stream.write('\\x1B[?7l');\n    }\n  }\n\n  // tty environment ?\n  isTTY() {\n    return this.stream.isTTY === true;\n  }\n\n  // get terminal width\n  getWidth() {\n    // set max width to 80 in tty-mode and 200 in notty-mode\n    return this.stream.columns || (this.stream.isTTY ? 80 : 200);\n  }\n}\nmodule.exports = Terminal;","map":{"version":3,"names":["_readline","require","Terminal","constructor","outputStream","stream","linewrap","dy","cursorSave","isTTY","write","cursorRestore","cursor","enabled","cursorTo","x","y","cursorRelative","dx","moveCursor","cursorRelativeReset","clearRight","clearLine","clearBottom","clearScreenDown","newline","s","substr","getWidth","lineWrapping","columns","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/cli-progress/lib/terminal.js"],"sourcesContent":["const _readline = require('readline');\n\n// low-level terminal interactions\nclass Terminal{\n\n    constructor(outputStream){\n        this.stream = outputStream;\n\n        // default: line wrapping enabled\n        this.linewrap = true;\n\n        // current, relative y position\n        this.dy = 0;\n    }\n\n    // save cursor position + settings\n    cursorSave(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // save position\n        this.stream.write('\\x1B7');\n    }\n\n    // restore last cursor position + settings\n    cursorRestore(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // restore cursor\n        this.stream.write('\\x1B8');\n    }\n\n    // show/hide cursor\n    cursor(enabled){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        if (enabled){\n            this.stream.write('\\x1B[?25h');\n        }else{\n            this.stream.write('\\x1B[?25l');\n        }\n    }\n\n    // change cursor positionn\n    cursorTo(x=null, y=null){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // move cursor absolute\n        _readline.cursorTo(this.stream, x, y);\n    }\n\n    // change relative cursor position\n    cursorRelative(dx=null, dy=null){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // store current position\n        this.dy = this.dy + dy;\n        \n        // move cursor relative\n        _readline.moveCursor(this.stream, dx, dy);\n    }\n\n    // relative reset\n    cursorRelativeReset(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // move cursor to initial line\n        _readline.moveCursor(this.stream, 0, -this.dy);\n\n        // first char\n        _readline.cursorTo(this.stream, 0, null);\n\n        // reset counter\n        this.dy = 0;\n    }\n\n    // clear to the right from cursor\n    clearRight(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        _readline.clearLine(this.stream, 1);\n    }\n\n    // clear the full line\n    clearLine(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        _readline.clearLine(this.stream, 0);\n    }\n\n    // clear everyting beyond the current line\n    clearBottom(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        _readline.clearScreenDown(this.stream);\n    }\n\n    // add new line; increment counter\n    newline(){\n        this.stream.write('\\n');\n        this.dy++;\n    }\n\n    // write content to output stream\n    // @TODO use string-width to strip length\n    write(s){\n        // line wrapping enabled ? trim output\n        if (this.linewrap === true){\n            this.stream.write(s.substr(0, this.getWidth()));\n        }else{\n            this.stream.write(s);\n        }\n    }\n\n    // control line wrapping\n    lineWrapping(enabled){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // store state\n        this.linewrap = enabled;\n        if (enabled){\n            this.stream.write('\\x1B[?7h');\n        }else{\n            this.stream.write('\\x1B[?7l');\n        }\n    }\n\n    // tty environment ?\n    isTTY(){\n        return (this.stream.isTTY === true);\n    }\n\n    // get terminal width\n    getWidth(){\n        // set max width to 80 in tty-mode and 200 in notty-mode\n        return this.stream.columns || (this.stream.isTTY ? 80 : 200);\n    }\n}\n\nmodule.exports = Terminal;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}