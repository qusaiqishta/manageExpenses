{"ast":null,"code":"class ResizeableBuffer {\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    this.size = size;\n    this.length = 0;\n    this.buf = Buffer.alloc(size);\n  }\n  prepend(val) {\n    if (Buffer.isBuffer(val)) {\n      const length = this.length + val.length;\n      if (length >= this.size) {\n        this.resize();\n        if (length >= this.size) {\n          throw Error('INVALID_BUFFER_STATE');\n        }\n      }\n      const buf = this.buf;\n      this.buf = Buffer.alloc(this.size);\n      val.copy(this.buf, 0);\n      buf.copy(this.buf, val.length);\n      this.length += val.length;\n    } else {\n      const length = this.length++;\n      if (length === this.size) {\n        this.resize();\n      }\n      const buf = this.clone();\n      this.buf[0] = val;\n      buf.copy(this.buf, 1, 0, length);\n    }\n  }\n  append(val) {\n    const length = this.length++;\n    if (length === this.size) {\n      this.resize();\n    }\n    this.buf[length] = val;\n  }\n  clone() {\n    return Buffer.from(this.buf.slice(0, this.length));\n  }\n  resize() {\n    const length = this.length;\n    this.size = this.size * 2;\n    const buf = Buffer.alloc(this.size);\n    this.buf.copy(buf, 0, 0, length);\n    this.buf = buf;\n  }\n  toString(encoding) {\n    if (encoding) {\n      return this.buf.slice(0, this.length).toString(encoding);\n    } else {\n      return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));\n    }\n  }\n  toJSON() {\n    return this.toString('utf8');\n  }\n  reset() {\n    this.length = 0;\n  }\n}\nmodule.exports = ResizeableBuffer;","map":{"version":3,"names":["ResizeableBuffer","constructor","size","length","buf","Buffer","alloc","prepend","val","isBuffer","resize","Error","copy","clone","append","from","slice","toString","encoding","Uint8Array","prototype","call","toJSON","reset","module","exports"],"sources":["/Users/Qusai.Qishta/node_modules/csv-parse/lib/ResizeableBuffer.js"],"sourcesContent":["\n\nclass ResizeableBuffer{\n  constructor(size=100){\n    this.size = size\n    this.length = 0\n    this.buf = Buffer.alloc(size)\n  }\n  prepend(val){\n    if(Buffer.isBuffer(val)){\n      const length = this.length + val.length\n      if(length >= this.size){\n        this.resize()\n        if(length >= this.size){\n          throw Error('INVALID_BUFFER_STATE')\n        }\n      }\n      const buf = this.buf\n      this.buf = Buffer.alloc(this.size)\n      val.copy(this.buf, 0)\n      buf.copy(this.buf, val.length)\n      this.length += val.length\n    }else{\n      const length = this.length++\n      if(length === this.size){\n        this.resize()\n      }\n      const buf = this.clone()\n      this.buf[0] = val\n      buf.copy(this.buf,1, 0, length)\n    }\n  }\n  append(val){\n    const length = this.length++\n    if(length === this.size){\n      this.resize()\n    }\n    this.buf[length] = val\n  }\n  clone(){\n    return Buffer.from(this.buf.slice(0, this.length))\n  }\n  resize(){\n    const length = this.length\n    this.size = this.size * 2\n    const buf = Buffer.alloc(this.size)\n    this.buf.copy(buf,0, 0, length)\n    this.buf = buf\n  }\n  toString(encoding){\n    if(encoding){\n      return this.buf.slice(0, this.length).toString(encoding)\n    }else{\n      return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length))\n    }\n  }\n  toJSON(){\n    return this.toString('utf8')\n  }\n  reset(){\n    this.length = 0\n  }\n}\n\nmodule.exports = ResizeableBuffer\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}