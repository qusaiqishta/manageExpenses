{"ast":null,"code":"/*!\n * word-wrap <https://github.com/jonschlinkert/word-wrap>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nmodule.exports = function (str, options) {\n  options = options || {};\n  if (str == null) {\n    return str;\n  }\n  var width = options.width || 50;\n  var indent = typeof options.indent === 'string' ? options.indent : '  ';\n  var newline = options.newline || '\\n' + indent;\n  var escape = typeof options.escape === 'function' ? options.escape : identity;\n  var regexString = '.{1,' + width + '}';\n  if (options.cut !== true) {\n    regexString += '([\\\\s\\u200B]+|$)|[^\\\\s\\u200B]+?([\\\\s\\u200B]+|$)';\n  }\n  var re = new RegExp(regexString, 'g');\n  var lines = str.match(re) || [];\n  var result = indent + lines.map(function (line) {\n    if (line.slice(-1) === '\\n') {\n      line = line.slice(0, line.length - 1);\n    }\n    return escape(line);\n  }).join(newline);\n  if (options.trim === true) {\n    result = result.replace(/[ \\t]*$/gm, '');\n  }\n  return result;\n};\nfunction identity(str) {\n  return str;\n}","map":{"version":3,"names":["module","exports","str","options","width","indent","newline","escape","identity","regexString","cut","re","RegExp","lines","match","result","map","line","slice","length","join","trim","replace"],"sources":["/Users/Qusai.Qishta/node_modules/word-wrap/index.js"],"sourcesContent":["/*!\n * word-wrap <https://github.com/jonschlinkert/word-wrap>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nmodule.exports = function(str, options) {\n  options = options || {};\n  if (str == null) {\n    return str;\n  }\n\n  var width = options.width || 50;\n  var indent = (typeof options.indent === 'string')\n    ? options.indent\n    : '  ';\n\n  var newline = options.newline || '\\n' + indent;\n  var escape = typeof options.escape === 'function'\n    ? options.escape\n    : identity;\n\n  var regexString = '.{1,' + width + '}';\n  if (options.cut !== true) {\n    regexString += '([\\\\s\\u200B]+|$)|[^\\\\s\\u200B]+?([\\\\s\\u200B]+|$)';\n  }\n\n  var re = new RegExp(regexString, 'g');\n  var lines = str.match(re) || [];\n  var result = indent + lines.map(function(line) {\n    if (line.slice(-1) === '\\n') {\n      line = line.slice(0, line.length - 1);\n    }\n    return escape(line);\n  }).join(newline);\n\n  if (options.trim === true) {\n    result = result.replace(/[ \\t]*$/gm, '');\n  }\n  return result;\n};\n\nfunction identity(str) {\n  return str;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAG,UAASC,GAAG,EAAEC,OAAO,EAAE;EACtCA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAID,GAAG,IAAI,IAAI,EAAE;IACf,OAAOA,GAAG;EACZ;EAEA,IAAIE,KAAK,GAAGD,OAAO,CAACC,KAAK,IAAI,EAAE;EAC/B,IAAIC,MAAM,GAAI,OAAOF,OAAO,CAACE,MAAM,KAAK,QAAQ,GAC5CF,OAAO,CAACE,MAAM,GACd,IAAI;EAER,IAAIC,OAAO,GAAGH,OAAO,CAACG,OAAO,IAAI,IAAI,GAAGD,MAAM;EAC9C,IAAIE,MAAM,GAAG,OAAOJ,OAAO,CAACI,MAAM,KAAK,UAAU,GAC7CJ,OAAO,CAACI,MAAM,GACdC,QAAQ;EAEZ,IAAIC,WAAW,GAAG,MAAM,GAAGL,KAAK,GAAG,GAAG;EACtC,IAAID,OAAO,CAACO,GAAG,KAAK,IAAI,EAAE;IACxBD,WAAW,IAAI,iDAAiD;EAClE;EAEA,IAAIE,EAAE,GAAG,IAAIC,MAAM,CAACH,WAAW,EAAE,GAAG,CAAC;EACrC,IAAII,KAAK,GAAGX,GAAG,CAACY,KAAK,CAACH,EAAE,CAAC,IAAI,EAAE;EAC/B,IAAII,MAAM,GAAGV,MAAM,GAAGQ,KAAK,CAACG,GAAG,CAAC,UAASC,IAAI,EAAE;IAC7C,IAAIA,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;MAC3BD,IAAI,GAAGA,IAAI,CAACC,KAAK,CAAC,CAAC,EAAED,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC;IACvC;IACA,OAAOZ,MAAM,CAACU,IAAI,CAAC;EACrB,CAAC,CAAC,CAACG,IAAI,CAACd,OAAO,CAAC;EAEhB,IAAIH,OAAO,CAACkB,IAAI,KAAK,IAAI,EAAE;IACzBN,MAAM,GAAGA,MAAM,CAACO,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;EAC1C;EACA,OAAOP,MAAM;AACf,CAAC;AAED,SAASP,QAAQ,CAACN,GAAG,EAAE;EACrB,OAAOA,GAAG;AACZ"},"metadata":{},"sourceType":"script"}